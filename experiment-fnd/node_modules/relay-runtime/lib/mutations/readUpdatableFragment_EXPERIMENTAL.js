/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @emails oncall+relay
 * @format
 */
// flowlint ambiguous-object-type:error
'use strict';

var _require = require('../query/GraphQLTag'),
    getFragment = _require.getFragment;

var _require2 = require('../store/RelayModernSelector'),
    getVariablesFromFragment = _require2.getVariablesFromFragment;

var _require3 = require('../store/RelayStoreUtils'),
    ID_KEY = _require3.ID_KEY;

var _require4 = require('./createUpdatableProxy'),
    createUpdatableProxy = _require4.createUpdatableProxy;

var invariant = require('invariant'); // Note: plural fragment references are currently not supported


function readUpdatableFragment_EXPERIMENTAL(fragment, fragmentReference, proxy) {
  var updatableFragment = getFragment(fragment);
  var fragmentVariables = getVariablesFromFragment(updatableFragment, fragmentReference); // $FlowFixMe[prop-missing] it's there, we just don't include it in the type

  var id = fragmentReference[ID_KEY];
  var fragmentRoot = proxy.get(id);
  !(fragmentRoot != null) ? process.env.NODE_ENV !== "production" ? invariant(false, "No record with ".concat(id, " was found. This likely indicates a problem with Relay.")) : invariant(false) : void 0;
  return {
    updatableData: createUpdatableProxy(fragmentRoot, fragmentVariables, updatableFragment.selections, proxy)
  };
}

module.exports = {
  readUpdatableFragment_EXPERIMENTAL: readUpdatableFragment_EXPERIMENTAL
};