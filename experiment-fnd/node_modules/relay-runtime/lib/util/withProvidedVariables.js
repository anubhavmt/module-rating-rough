/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 * @emails oncall+relay
 */
// flowlint ambiguous-object-type:error
'use strict';

var areEqual = require("fbjs/lib/areEqual");

var warning = require("fbjs/lib/warning");

var WEAKMAP_SUPPORTED = typeof WeakMap === 'function';
var debugCache = WEAKMAP_SUPPORTED ? new WeakMap() : new Map();

function withProvidedVariables(userSuppliedVariables, providedVariables) {
  if (providedVariables != null) {
    var operationVariables = {};
    Object.assign(operationVariables, userSuppliedVariables);
    Object.keys(providedVariables).forEach(function (varName) {
      var providerFunction = providedVariables[varName].get;
      var providerResult = providerFunction(); // people like to ignore these warnings, so use the cache to
      // enforce that we only compute the value the first time

      if (!debugCache.has(providerFunction)) {
        debugCache.set(providerFunction, providerResult);
        operationVariables[varName] = providerResult;
      } else {
        var cachedResult = debugCache.get(providerFunction);

        if (process.env.NODE_ENV !== "production") {
          process.env.NODE_ENV !== "production" ? warning(areEqual(providerResult, cachedResult), 'Relay: Expected function `%s` for provider `%s` to be a pure function, ' + 'but got conflicting return values `%s` and `%s`', providerFunction.name, varName, providerResult, cachedResult) : void 0;
        }

        operationVariables[varName] = cachedResult;
      }
    });
    return operationVariables;
  } else {
    return userSuppliedVariables;
  }
}

if (process.env.NODE_ENV !== "production") {
  withProvidedVariables.tests_only_resetDebugCache = function () {
    debugCache = WEAKMAP_SUPPORTED ? new WeakMap() : new Map();
  };
}

module.exports = withProvidedVariables;