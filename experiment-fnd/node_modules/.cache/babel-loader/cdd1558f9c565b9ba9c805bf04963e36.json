{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('./FragmentResource'),\n    getFragmentResourceForEnvironment = _require.getFragmentResourceForEnvironment;\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar _require2 = require('react'),\n    useEffect = _require2.useEffect,\n    useRef = _require2.useRef,\n    useState = _require2.useState;\n\nvar _require3 = require('relay-runtime'),\n    getFragmentIdentifier = _require3.getFragmentIdentifier;\n\nvar warning = require(\"fbjs/lib/warning\");\n\nfunction useFragmentNode(fragmentNode, fragmentRef, componentDisplayName) {\n  var environment = useRelayEnvironment();\n  var FragmentResource = getFragmentResourceForEnvironment(environment);\n  var isMountedRef = useRef(false);\n\n  var _useState = useState(0),\n      forceUpdate = _useState[1];\n\n  var fragmentIdentifier = getFragmentIdentifier(fragmentNode, fragmentRef); // Read fragment data; this might suspend.\n\n  var fragmentResult = FragmentResource.readWithIdentifier(fragmentNode, fragmentRef, fragmentIdentifier, componentDisplayName);\n  var isListeningForUpdatesRef = useRef(true);\n\n  function enableStoreUpdates() {\n    isListeningForUpdatesRef.current = true;\n    var didMissUpdates = FragmentResource.checkMissedUpdates(fragmentResult)[0];\n\n    if (didMissUpdates) {\n      handleDataUpdate();\n    }\n  }\n\n  function disableStoreUpdates() {\n    isListeningForUpdatesRef.current = false;\n  }\n\n  function handleDataUpdate() {\n    if (isMountedRef.current === false || isListeningForUpdatesRef.current === false) {\n      return;\n    } // React bails out on noop state updates as an optimization.\n    // If we want to force an update via setState, we need to pass an value.\n    // The actual value can be arbitrary though, e.g. an incremented number.\n\n\n    forceUpdate(function (count) {\n      return count + 1;\n    });\n  } // Establish Relay store subscriptions in the commit phase, only if\n  // rendering for the first time, or if we need to subscribe to new data\n  // If the fragment identifier changes, it means that the variables on the\n  // fragment owner changed, or the fragment ref points to different records.\n  // In this case, we need to resubscribe to the Relay store.\n\n\n  useEffect(function () {\n    isMountedRef.current = true;\n    var disposable = FragmentResource.subscribe(fragmentResult, handleDataUpdate);\n    return function () {\n      // When unmounting or resubscribing to new data, clean up current\n      // subscription. This will also make sure fragment data is no longer\n      // cached so that next time it its read, it will be freshly read from\n      // the Relay store\n      isMountedRef.current = false;\n      disposable.dispose();\n    }; // NOTE: We disable react-hooks-deps warning because environment and fragmentIdentifier\n    // is capturing all information about whether the effect should be re-ran.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [environment, fragmentIdentifier]);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (fragmentRef != null && (fragmentResult.data === undefined || Array.isArray(fragmentResult.data) && fragmentResult.data.length > 0 && fragmentResult.data.every(function (data) {\n      return data === undefined;\n    }))) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Expected to have been able to read non-null data for ' + 'fragment `%s` declared in ' + '`%s`, since fragment reference was non-null. ' + \"Make sure that that `%s`'s parent isn't \" + 'holding on to and/or passing a fragment reference for data that ' + 'has been deleted.', fragmentNode.name, componentDisplayName, componentDisplayName) : void 0;\n    }\n  }\n\n  return {\n    // $FlowFixMe[incompatible-return]\n    data: fragmentResult.data,\n    disableStoreUpdates: disableStoreUpdates,\n    enableStoreUpdates: enableStoreUpdates\n  };\n}\n\nmodule.exports = useFragmentNode;","map":{"version":3,"names":["_require","require","getFragmentResourceForEnvironment","useRelayEnvironment","_require2","useEffect","useRef","useState","_require3","getFragmentIdentifier","warning","useFragmentNode","fragmentNode","fragmentRef","componentDisplayName","environment","FragmentResource","isMountedRef","_useState","forceUpdate","fragmentIdentifier","fragmentResult","readWithIdentifier","isListeningForUpdatesRef","enableStoreUpdates","current","didMissUpdates","checkMissedUpdates","handleDataUpdate","disableStoreUpdates","count","disposable","subscribe","dispose","process","env","NODE_ENV","data","undefined","Array","isArray","length","every","name","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/react-relay/lib/relay-hooks/useFragmentNode.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('./FragmentResource'),\n    getFragmentResourceForEnvironment = _require.getFragmentResourceForEnvironment;\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar _require2 = require('react'),\n    useEffect = _require2.useEffect,\n    useRef = _require2.useRef,\n    useState = _require2.useState;\n\nvar _require3 = require('relay-runtime'),\n    getFragmentIdentifier = _require3.getFragmentIdentifier;\n\nvar warning = require(\"fbjs/lib/warning\");\n\nfunction useFragmentNode(fragmentNode, fragmentRef, componentDisplayName) {\n  var environment = useRelayEnvironment();\n  var FragmentResource = getFragmentResourceForEnvironment(environment);\n  var isMountedRef = useRef(false);\n\n  var _useState = useState(0),\n      forceUpdate = _useState[1];\n\n  var fragmentIdentifier = getFragmentIdentifier(fragmentNode, fragmentRef); // Read fragment data; this might suspend.\n\n  var fragmentResult = FragmentResource.readWithIdentifier(fragmentNode, fragmentRef, fragmentIdentifier, componentDisplayName);\n  var isListeningForUpdatesRef = useRef(true);\n\n  function enableStoreUpdates() {\n    isListeningForUpdatesRef.current = true;\n    var didMissUpdates = FragmentResource.checkMissedUpdates(fragmentResult)[0];\n\n    if (didMissUpdates) {\n      handleDataUpdate();\n    }\n  }\n\n  function disableStoreUpdates() {\n    isListeningForUpdatesRef.current = false;\n  }\n\n  function handleDataUpdate() {\n    if (isMountedRef.current === false || isListeningForUpdatesRef.current === false) {\n      return;\n    } // React bails out on noop state updates as an optimization.\n    // If we want to force an update via setState, we need to pass an value.\n    // The actual value can be arbitrary though, e.g. an incremented number.\n\n\n    forceUpdate(function (count) {\n      return count + 1;\n    });\n  } // Establish Relay store subscriptions in the commit phase, only if\n  // rendering for the first time, or if we need to subscribe to new data\n  // If the fragment identifier changes, it means that the variables on the\n  // fragment owner changed, or the fragment ref points to different records.\n  // In this case, we need to resubscribe to the Relay store.\n\n\n  useEffect(function () {\n    isMountedRef.current = true;\n    var disposable = FragmentResource.subscribe(fragmentResult, handleDataUpdate);\n    return function () {\n      // When unmounting or resubscribing to new data, clean up current\n      // subscription. This will also make sure fragment data is no longer\n      // cached so that next time it its read, it will be freshly read from\n      // the Relay store\n      isMountedRef.current = false;\n      disposable.dispose();\n    }; // NOTE: We disable react-hooks-deps warning because environment and fragmentIdentifier\n    // is capturing all information about whether the effect should be re-ran.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [environment, fragmentIdentifier]);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    if (fragmentRef != null && (fragmentResult.data === undefined || Array.isArray(fragmentResult.data) && fragmentResult.data.length > 0 && fragmentResult.data.every(function (data) {\n      return data === undefined;\n    }))) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Expected to have been able to read non-null data for ' + 'fragment `%s` declared in ' + '`%s`, since fragment reference was non-null. ' + \"Make sure that that `%s`'s parent isn't \" + 'holding on to and/or passing a fragment reference for data that ' + 'has been deleted.', fragmentNode.name, componentDisplayName, componentDisplayName) : void 0;\n    }\n  }\n\n  return {\n    // $FlowFixMe[incompatible-return]\n    data: fragmentResult.data,\n    disableStoreUpdates: disableStoreUpdates,\n    enableStoreUpdates: enableStoreUpdates\n  };\n}\n\nmodule.exports = useFragmentNode;"],"mappings":"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"},"metadata":{},"sourceType":"script"}