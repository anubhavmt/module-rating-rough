{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar CONNECTION_CALLS = {\n  after: true,\n  before: true,\n  find: true,\n  first: true,\n  last: true,\n  surrounds: true\n};\nvar config = {\n  CURSOR: 'cursor',\n  EDGES: 'edges',\n  END_CURSOR: 'endCursor',\n  HAS_NEXT_PAGE: 'hasNextPage',\n  HAS_PREV_PAGE: 'hasPreviousPage',\n  NODE: 'node',\n  PAGE_INFO_TYPE: 'PageInfo',\n  PAGE_INFO: 'pageInfo',\n  START_CURSOR: 'startCursor'\n};\n/**\n * @internal\n *\n * Defines logic relevant to the informal \"Connection\" GraphQL interface.\n */\n\nvar ConnectionInterface = {\n  inject: function inject(newConfig) {\n    config = newConfig;\n  },\n  get: function get() {\n    return config;\n  },\n\n  /**\n   * Checks whether a call exists strictly to encode which parts of a connection\n   * to fetch. Fields that only differ by connection call values should have the\n   * same identity.\n   */\n  isConnectionCall: function isConnectionCall(call) {\n    return CONNECTION_CALLS.hasOwnProperty(call.name);\n  }\n};\nmodule.exports = ConnectionInterface;","map":{"version":3,"names":["CONNECTION_CALLS","after","before","find","first","last","surrounds","config","CURSOR","EDGES","END_CURSOR","HAS_NEXT_PAGE","HAS_PREV_PAGE","NODE","PAGE_INFO_TYPE","PAGE_INFO","START_CURSOR","ConnectionInterface","inject","newConfig","get","isConnectionCall","call","hasOwnProperty","name","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/relay-runtime/lib/handlers/connection/ConnectionInterface.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar CONNECTION_CALLS = {\n  after: true,\n  before: true,\n  find: true,\n  first: true,\n  last: true,\n  surrounds: true\n};\nvar config = {\n  CURSOR: 'cursor',\n  EDGES: 'edges',\n  END_CURSOR: 'endCursor',\n  HAS_NEXT_PAGE: 'hasNextPage',\n  HAS_PREV_PAGE: 'hasPreviousPage',\n  NODE: 'node',\n  PAGE_INFO_TYPE: 'PageInfo',\n  PAGE_INFO: 'pageInfo',\n  START_CURSOR: 'startCursor'\n};\n/**\n * @internal\n *\n * Defines logic relevant to the informal \"Connection\" GraphQL interface.\n */\n\nvar ConnectionInterface = {\n  inject: function inject(newConfig) {\n    config = newConfig;\n  },\n  get: function get() {\n    return config;\n  },\n\n  /**\n   * Checks whether a call exists strictly to encode which parts of a connection\n   * to fetch. Fields that only differ by connection call values should have the\n   * same identity.\n   */\n  isConnectionCall: function isConnectionCall(call) {\n    return CONNECTION_CALLS.hasOwnProperty(call.name);\n  }\n};\nmodule.exports = ConnectionInterface;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,gBAAgB,GAAG;EACrBC,KAAK,EAAE,IADc;EAErBC,MAAM,EAAE,IAFa;EAGrBC,IAAI,EAAE,IAHe;EAIrBC,KAAK,EAAE,IAJc;EAKrBC,IAAI,EAAE,IALe;EAMrBC,SAAS,EAAE;AANU,CAAvB;AAQA,IAAIC,MAAM,GAAG;EACXC,MAAM,EAAE,QADG;EAEXC,KAAK,EAAE,OAFI;EAGXC,UAAU,EAAE,WAHD;EAIXC,aAAa,EAAE,aAJJ;EAKXC,aAAa,EAAE,iBALJ;EAMXC,IAAI,EAAE,MANK;EAOXC,cAAc,EAAE,UAPL;EAQXC,SAAS,EAAE,UARA;EASXC,YAAY,EAAE;AATH,CAAb;AAWA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,mBAAmB,GAAG;EACxBC,MAAM,EAAE,SAASA,MAAT,CAAgBC,SAAhB,EAA2B;IACjCZ,MAAM,GAAGY,SAAT;EACD,CAHuB;EAIxBC,GAAG,EAAE,SAASA,GAAT,GAAe;IAClB,OAAOb,MAAP;EACD,CANuB;;EAQxB;AACF;AACA;AACA;AACA;EACEc,gBAAgB,EAAE,SAASA,gBAAT,CAA0BC,IAA1B,EAAgC;IAChD,OAAOtB,gBAAgB,CAACuB,cAAjB,CAAgCD,IAAI,CAACE,IAArC,CAAP;EACD;AAfuB,CAA1B;AAiBAC,MAAM,CAACC,OAAP,GAAiBT,mBAAjB"},"metadata":{},"sourceType":"script"}