{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar HooksImplementation = require('./HooksImplementation');\n\nvar _require = require('./loadQuery'),\n    useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;\n\nvar useLazyLoadQueryNode = require('./useLazyLoadQueryNode');\n\nvar useMemoOperationDescriptor = require('./useMemoOperationDescriptor');\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar invariant = require('invariant');\n\nvar _require2 = require('react'),\n    useDebugValue = _require2.useDebugValue;\n\nvar _require3 = require('relay-runtime'),\n    _require3$__internal = _require3.__internal,\n    fetchQueryDeduped = _require3$__internal.fetchQueryDeduped,\n    fetchQuery = _require3$__internal.fetchQuery;\n\nvar warning = require(\"fbjs/lib/warning\"); // This separate type export is only needed as long as we are injecting\n// a separate hooks implementation in ./HooksImplementation -- it can\n// be removed after we stop doing that.\n\n\nfunction usePreloadedQuery_LEGACY(gqlQuery, preloadedQuery, options) {\n  // We need to use this hook in order to be able to track if\n  // loadQuery was called during render\n  useTrackLoadQueryInRender();\n  var environment = useRelayEnvironment();\n  var fetchKey = preloadedQuery.fetchKey,\n      fetchPolicy = preloadedQuery.fetchPolicy,\n      source = preloadedQuery.source,\n      variables = preloadedQuery.variables,\n      networkCacheConfig = preloadedQuery.networkCacheConfig;\n  var operation = useMemoOperationDescriptor(gqlQuery, variables, networkCacheConfig);\n  var useLazyLoadQueryNodeParams;\n\n  if (preloadedQuery.kind === 'PreloadedQuery_DEPRECATED') {\n    !(operation.request.node.params.name === preloadedQuery.name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'usePreloadedQuery(): Expected data to be prefetched for query `%s`, ' + 'got prefetch results for query `%s`.', operation.request.node.params.name, preloadedQuery.name) : invariant(false) : void 0;\n    useLazyLoadQueryNodeParams = {\n      componentDisplayName: 'usePreloadedQuery()',\n      fetchKey: fetchKey,\n      fetchObservable: fetchQueryDeduped(environment, operation.request.identifier, function () {\n        if (environment === preloadedQuery.environment && source != null) {\n          return environment.executeWithSource({\n            operation: operation,\n            source: source\n          });\n        } else {\n          return environment.execute({\n            operation: operation\n          });\n        }\n      }),\n      fetchPolicy: fetchPolicy,\n      query: operation,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    };\n  } else {\n    process.env.NODE_ENV !== \"production\" ? warning(preloadedQuery.isDisposed === false, 'usePreloadedQuery(): Expected preloadedQuery to not be disposed yet. ' + 'This is because disposing the query marks it for future garbage ' + 'collection, and as such query results may no longer be present in the Relay ' + 'store. In the future, this will become a hard error.') : void 0;\n    var fallbackFetchObservable = fetchQuery(environment, operation);\n    var fetchObservable;\n\n    if (source != null && environment === preloadedQuery.environment) {\n      // If the source observable exists and the environments match, reuse\n      // the source observable.\n      // If the source observable happens to be empty, we need to fall back\n      // and re-execute and de-dupe the query (at render time).\n      fetchObservable = source.ifEmpty(fallbackFetchObservable);\n    } else if (environment !== preloadedQuery.environment) {\n      // If a call to loadQuery is made with a particular environment, and that\n      // preloaded query is passed to usePreloadedQuery in a different environment\n      // context, we cannot re-use the existing preloaded query.\n      // Instead, we need to fall back and re-execute and de-dupe the query with\n      // the new environment (at render time).\n      // TODO T68036756 track occurences of this warning and turn it into a hard error\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'usePreloadedQuery(): usePreloadedQuery was passed a preloaded query ' + 'that was created with a different environment than the one that is currently ' + 'in context. In the future, this will become a hard error.') : void 0;\n      fetchObservable = fallbackFetchObservable;\n    } else {\n      // if (source == null)\n      // If the source observable does not exist, we need to\n      // fall back and re-execute and de-dupe the query (at render time).\n      fetchObservable = fallbackFetchObservable;\n    }\n\n    useLazyLoadQueryNodeParams = {\n      componentDisplayName: 'usePreloadedQuery()',\n      fetchObservable: fetchObservable,\n      fetchKey: fetchKey,\n      fetchPolicy: fetchPolicy,\n      query: operation,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    };\n  }\n\n  var data = useLazyLoadQueryNode(useLazyLoadQueryNodeParams);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useDebugValue({\n      query: preloadedQuery.name,\n      variables: preloadedQuery.variables,\n      data: data,\n      fetchKey: fetchKey,\n      fetchPolicy: fetchPolicy,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    });\n  }\n\n  return data;\n}\n\nfunction usePreloadedQuery(gqlQuery, preloadedQuery, options) {\n  var impl = HooksImplementation.get();\n\n  if (impl) {\n    return impl.usePreloadedQuery(gqlQuery, preloadedQuery, options);\n  } else {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return usePreloadedQuery_LEGACY(gqlQuery, preloadedQuery, options);\n  }\n}\n\nmodule.exports = usePreloadedQuery;","map":{"version":3,"names":["HooksImplementation","require","_require","useTrackLoadQueryInRender","useLazyLoadQueryNode","useMemoOperationDescriptor","useRelayEnvironment","invariant","_require2","useDebugValue","_require3","_require3$__internal","__internal","fetchQueryDeduped","fetchQuery","warning","usePreloadedQuery_LEGACY","gqlQuery","preloadedQuery","options","environment","fetchKey","fetchPolicy","source","variables","networkCacheConfig","operation","useLazyLoadQueryNodeParams","kind","request","node","params","name","process","env","NODE_ENV","componentDisplayName","fetchObservable","identifier","executeWithSource","execute","query","renderPolicy","UNSTABLE_renderPolicy","isDisposed","fallbackFetchObservable","ifEmpty","data","usePreloadedQuery","impl","get","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/react-relay/lib/relay-hooks/usePreloadedQuery.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar HooksImplementation = require('./HooksImplementation');\n\nvar _require = require('./loadQuery'),\n    useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;\n\nvar useLazyLoadQueryNode = require('./useLazyLoadQueryNode');\n\nvar useMemoOperationDescriptor = require('./useMemoOperationDescriptor');\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar invariant = require('invariant');\n\nvar _require2 = require('react'),\n    useDebugValue = _require2.useDebugValue;\n\nvar _require3 = require('relay-runtime'),\n    _require3$__internal = _require3.__internal,\n    fetchQueryDeduped = _require3$__internal.fetchQueryDeduped,\n    fetchQuery = _require3$__internal.fetchQuery;\n\nvar warning = require(\"fbjs/lib/warning\"); // This separate type export is only needed as long as we are injecting\n// a separate hooks implementation in ./HooksImplementation -- it can\n// be removed after we stop doing that.\n\n\nfunction usePreloadedQuery_LEGACY(gqlQuery, preloadedQuery, options) {\n  // We need to use this hook in order to be able to track if\n  // loadQuery was called during render\n  useTrackLoadQueryInRender();\n  var environment = useRelayEnvironment();\n  var fetchKey = preloadedQuery.fetchKey,\n      fetchPolicy = preloadedQuery.fetchPolicy,\n      source = preloadedQuery.source,\n      variables = preloadedQuery.variables,\n      networkCacheConfig = preloadedQuery.networkCacheConfig;\n  var operation = useMemoOperationDescriptor(gqlQuery, variables, networkCacheConfig);\n  var useLazyLoadQueryNodeParams;\n\n  if (preloadedQuery.kind === 'PreloadedQuery_DEPRECATED') {\n    !(operation.request.node.params.name === preloadedQuery.name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'usePreloadedQuery(): Expected data to be prefetched for query `%s`, ' + 'got prefetch results for query `%s`.', operation.request.node.params.name, preloadedQuery.name) : invariant(false) : void 0;\n    useLazyLoadQueryNodeParams = {\n      componentDisplayName: 'usePreloadedQuery()',\n      fetchKey: fetchKey,\n      fetchObservable: fetchQueryDeduped(environment, operation.request.identifier, function () {\n        if (environment === preloadedQuery.environment && source != null) {\n          return environment.executeWithSource({\n            operation: operation,\n            source: source\n          });\n        } else {\n          return environment.execute({\n            operation: operation\n          });\n        }\n      }),\n      fetchPolicy: fetchPolicy,\n      query: operation,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    };\n  } else {\n    process.env.NODE_ENV !== \"production\" ? warning(preloadedQuery.isDisposed === false, 'usePreloadedQuery(): Expected preloadedQuery to not be disposed yet. ' + 'This is because disposing the query marks it for future garbage ' + 'collection, and as such query results may no longer be present in the Relay ' + 'store. In the future, this will become a hard error.') : void 0;\n    var fallbackFetchObservable = fetchQuery(environment, operation);\n    var fetchObservable;\n\n    if (source != null && environment === preloadedQuery.environment) {\n      // If the source observable exists and the environments match, reuse\n      // the source observable.\n      // If the source observable happens to be empty, we need to fall back\n      // and re-execute and de-dupe the query (at render time).\n      fetchObservable = source.ifEmpty(fallbackFetchObservable);\n    } else if (environment !== preloadedQuery.environment) {\n      // If a call to loadQuery is made with a particular environment, and that\n      // preloaded query is passed to usePreloadedQuery in a different environment\n      // context, we cannot re-use the existing preloaded query.\n      // Instead, we need to fall back and re-execute and de-dupe the query with\n      // the new environment (at render time).\n      // TODO T68036756 track occurences of this warning and turn it into a hard error\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'usePreloadedQuery(): usePreloadedQuery was passed a preloaded query ' + 'that was created with a different environment than the one that is currently ' + 'in context. In the future, this will become a hard error.') : void 0;\n      fetchObservable = fallbackFetchObservable;\n    } else {\n      // if (source == null)\n      // If the source observable does not exist, we need to\n      // fall back and re-execute and de-dupe the query (at render time).\n      fetchObservable = fallbackFetchObservable;\n    }\n\n    useLazyLoadQueryNodeParams = {\n      componentDisplayName: 'usePreloadedQuery()',\n      fetchObservable: fetchObservable,\n      fetchKey: fetchKey,\n      fetchPolicy: fetchPolicy,\n      query: operation,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    };\n  }\n\n  var data = useLazyLoadQueryNode(useLazyLoadQueryNodeParams);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useDebugValue({\n      query: preloadedQuery.name,\n      variables: preloadedQuery.variables,\n      data: data,\n      fetchKey: fetchKey,\n      fetchPolicy: fetchPolicy,\n      renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy\n    });\n  }\n\n  return data;\n}\n\nfunction usePreloadedQuery(gqlQuery, preloadedQuery, options) {\n  var impl = HooksImplementation.get();\n\n  if (impl) {\n    return impl.usePreloadedQuery(gqlQuery, preloadedQuery, options);\n  } else {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return usePreloadedQuery_LEGACY(gqlQuery, preloadedQuery, options);\n  }\n}\n\nmodule.exports = usePreloadedQuery;"],"mappings":"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"},"metadata":{},"sourceType":"script"}