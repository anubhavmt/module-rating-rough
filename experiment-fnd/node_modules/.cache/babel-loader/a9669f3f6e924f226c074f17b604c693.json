{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar getOperation = require('../util/getOperation');\n\nvar RelayConcreteNode = require('../util/RelayConcreteNode');\n\nvar RelayFeatureFlags = require('../util/RelayFeatureFlags');\n\nvar cloneRelayHandleSourceField = require('./cloneRelayHandleSourceField');\n\nvar _require = require('./RelayConcreteVariables'),\n    getLocalVariables = _require.getLocalVariables;\n\nvar RelayModernRecord = require('./RelayModernRecord');\n\nvar RelayStoreReactFlightUtils = require('./RelayStoreReactFlightUtils');\n\nvar RelayStoreUtils = require('./RelayStoreUtils');\n\nvar _require2 = require('./TypeID'),\n    generateTypeID = _require2.generateTypeID;\n\nvar invariant = require('invariant');\n\nvar ACTOR_CHANGE = RelayConcreteNode.ACTOR_CHANGE,\n    CONDITION = RelayConcreteNode.CONDITION,\n    CLIENT_COMPONENT = RelayConcreteNode.CLIENT_COMPONENT,\n    CLIENT_EXTENSION = RelayConcreteNode.CLIENT_EXTENSION,\n    DEFER = RelayConcreteNode.DEFER,\n    FLIGHT_FIELD = RelayConcreteNode.FLIGHT_FIELD,\n    FRAGMENT_SPREAD = RelayConcreteNode.FRAGMENT_SPREAD,\n    INLINE_FRAGMENT = RelayConcreteNode.INLINE_FRAGMENT,\n    LINKED_FIELD = RelayConcreteNode.LINKED_FIELD,\n    MODULE_IMPORT = RelayConcreteNode.MODULE_IMPORT,\n    LINKED_HANDLE = RelayConcreteNode.LINKED_HANDLE,\n    SCALAR_FIELD = RelayConcreteNode.SCALAR_FIELD,\n    SCALAR_HANDLE = RelayConcreteNode.SCALAR_HANDLE,\n    STREAM = RelayConcreteNode.STREAM,\n    TYPE_DISCRIMINATOR = RelayConcreteNode.TYPE_DISCRIMINATOR;\nvar ROOT_ID = RelayStoreUtils.ROOT_ID,\n    getStorageKey = RelayStoreUtils.getStorageKey,\n    getModuleOperationKey = RelayStoreUtils.getModuleOperationKey;\n\nfunction mark(recordSource, selector, references, operationLoader, shouldProcessClientComponents) {\n  var dataID = selector.dataID,\n      node = selector.node,\n      variables = selector.variables;\n  var marker = new RelayReferenceMarker(recordSource, variables, references, operationLoader, shouldProcessClientComponents);\n  marker.mark(node, dataID);\n}\n/**\n * @private\n */\n\n\nvar RelayReferenceMarker = /*#__PURE__*/function () {\n  function RelayReferenceMarker(recordSource, variables, references, operationLoader, shouldProcessClientComponents) {\n    this._operationLoader = operationLoader !== null && operationLoader !== void 0 ? operationLoader : null;\n    this._operationName = null;\n    this._recordSource = recordSource;\n    this._references = references;\n    this._variables = variables;\n    this._shouldProcessClientComponents = shouldProcessClientComponents;\n  }\n\n  var _proto = RelayReferenceMarker.prototype;\n\n  _proto.mark = function mark(node, dataID) {\n    if (node.kind === 'Operation' || node.kind === 'SplitOperation') {\n      this._operationName = node.name;\n    }\n\n    this._traverse(node, dataID);\n  };\n\n  _proto._traverse = function _traverse(node, dataID) {\n    this._references.add(dataID);\n\n    var record = this._recordSource.get(dataID);\n\n    if (record == null) {\n      return;\n    }\n\n    this._traverseSelections(node.selections, record);\n  };\n\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n\n  _proto._traverseSelections = function _traverseSelections(selections, record) {\n    var _this = this;\n\n    selections.forEach(function (selection) {\n      /* eslint-disable no-fallthrough */\n      switch (selection.kind) {\n        case ACTOR_CHANGE:\n          // TODO: T89695151 Support multi-actor record sources in RelayReferenceMarker.js\n          _this._traverseLink(selection.linkedField, record);\n\n          break;\n\n        case LINKED_FIELD:\n          if (selection.plural) {\n            _this._traversePluralLink(selection, record);\n          } else {\n            _this._traverseLink(selection, record);\n          }\n\n          break;\n\n        case CONDITION:\n          var conditionValue = Boolean(_this._getVariableValue(selection.condition));\n\n          if (conditionValue === selection.passingValue) {\n            _this._traverseSelections(selection.selections, record);\n          }\n\n          break;\n\n        case INLINE_FRAGMENT:\n          if (selection.abstractKey == null) {\n            var typeName = RelayModernRecord.getType(record);\n\n            if (typeName != null && typeName === selection.type) {\n              _this._traverseSelections(selection.selections, record);\n            }\n          } else {\n            var _typeName = RelayModernRecord.getType(record);\n\n            var typeID = generateTypeID(_typeName);\n\n            _this._references.add(typeID);\n\n            _this._traverseSelections(selection.selections, record);\n          }\n\n          break;\n\n        case FRAGMENT_SPREAD:\n          var prevVariables = _this._variables;\n          _this._variables = getLocalVariables(_this._variables, selection.fragment.argumentDefinitions, selection.args);\n\n          _this._traverseSelections(selection.fragment.selections, record);\n\n          _this._variables = prevVariables;\n          break;\n\n        case LINKED_HANDLE:\n          // The selections for a \"handle\" field are the same as those of the\n          // original linked field where the handle was applied. Reference marking\n          // therefore requires traversing the original field selections against\n          // the synthesized client field.\n          //\n          // TODO: Instead of finding the source field in `selections`, change\n          // the concrete structure to allow shared subtrees, and have the linked\n          // handle directly refer to the same selections as the LinkedField that\n          // it was split from.\n          var handleField = cloneRelayHandleSourceField(selection, selections, _this._variables);\n\n          if (handleField.plural) {\n            _this._traversePluralLink(handleField, record);\n          } else {\n            _this._traverseLink(handleField, record);\n          }\n\n          break;\n\n        case DEFER:\n        case STREAM:\n          _this._traverseSelections(selection.selections, record);\n\n          break;\n\n        case SCALAR_FIELD:\n        case SCALAR_HANDLE:\n          break;\n\n        case TYPE_DISCRIMINATOR:\n          {\n            var _typeName2 = RelayModernRecord.getType(record);\n\n            var _typeID = generateTypeID(_typeName2);\n\n            _this._references.add(_typeID);\n\n            break;\n          }\n\n        case MODULE_IMPORT:\n          _this._traverseModuleImport(selection, record);\n\n          break;\n\n        case CLIENT_EXTENSION:\n          _this._traverseSelections(selection.selections, record);\n\n          break;\n\n        case FLIGHT_FIELD:\n          if (RelayFeatureFlags.ENABLE_REACT_FLIGHT_COMPONENT_FIELD) {\n            _this._traverseFlightField(selection, record);\n          } else {\n            throw new Error('Flight fields are not yet supported.');\n          }\n\n          break;\n\n        case CLIENT_COMPONENT:\n          if (_this._shouldProcessClientComponents === false) {\n            break;\n          }\n\n          _this._traverseSelections(selection.fragment.selections, record);\n\n          break;\n\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker: Unknown AST node `%s`.', selection) : invariant(false) : void 0;\n      }\n    });\n  };\n\n  _proto._traverseModuleImport = function _traverseModuleImport(moduleImport, record) {\n    var _this$_operationName;\n\n    var operationLoader = this._operationLoader;\n    !(operationLoader !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker: Expected an operationLoader to be configured when using `@module`. ' + 'Could not load fragment `%s` in operation `%s`.', moduleImport.fragmentName, (_this$_operationName = this._operationName) !== null && _this$_operationName !== void 0 ? _this$_operationName : '(unknown)') : invariant(false) : void 0;\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n    var operationReference = RelayModernRecord.getValue(record, operationKey);\n\n    if (operationReference == null) {\n      return;\n    }\n\n    var normalizationRootNode = operationLoader.get(operationReference);\n\n    if (normalizationRootNode != null) {\n      var operation = getOperation(normalizationRootNode);\n      var prevVariables = this._variables;\n      this._variables = getLocalVariables(this._variables, operation.argumentDefinitions, moduleImport.args);\n\n      this._traverseSelections(operation.selections, record);\n\n      this._variables = prevVariables;\n    } // Otherwise, if the operation is not available, we assume that the data\n    // cannot have been processed yet and therefore isn't in the store to\n    // begin with.\n\n  };\n\n  _proto._traverseLink = function _traverseLink(field, record) {\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n\n    if (linkedID == null) {\n      return;\n    }\n\n    this._traverse(field, linkedID);\n  };\n\n  _proto._traversePluralLink = function _traversePluralLink(field, record) {\n    var _this2 = this;\n\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n\n    if (linkedIDs == null) {\n      return;\n    }\n\n    linkedIDs.forEach(function (linkedID) {\n      if (linkedID != null) {\n        _this2._traverse(field, linkedID);\n      }\n    });\n  };\n\n  _proto._traverseFlightField = function _traverseFlightField(field, record) {\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n\n    if (linkedID == null) {\n      return;\n    }\n\n    this._references.add(linkedID);\n\n    var reactFlightClientResponseRecord = this._recordSource.get(linkedID);\n\n    if (reactFlightClientResponseRecord == null) {\n      return;\n    }\n\n    var reachableExecutableDefinitions = RelayModernRecord.getValue(reactFlightClientResponseRecord, RelayStoreReactFlightUtils.REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY);\n\n    if (!Array.isArray(reachableExecutableDefinitions)) {\n      return;\n    }\n\n    var operationLoader = this._operationLoader;\n    !(operationLoader !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DataChecker: Expected an operationLoader to be configured when using ' + 'React Flight') : invariant(false) : void 0; // In Flight, the variables that are in scope for reachable executable\n    // definitions aren't the same as what's in scope for the outer query.\n\n    var prevVariables = this._variables; // $FlowFixMe[incompatible-cast]\n\n    var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(reachableExecutableDefinitions),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var definition = _step.value;\n        this._variables = definition.variables;\n        var operationReference = definition.module;\n        var normalizationRootNode = operationLoader.get(operationReference);\n\n        if (normalizationRootNode != null) {\n          var operation = getOperation(normalizationRootNode);\n\n          this._traverse(operation, ROOT_ID);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    this._variables = prevVariables;\n  };\n\n  return RelayReferenceMarker;\n}();\n\nmodule.exports = {\n  mark: mark\n};","map":{"version":3,"names":["_interopRequireDefault","require","_createForOfIteratorHelper2","getOperation","RelayConcreteNode","RelayFeatureFlags","cloneRelayHandleSourceField","_require","getLocalVariables","RelayModernRecord","RelayStoreReactFlightUtils","RelayStoreUtils","_require2","generateTypeID","invariant","ACTOR_CHANGE","CONDITION","CLIENT_COMPONENT","CLIENT_EXTENSION","DEFER","FLIGHT_FIELD","FRAGMENT_SPREAD","INLINE_FRAGMENT","LINKED_FIELD","MODULE_IMPORT","LINKED_HANDLE","SCALAR_FIELD","SCALAR_HANDLE","STREAM","TYPE_DISCRIMINATOR","ROOT_ID","getStorageKey","getModuleOperationKey","mark","recordSource","selector","references","operationLoader","shouldProcessClientComponents","dataID","node","variables","marker","RelayReferenceMarker","_operationLoader","_operationName","_recordSource","_references","_variables","_shouldProcessClientComponents","_proto","prototype","kind","name","_traverse","add","record","get","_traverseSelections","selections","_getVariableValue","hasOwnProperty","process","env","NODE_ENV","_this","forEach","selection","_traverseLink","linkedField","plural","_traversePluralLink","conditionValue","Boolean","condition","passingValue","abstractKey","typeName","getType","type","_typeName","typeID","prevVariables","fragment","argumentDefinitions","args","handleField","_typeName2","_typeID","_traverseModuleImport","ENABLE_REACT_FLIGHT_COMPONENT_FIELD","_traverseFlightField","Error","moduleImport","_this$_operationName","fragmentName","operationKey","documentName","operationReference","getValue","normalizationRootNode","operation","field","storageKey","linkedID","getLinkedRecordID","_this2","linkedIDs","getLinkedRecordIDs","reactFlightClientResponseRecord","reachableExecutableDefinitions","REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY","Array","isArray","_iterator","_step","s","n","done","definition","value","module","err","e","f","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/relay-runtime/lib/store/RelayReferenceMarker.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar getOperation = require('../util/getOperation');\n\nvar RelayConcreteNode = require('../util/RelayConcreteNode');\n\nvar RelayFeatureFlags = require('../util/RelayFeatureFlags');\n\nvar cloneRelayHandleSourceField = require('./cloneRelayHandleSourceField');\n\nvar _require = require('./RelayConcreteVariables'),\n    getLocalVariables = _require.getLocalVariables;\n\nvar RelayModernRecord = require('./RelayModernRecord');\n\nvar RelayStoreReactFlightUtils = require('./RelayStoreReactFlightUtils');\n\nvar RelayStoreUtils = require('./RelayStoreUtils');\n\nvar _require2 = require('./TypeID'),\n    generateTypeID = _require2.generateTypeID;\n\nvar invariant = require('invariant');\n\nvar ACTOR_CHANGE = RelayConcreteNode.ACTOR_CHANGE,\n    CONDITION = RelayConcreteNode.CONDITION,\n    CLIENT_COMPONENT = RelayConcreteNode.CLIENT_COMPONENT,\n    CLIENT_EXTENSION = RelayConcreteNode.CLIENT_EXTENSION,\n    DEFER = RelayConcreteNode.DEFER,\n    FLIGHT_FIELD = RelayConcreteNode.FLIGHT_FIELD,\n    FRAGMENT_SPREAD = RelayConcreteNode.FRAGMENT_SPREAD,\n    INLINE_FRAGMENT = RelayConcreteNode.INLINE_FRAGMENT,\n    LINKED_FIELD = RelayConcreteNode.LINKED_FIELD,\n    MODULE_IMPORT = RelayConcreteNode.MODULE_IMPORT,\n    LINKED_HANDLE = RelayConcreteNode.LINKED_HANDLE,\n    SCALAR_FIELD = RelayConcreteNode.SCALAR_FIELD,\n    SCALAR_HANDLE = RelayConcreteNode.SCALAR_HANDLE,\n    STREAM = RelayConcreteNode.STREAM,\n    TYPE_DISCRIMINATOR = RelayConcreteNode.TYPE_DISCRIMINATOR;\nvar ROOT_ID = RelayStoreUtils.ROOT_ID,\n    getStorageKey = RelayStoreUtils.getStorageKey,\n    getModuleOperationKey = RelayStoreUtils.getModuleOperationKey;\n\nfunction mark(recordSource, selector, references, operationLoader, shouldProcessClientComponents) {\n  var dataID = selector.dataID,\n      node = selector.node,\n      variables = selector.variables;\n  var marker = new RelayReferenceMarker(recordSource, variables, references, operationLoader, shouldProcessClientComponents);\n  marker.mark(node, dataID);\n}\n/**\n * @private\n */\n\n\nvar RelayReferenceMarker = /*#__PURE__*/function () {\n  function RelayReferenceMarker(recordSource, variables, references, operationLoader, shouldProcessClientComponents) {\n    this._operationLoader = operationLoader !== null && operationLoader !== void 0 ? operationLoader : null;\n    this._operationName = null;\n    this._recordSource = recordSource;\n    this._references = references;\n    this._variables = variables;\n    this._shouldProcessClientComponents = shouldProcessClientComponents;\n  }\n\n  var _proto = RelayReferenceMarker.prototype;\n\n  _proto.mark = function mark(node, dataID) {\n    if (node.kind === 'Operation' || node.kind === 'SplitOperation') {\n      this._operationName = node.name;\n    }\n\n    this._traverse(node, dataID);\n  };\n\n  _proto._traverse = function _traverse(node, dataID) {\n    this._references.add(dataID);\n\n    var record = this._recordSource.get(dataID);\n\n    if (record == null) {\n      return;\n    }\n\n    this._traverseSelections(node.selections, record);\n  };\n\n  _proto._getVariableValue = function _getVariableValue(name) {\n    !this._variables.hasOwnProperty(name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker(): Undefined variable `%s`.', name) : invariant(false) : void 0;\n    return this._variables[name];\n  };\n\n  _proto._traverseSelections = function _traverseSelections(selections, record) {\n    var _this = this;\n\n    selections.forEach(function (selection) {\n      /* eslint-disable no-fallthrough */\n      switch (selection.kind) {\n        case ACTOR_CHANGE:\n          // TODO: T89695151 Support multi-actor record sources in RelayReferenceMarker.js\n          _this._traverseLink(selection.linkedField, record);\n\n          break;\n\n        case LINKED_FIELD:\n          if (selection.plural) {\n            _this._traversePluralLink(selection, record);\n          } else {\n            _this._traverseLink(selection, record);\n          }\n\n          break;\n\n        case CONDITION:\n          var conditionValue = Boolean(_this._getVariableValue(selection.condition));\n\n          if (conditionValue === selection.passingValue) {\n            _this._traverseSelections(selection.selections, record);\n          }\n\n          break;\n\n        case INLINE_FRAGMENT:\n          if (selection.abstractKey == null) {\n            var typeName = RelayModernRecord.getType(record);\n\n            if (typeName != null && typeName === selection.type) {\n              _this._traverseSelections(selection.selections, record);\n            }\n          } else {\n            var _typeName = RelayModernRecord.getType(record);\n\n            var typeID = generateTypeID(_typeName);\n\n            _this._references.add(typeID);\n\n            _this._traverseSelections(selection.selections, record);\n          }\n\n          break;\n\n        case FRAGMENT_SPREAD:\n          var prevVariables = _this._variables;\n          _this._variables = getLocalVariables(_this._variables, selection.fragment.argumentDefinitions, selection.args);\n\n          _this._traverseSelections(selection.fragment.selections, record);\n\n          _this._variables = prevVariables;\n          break;\n\n        case LINKED_HANDLE:\n          // The selections for a \"handle\" field are the same as those of the\n          // original linked field where the handle was applied. Reference marking\n          // therefore requires traversing the original field selections against\n          // the synthesized client field.\n          //\n          // TODO: Instead of finding the source field in `selections`, change\n          // the concrete structure to allow shared subtrees, and have the linked\n          // handle directly refer to the same selections as the LinkedField that\n          // it was split from.\n          var handleField = cloneRelayHandleSourceField(selection, selections, _this._variables);\n\n          if (handleField.plural) {\n            _this._traversePluralLink(handleField, record);\n          } else {\n            _this._traverseLink(handleField, record);\n          }\n\n          break;\n\n        case DEFER:\n        case STREAM:\n          _this._traverseSelections(selection.selections, record);\n\n          break;\n\n        case SCALAR_FIELD:\n        case SCALAR_HANDLE:\n          break;\n\n        case TYPE_DISCRIMINATOR:\n          {\n            var _typeName2 = RelayModernRecord.getType(record);\n\n            var _typeID = generateTypeID(_typeName2);\n\n            _this._references.add(_typeID);\n\n            break;\n          }\n\n        case MODULE_IMPORT:\n          _this._traverseModuleImport(selection, record);\n\n          break;\n\n        case CLIENT_EXTENSION:\n          _this._traverseSelections(selection.selections, record);\n\n          break;\n\n        case FLIGHT_FIELD:\n          if (RelayFeatureFlags.ENABLE_REACT_FLIGHT_COMPONENT_FIELD) {\n            _this._traverseFlightField(selection, record);\n          } else {\n            throw new Error('Flight fields are not yet supported.');\n          }\n\n          break;\n\n        case CLIENT_COMPONENT:\n          if (_this._shouldProcessClientComponents === false) {\n            break;\n          }\n\n          _this._traverseSelections(selection.fragment.selections, record);\n\n          break;\n\n        default:\n          selection;\n          !false ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker: Unknown AST node `%s`.', selection) : invariant(false) : void 0;\n      }\n    });\n  };\n\n  _proto._traverseModuleImport = function _traverseModuleImport(moduleImport, record) {\n    var _this$_operationName;\n\n    var operationLoader = this._operationLoader;\n    !(operationLoader !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayReferenceMarker: Expected an operationLoader to be configured when using `@module`. ' + 'Could not load fragment `%s` in operation `%s`.', moduleImport.fragmentName, (_this$_operationName = this._operationName) !== null && _this$_operationName !== void 0 ? _this$_operationName : '(unknown)') : invariant(false) : void 0;\n    var operationKey = getModuleOperationKey(moduleImport.documentName);\n    var operationReference = RelayModernRecord.getValue(record, operationKey);\n\n    if (operationReference == null) {\n      return;\n    }\n\n    var normalizationRootNode = operationLoader.get(operationReference);\n\n    if (normalizationRootNode != null) {\n      var operation = getOperation(normalizationRootNode);\n      var prevVariables = this._variables;\n      this._variables = getLocalVariables(this._variables, operation.argumentDefinitions, moduleImport.args);\n\n      this._traverseSelections(operation.selections, record);\n\n      this._variables = prevVariables;\n    } // Otherwise, if the operation is not available, we assume that the data\n    // cannot have been processed yet and therefore isn't in the store to\n    // begin with.\n\n  };\n\n  _proto._traverseLink = function _traverseLink(field, record) {\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n\n    if (linkedID == null) {\n      return;\n    }\n\n    this._traverse(field, linkedID);\n  };\n\n  _proto._traversePluralLink = function _traversePluralLink(field, record) {\n    var _this2 = this;\n\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedIDs = RelayModernRecord.getLinkedRecordIDs(record, storageKey);\n\n    if (linkedIDs == null) {\n      return;\n    }\n\n    linkedIDs.forEach(function (linkedID) {\n      if (linkedID != null) {\n        _this2._traverse(field, linkedID);\n      }\n    });\n  };\n\n  _proto._traverseFlightField = function _traverseFlightField(field, record) {\n    var storageKey = getStorageKey(field, this._variables);\n    var linkedID = RelayModernRecord.getLinkedRecordID(record, storageKey);\n\n    if (linkedID == null) {\n      return;\n    }\n\n    this._references.add(linkedID);\n\n    var reactFlightClientResponseRecord = this._recordSource.get(linkedID);\n\n    if (reactFlightClientResponseRecord == null) {\n      return;\n    }\n\n    var reachableExecutableDefinitions = RelayModernRecord.getValue(reactFlightClientResponseRecord, RelayStoreReactFlightUtils.REACT_FLIGHT_EXECUTABLE_DEFINITIONS_STORAGE_KEY);\n\n    if (!Array.isArray(reachableExecutableDefinitions)) {\n      return;\n    }\n\n    var operationLoader = this._operationLoader;\n    !(operationLoader !== null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DataChecker: Expected an operationLoader to be configured when using ' + 'React Flight') : invariant(false) : void 0; // In Flight, the variables that are in scope for reachable executable\n    // definitions aren't the same as what's in scope for the outer query.\n\n    var prevVariables = this._variables; // $FlowFixMe[incompatible-cast]\n\n    var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(reachableExecutableDefinitions),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var definition = _step.value;\n        this._variables = definition.variables;\n        var operationReference = definition.module;\n        var normalizationRootNode = operationLoader.get(operationReference);\n\n        if (normalizationRootNode != null) {\n          var operation = getOperation(normalizationRootNode);\n\n          this._traverse(operation, ROOT_ID);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    this._variables = prevVariables;\n  };\n\n  return RelayReferenceMarker;\n}();\n\nmodule.exports = {\n  mark: mark\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}