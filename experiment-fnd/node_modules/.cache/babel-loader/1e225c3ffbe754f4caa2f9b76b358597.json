{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n/**\n * Represents a common GraphQL request that can be executed, an `operation`\n * containing information to normalize the results, and a `fragment` derived\n * from that operation to read the response data (masking data from child\n * fragments).\n */\n\n/**\n * Contains the parameters required for executing a GraphQL request.\n * The operation can either be provided as a persisted `id` or `text`. If given\n * in `text` format, a `cacheID` as a hash of the text should be set to be used\n * for local caching.\n */\n\nvar RelayConcreteNode = {\n  ACTOR_CHANGE: 'ActorChange',\n  CONDITION: 'Condition',\n  CLIENT_COMPONENT: 'ClientComponent',\n  CLIENT_EDGE_TO_SERVER_OBJECT: 'ClientEdgeToServerObject',\n  CLIENT_EDGE_TO_CLIENT_OBJECT: 'ClientEdgeToClientObject',\n  CLIENT_EXTENSION: 'ClientExtension',\n  DEFER: 'Defer',\n  CONNECTION: 'Connection',\n  FLIGHT_FIELD: 'FlightField',\n  FRAGMENT: 'Fragment',\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_DATA_FRAGMENT_SPREAD: 'InlineDataFragmentSpread',\n  INLINE_DATA_FRAGMENT: 'InlineDataFragment',\n  INLINE_FRAGMENT: 'InlineFragment',\n  LINKED_FIELD: 'LinkedField',\n  LINKED_HANDLE: 'LinkedHandle',\n  LITERAL: 'Literal',\n  LIST_VALUE: 'ListValue',\n  LOCAL_ARGUMENT: 'LocalArgument',\n  MODULE_IMPORT: 'ModuleImport',\n  ALIASED_FRAGMENT_SPREAD: 'AliasedFragmentSpread',\n  ALIASED_INLINE_FRAGMENT_SPREAD: 'AliasedInlineFragmentSpread',\n  RELAY_RESOLVER: 'RelayResolver',\n  RELAY_LIVE_RESOLVER: 'RelayLiveResolver',\n  REQUIRED_FIELD: 'RequiredField',\n  OBJECT_VALUE: 'ObjectValue',\n  OPERATION: 'Operation',\n  REQUEST: 'Request',\n  ROOT_ARGUMENT: 'RootArgument',\n  SCALAR_FIELD: 'ScalarField',\n  SCALAR_HANDLE: 'ScalarHandle',\n  SPLIT_OPERATION: 'SplitOperation',\n  STREAM: 'Stream',\n  TYPE_DISCRIMINATOR: 'TypeDiscriminator',\n  UPDATABLE_QUERY: 'UpdatableQuery',\n  VARIABLE: 'Variable'\n};\nmodule.exports = RelayConcreteNode;","map":{"version":3,"names":["RelayConcreteNode","ACTOR_CHANGE","CONDITION","CLIENT_COMPONENT","CLIENT_EDGE_TO_SERVER_OBJECT","CLIENT_EDGE_TO_CLIENT_OBJECT","CLIENT_EXTENSION","DEFER","CONNECTION","FLIGHT_FIELD","FRAGMENT","FRAGMENT_SPREAD","INLINE_DATA_FRAGMENT_SPREAD","INLINE_DATA_FRAGMENT","INLINE_FRAGMENT","LINKED_FIELD","LINKED_HANDLE","LITERAL","LIST_VALUE","LOCAL_ARGUMENT","MODULE_IMPORT","ALIASED_FRAGMENT_SPREAD","ALIASED_INLINE_FRAGMENT_SPREAD","RELAY_RESOLVER","RELAY_LIVE_RESOLVER","REQUIRED_FIELD","OBJECT_VALUE","OPERATION","REQUEST","ROOT_ARGUMENT","SCALAR_FIELD","SCALAR_HANDLE","SPLIT_OPERATION","STREAM","TYPE_DISCRIMINATOR","UPDATABLE_QUERY","VARIABLE","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/relay-runtime/lib/util/RelayConcreteNode.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\n/**\n * Represents a common GraphQL request that can be executed, an `operation`\n * containing information to normalize the results, and a `fragment` derived\n * from that operation to read the response data (masking data from child\n * fragments).\n */\n\n/**\n * Contains the parameters required for executing a GraphQL request.\n * The operation can either be provided as a persisted `id` or `text`. If given\n * in `text` format, a `cacheID` as a hash of the text should be set to be used\n * for local caching.\n */\nvar RelayConcreteNode = {\n  ACTOR_CHANGE: 'ActorChange',\n  CONDITION: 'Condition',\n  CLIENT_COMPONENT: 'ClientComponent',\n  CLIENT_EDGE_TO_SERVER_OBJECT: 'ClientEdgeToServerObject',\n  CLIENT_EDGE_TO_CLIENT_OBJECT: 'ClientEdgeToClientObject',\n  CLIENT_EXTENSION: 'ClientExtension',\n  DEFER: 'Defer',\n  CONNECTION: 'Connection',\n  FLIGHT_FIELD: 'FlightField',\n  FRAGMENT: 'Fragment',\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_DATA_FRAGMENT_SPREAD: 'InlineDataFragmentSpread',\n  INLINE_DATA_FRAGMENT: 'InlineDataFragment',\n  INLINE_FRAGMENT: 'InlineFragment',\n  LINKED_FIELD: 'LinkedField',\n  LINKED_HANDLE: 'LinkedHandle',\n  LITERAL: 'Literal',\n  LIST_VALUE: 'ListValue',\n  LOCAL_ARGUMENT: 'LocalArgument',\n  MODULE_IMPORT: 'ModuleImport',\n  ALIASED_FRAGMENT_SPREAD: 'AliasedFragmentSpread',\n  ALIASED_INLINE_FRAGMENT_SPREAD: 'AliasedInlineFragmentSpread',\n  RELAY_RESOLVER: 'RelayResolver',\n  RELAY_LIVE_RESOLVER: 'RelayLiveResolver',\n  REQUIRED_FIELD: 'RequiredField',\n  OBJECT_VALUE: 'ObjectValue',\n  OPERATION: 'Operation',\n  REQUEST: 'Request',\n  ROOT_ARGUMENT: 'RootArgument',\n  SCALAR_FIELD: 'ScalarField',\n  SCALAR_HANDLE: 'ScalarHandle',\n  SPLIT_OPERATION: 'SplitOperation',\n  STREAM: 'Stream',\n  TYPE_DISCRIMINATOR: 'TypeDiscriminator',\n  UPDATABLE_QUERY: 'UpdatableQuery',\n  VARIABLE: 'Variable'\n};\nmodule.exports = RelayConcreteNode;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIA,iBAAiB,GAAG;EACtBC,YAAY,EAAE,aADQ;EAEtBC,SAAS,EAAE,WAFW;EAGtBC,gBAAgB,EAAE,iBAHI;EAItBC,4BAA4B,EAAE,0BAJR;EAKtBC,4BAA4B,EAAE,0BALR;EAMtBC,gBAAgB,EAAE,iBANI;EAOtBC,KAAK,EAAE,OAPe;EAQtBC,UAAU,EAAE,YARU;EAStBC,YAAY,EAAE,aATQ;EAUtBC,QAAQ,EAAE,UAVY;EAWtBC,eAAe,EAAE,gBAXK;EAYtBC,2BAA2B,EAAE,0BAZP;EAatBC,oBAAoB,EAAE,oBAbA;EActBC,eAAe,EAAE,gBAdK;EAetBC,YAAY,EAAE,aAfQ;EAgBtBC,aAAa,EAAE,cAhBO;EAiBtBC,OAAO,EAAE,SAjBa;EAkBtBC,UAAU,EAAE,WAlBU;EAmBtBC,cAAc,EAAE,eAnBM;EAoBtBC,aAAa,EAAE,cApBO;EAqBtBC,uBAAuB,EAAE,uBArBH;EAsBtBC,8BAA8B,EAAE,6BAtBV;EAuBtBC,cAAc,EAAE,eAvBM;EAwBtBC,mBAAmB,EAAE,mBAxBC;EAyBtBC,cAAc,EAAE,eAzBM;EA0BtBC,YAAY,EAAE,aA1BQ;EA2BtBC,SAAS,EAAE,WA3BW;EA4BtBC,OAAO,EAAE,SA5Ba;EA6BtBC,aAAa,EAAE,cA7BO;EA8BtBC,YAAY,EAAE,aA9BQ;EA+BtBC,aAAa,EAAE,cA/BO;EAgCtBC,eAAe,EAAE,gBAhCK;EAiCtBC,MAAM,EAAE,QAjCc;EAkCtBC,kBAAkB,EAAE,mBAlCE;EAmCtBC,eAAe,EAAE,gBAnCK;EAoCtBC,QAAQ,EAAE;AApCY,CAAxB;AAsCAC,MAAM,CAACC,OAAP,GAAiBtC,iBAAjB"},"metadata":{},"sourceType":"script"}