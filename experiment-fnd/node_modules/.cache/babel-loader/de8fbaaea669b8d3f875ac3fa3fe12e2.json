{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('./RelayConcreteVariables'),\n    getFragmentVariables = _require.getFragmentVariables;\n\nvar _require2 = require('./RelayStoreUtils'),\n    CLIENT_EDGE_TRAVERSAL_PATH = _require2.CLIENT_EDGE_TRAVERSAL_PATH,\n    FRAGMENT_OWNER_KEY = _require2.FRAGMENT_OWNER_KEY,\n    FRAGMENTS_KEY = _require2.FRAGMENTS_KEY,\n    ID_KEY = _require2.ID_KEY,\n    IS_WITHIN_UNMATCHED_TYPE_REFINEMENT = _require2.IS_WITHIN_UNMATCHED_TYPE_REFINEMENT;\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar invariant = require('invariant');\n\nvar warning = require(\"fbjs/lib/warning\");\n/**\n * @public\n *\n * Given the result `item` from a parent that fetched `fragment`, creates a\n * selector that can be used to read the results of that fragment for that item.\n *\n * Example:\n *\n * Given two fragments as follows:\n *\n * ```\n * fragment Parent on User {\n *   id\n *   ...Child\n * }\n * fragment Child on User {\n *   name\n * }\n * ```\n *\n * And given some object `parent` that is the results of `Parent` for id \"4\",\n * the results of `Child` can be accessed by first getting a selector and then\n * using that selector to `lookup()` the results against the environment:\n *\n * ```\n * const childSelector = getSingularSelector(queryVariables, Child, parent);\n * const childData = environment.lookup(childSelector).data;\n * ```\n */\n\n\nfunction getSingularSelector(fragment, item) {\n  !(typeof item === 'object' && item !== null && !Array.isArray(item)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an object, got ' + '`%s`.', fragment.name, JSON.stringify(item)) : invariant(false) : void 0;\n  var dataID = item[ID_KEY];\n  var fragments = item[FRAGMENTS_KEY];\n  var mixedOwner = item[FRAGMENT_OWNER_KEY];\n  var isWithinUnmatchedTypeRefinement = item[IS_WITHIN_UNMATCHED_TYPE_REFINEMENT] === true;\n  var mixedClientEdgeTraversalPath = item[CLIENT_EDGE_TRAVERSAL_PATH];\n\n  if (typeof dataID === 'string' && typeof fragments === 'object' && fragments !== null && typeof fragments[fragment.name] === 'object' && fragments[fragment.name] !== null && typeof mixedOwner === 'object' && mixedOwner !== null && (mixedClientEdgeTraversalPath == null || Array.isArray(mixedClientEdgeTraversalPath))) {\n    var owner = mixedOwner;\n    var clientEdgeTraversalPath = mixedClientEdgeTraversalPath;\n    var argumentVariables = fragments[fragment.name];\n    var fragmentVariables = getFragmentVariables(fragment, owner.variables, argumentVariables);\n    return createReaderSelector(fragment, dataID, fragmentVariables, owner, isWithinUnmatchedTypeRefinement, clientEdgeTraversalPath);\n  }\n\n  if (process.env.NODE_ENV !== \"production\") {\n    var stringifiedItem = JSON.stringify(item);\n\n    if (stringifiedItem.length > 499) {\n      stringifiedItem = stringifiedItem.substr(0, 498) + \"\\u2026\";\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayModernSelector: Expected object to contain data for fragment `%s`, got ' + '`%s`. Make sure that the parent operation/fragment included fragment ' + '`...%s` without `@relay(mask: false)`.', fragment.name, stringifiedItem, fragment.name) : void 0;\n  }\n\n  return null;\n}\n/**\n * @public\n *\n * Given the result `items` from a parent that fetched `fragment`, creates a\n * selector that can be used to read the results of that fragment on those\n * items. This is similar to `getSingularSelector` but for \"plural\" fragments that\n * expect an array of results and therefore return an array of selectors.\n */\n\n\nfunction getPluralSelector(fragment, items) {\n  var selectors = null;\n  items.forEach(function (item, ii) {\n    var selector = item != null ? getSingularSelector(fragment, item) : null;\n\n    if (selector != null) {\n      selectors = selectors || [];\n      selectors.push(selector);\n    }\n  });\n\n  if (selectors == null) {\n    return null;\n  } else {\n    return {\n      kind: 'PluralReaderSelector',\n      selectors: selectors\n    };\n  }\n}\n\nfunction getSelector(fragment, item) {\n  if (item == null) {\n    return item;\n  } else if (fragment.metadata && fragment.metadata.plural === true) {\n    !Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getPluralSelector(fragment, item);\n  } else {\n    !!Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getSingularSelector(fragment, item);\n  }\n}\n/**\n * @public\n *\n * Given a mapping of keys -> results and a mapping of keys -> fragments,\n * extracts the selectors for those fragments from the results.\n *\n * The canonical use-case for this function is ReactRelayFragmentContainer, which\n * uses this function to convert (props, fragments) into selectors so that it\n * can read the results to pass to the inner component.\n */\n\n\nfunction getSelectorsFromObject(fragments, object) {\n  var selectors = {};\n\n  for (var _key in fragments) {\n    if (fragments.hasOwnProperty(_key)) {\n      var fragment = fragments[_key];\n      var item = object[_key];\n      selectors[_key] = getSelector(fragment, item);\n    }\n  }\n\n  return selectors;\n}\n/**\n * @public\n *\n * Given a mapping of keys -> results and a mapping of keys -> fragments,\n * extracts a mapping of keys -> id(s) of the results.\n *\n * Similar to `getSelectorsFromObject()`, this function can be useful in\n * determining the \"identity\" of the props passed to a component.\n */\n\n\nfunction getDataIDsFromObject(fragments, object) {\n  var ids = {};\n\n  for (var _key2 in fragments) {\n    if (fragments.hasOwnProperty(_key2)) {\n      var fragment = fragments[_key2];\n      var item = object[_key2];\n      ids[_key2] = getDataIDsFromFragment(fragment, item);\n    }\n  }\n\n  return ids;\n}\n\nfunction getDataIDsFromFragment(fragment, item) {\n  if (item == null) {\n    return item;\n  } else if (fragment.metadata && fragment.metadata.plural === true) {\n    !Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getDataIDs(fragment, item);\n  } else {\n    !!Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernFragmentSpecResolver: Expected value for fragment `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getDataID(fragment, item);\n  }\n}\n/**\n * @internal\n */\n\n\nfunction getDataIDs(fragment, items) {\n  var ids = null;\n  items.forEach(function (item) {\n    var id = item != null ? getDataID(fragment, item) : null;\n\n    if (id != null) {\n      ids = ids || [];\n      ids.push(id);\n    }\n  });\n  return ids;\n}\n/**\n * @internal\n */\n\n\nfunction getDataID(fragment, item) {\n  !(typeof item === 'object' && item !== null && !Array.isArray(item)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an object, got ' + '`%s`.', fragment.name, JSON.stringify(item)) : invariant(false) : void 0;\n  var dataID = item[ID_KEY];\n\n  if (typeof dataID === 'string') {\n    return dataID;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayModernSelector: Expected object to contain data for fragment `%s`, got ' + '`%s`. Make sure that the parent operation/fragment included fragment ' + '`...%s` without `@relay(mask: false)`, or `null` is passed as the fragment ' + \"reference for `%s` if it's conditonally included and the condition isn't met.\", fragment.name, JSON.stringify(item), fragment.name, fragment.name) : void 0;\n  return null;\n}\n/**\n * @public\n *\n * Given a mapping of keys -> results and a mapping of keys -> fragments,\n * extracts the merged variables that would be in scope for those\n * fragments/results.\n *\n * This can be useful in determing what varaibles were used to fetch the data\n * for a Relay container, for example.\n */\n\n\nfunction getVariablesFromObject(fragments, object) {\n  var variables = {};\n\n  for (var _key3 in fragments) {\n    if (fragments.hasOwnProperty(_key3)) {\n      var fragment = fragments[_key3];\n      var item = object[_key3];\n      var itemVariables = getVariablesFromFragment(fragment, item);\n      Object.assign(variables, itemVariables);\n    }\n  }\n\n  return variables;\n}\n\nfunction getVariablesFromFragment(fragment, item) {\n  var _fragment$metadata;\n\n  if (item == null) {\n    return {};\n  } else if (((_fragment$metadata = fragment.metadata) === null || _fragment$metadata === void 0 ? void 0 : _fragment$metadata.plural) === true) {\n    !Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getVariablesFromPluralFragment(fragment, item);\n  } else {\n    !!Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernFragmentSpecResolver: Expected value for fragment `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getVariablesFromSingularFragment(fragment, item) || {};\n  }\n}\n\nfunction getVariablesFromSingularFragment(fragment, item) {\n  var selector = getSingularSelector(fragment, item);\n\n  if (!selector) {\n    return null;\n  }\n\n  return selector.variables;\n}\n\nfunction getVariablesFromPluralFragment(fragment, items) {\n  var variables = {};\n  items.forEach(function (value, ii) {\n    if (value != null) {\n      var itemVariables = getVariablesFromSingularFragment(fragment, value);\n\n      if (itemVariables != null) {\n        Object.assign(variables, itemVariables);\n      }\n    }\n  });\n  return variables;\n}\n\nfunction areEqualSingularSelectors(thisSelector, thatSelector) {\n  return thisSelector.owner === thatSelector.owner && thisSelector.dataID === thatSelector.dataID && thisSelector.node === thatSelector.node && areEqual(thisSelector.variables, thatSelector.variables);\n}\n/**\n * @public\n *\n * Determine if two selectors are equal (represent the same selection). Note\n * that this function returns `false` when the two queries/fragments are\n * different objects, even if they select the same fields.\n */\n\n\nfunction areEqualSelectors(a, b) {\n  if (a === b) {\n    return true;\n  } else if (a == null) {\n    return b == null;\n  } else if (b == null) {\n    return a == null;\n  } else if (a.kind === 'SingularReaderSelector' && b.kind === 'SingularReaderSelector') {\n    return areEqualSingularSelectors(a, b);\n  } else if (a.kind === 'PluralReaderSelector' && b.kind === 'PluralReaderSelector') {\n    return a.selectors.length === b.selectors.length && a.selectors.every(function (s, i) {\n      return areEqualSingularSelectors(s, b.selectors[i]);\n    });\n  } else {\n    return false;\n  }\n}\n\nfunction createReaderSelector(fragment, dataID, variables, request) {\n  var isWithinUnmatchedTypeRefinement = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var clientEdgeTraversalPath = arguments.length > 5 ? arguments[5] : undefined;\n  return {\n    kind: 'SingularReaderSelector',\n    dataID: dataID,\n    isWithinUnmatchedTypeRefinement: isWithinUnmatchedTypeRefinement,\n    clientEdgeTraversalPath: clientEdgeTraversalPath !== null && clientEdgeTraversalPath !== void 0 ? clientEdgeTraversalPath : null,\n    node: fragment,\n    variables: variables,\n    owner: request\n  };\n}\n\nfunction createNormalizationSelector(node, dataID, variables) {\n  return {\n    dataID: dataID,\n    node: node,\n    variables: variables\n  };\n}\n\nmodule.exports = {\n  areEqualSelectors: areEqualSelectors,\n  createReaderSelector: createReaderSelector,\n  createNormalizationSelector: createNormalizationSelector,\n  getDataIDsFromFragment: getDataIDsFromFragment,\n  getDataIDsFromObject: getDataIDsFromObject,\n  getSingularSelector: getSingularSelector,\n  getPluralSelector: getPluralSelector,\n  getSelector: getSelector,\n  getSelectorsFromObject: getSelectorsFromObject,\n  getVariablesFromSingularFragment: getVariablesFromSingularFragment,\n  getVariablesFromPluralFragment: getVariablesFromPluralFragment,\n  getVariablesFromFragment: getVariablesFromFragment,\n  getVariablesFromObject: getVariablesFromObject\n};","map":{"version":3,"names":["_require","require","getFragmentVariables","_require2","CLIENT_EDGE_TRAVERSAL_PATH","FRAGMENT_OWNER_KEY","FRAGMENTS_KEY","ID_KEY","IS_WITHIN_UNMATCHED_TYPE_REFINEMENT","areEqual","invariant","warning","getSingularSelector","fragment","item","Array","isArray","process","env","NODE_ENV","name","JSON","stringify","dataID","fragments","mixedOwner","isWithinUnmatchedTypeRefinement","mixedClientEdgeTraversalPath","owner","clientEdgeTraversalPath","argumentVariables","fragmentVariables","variables","createReaderSelector","stringifiedItem","length","substr","getPluralSelector","items","selectors","forEach","ii","selector","push","kind","getSelector","metadata","plural","getSelectorsFromObject","object","_key","hasOwnProperty","getDataIDsFromObject","ids","_key2","getDataIDsFromFragment","getDataIDs","getDataID","id","getVariablesFromObject","_key3","itemVariables","getVariablesFromFragment","Object","assign","_fragment$metadata","getVariablesFromPluralFragment","getVariablesFromSingularFragment","value","areEqualSingularSelectors","thisSelector","thatSelector","node","areEqualSelectors","a","b","every","s","i","request","arguments","undefined","createNormalizationSelector","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/relay-runtime/lib/store/RelayModernSelector.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('./RelayConcreteVariables'),\n    getFragmentVariables = _require.getFragmentVariables;\n\nvar _require2 = require('./RelayStoreUtils'),\n    CLIENT_EDGE_TRAVERSAL_PATH = _require2.CLIENT_EDGE_TRAVERSAL_PATH,\n    FRAGMENT_OWNER_KEY = _require2.FRAGMENT_OWNER_KEY,\n    FRAGMENTS_KEY = _require2.FRAGMENTS_KEY,\n    ID_KEY = _require2.ID_KEY,\n    IS_WITHIN_UNMATCHED_TYPE_REFINEMENT = _require2.IS_WITHIN_UNMATCHED_TYPE_REFINEMENT;\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar invariant = require('invariant');\n\nvar warning = require(\"fbjs/lib/warning\");\n/**\n * @public\n *\n * Given the result `item` from a parent that fetched `fragment`, creates a\n * selector that can be used to read the results of that fragment for that item.\n *\n * Example:\n *\n * Given two fragments as follows:\n *\n * ```\n * fragment Parent on User {\n *   id\n *   ...Child\n * }\n * fragment Child on User {\n *   name\n * }\n * ```\n *\n * And given some object `parent` that is the results of `Parent` for id \"4\",\n * the results of `Child` can be accessed by first getting a selector and then\n * using that selector to `lookup()` the results against the environment:\n *\n * ```\n * const childSelector = getSingularSelector(queryVariables, Child, parent);\n * const childData = environment.lookup(childSelector).data;\n * ```\n */\n\n\nfunction getSingularSelector(fragment, item) {\n  !(typeof item === 'object' && item !== null && !Array.isArray(item)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an object, got ' + '`%s`.', fragment.name, JSON.stringify(item)) : invariant(false) : void 0;\n  var dataID = item[ID_KEY];\n  var fragments = item[FRAGMENTS_KEY];\n  var mixedOwner = item[FRAGMENT_OWNER_KEY];\n  var isWithinUnmatchedTypeRefinement = item[IS_WITHIN_UNMATCHED_TYPE_REFINEMENT] === true;\n  var mixedClientEdgeTraversalPath = item[CLIENT_EDGE_TRAVERSAL_PATH];\n\n  if (typeof dataID === 'string' && typeof fragments === 'object' && fragments !== null && typeof fragments[fragment.name] === 'object' && fragments[fragment.name] !== null && typeof mixedOwner === 'object' && mixedOwner !== null && (mixedClientEdgeTraversalPath == null || Array.isArray(mixedClientEdgeTraversalPath))) {\n    var owner = mixedOwner;\n    var clientEdgeTraversalPath = mixedClientEdgeTraversalPath;\n    var argumentVariables = fragments[fragment.name];\n    var fragmentVariables = getFragmentVariables(fragment, owner.variables, argumentVariables);\n    return createReaderSelector(fragment, dataID, fragmentVariables, owner, isWithinUnmatchedTypeRefinement, clientEdgeTraversalPath);\n  }\n\n  if (process.env.NODE_ENV !== \"production\") {\n    var stringifiedItem = JSON.stringify(item);\n\n    if (stringifiedItem.length > 499) {\n      stringifiedItem = stringifiedItem.substr(0, 498) + \"\\u2026\";\n    }\n\n    process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayModernSelector: Expected object to contain data for fragment `%s`, got ' + '`%s`. Make sure that the parent operation/fragment included fragment ' + '`...%s` without `@relay(mask: false)`.', fragment.name, stringifiedItem, fragment.name) : void 0;\n  }\n\n  return null;\n}\n/**\n * @public\n *\n * Given the result `items` from a parent that fetched `fragment`, creates a\n * selector that can be used to read the results of that fragment on those\n * items. This is similar to `getSingularSelector` but for \"plural\" fragments that\n * expect an array of results and therefore return an array of selectors.\n */\n\n\nfunction getPluralSelector(fragment, items) {\n  var selectors = null;\n  items.forEach(function (item, ii) {\n    var selector = item != null ? getSingularSelector(fragment, item) : null;\n\n    if (selector != null) {\n      selectors = selectors || [];\n      selectors.push(selector);\n    }\n  });\n\n  if (selectors == null) {\n    return null;\n  } else {\n    return {\n      kind: 'PluralReaderSelector',\n      selectors: selectors\n    };\n  }\n}\n\nfunction getSelector(fragment, item) {\n  if (item == null) {\n    return item;\n  } else if (fragment.metadata && fragment.metadata.plural === true) {\n    !Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getPluralSelector(fragment, item);\n  } else {\n    !!Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getSingularSelector(fragment, item);\n  }\n}\n/**\n * @public\n *\n * Given a mapping of keys -> results and a mapping of keys -> fragments,\n * extracts the selectors for those fragments from the results.\n *\n * The canonical use-case for this function is ReactRelayFragmentContainer, which\n * uses this function to convert (props, fragments) into selectors so that it\n * can read the results to pass to the inner component.\n */\n\n\nfunction getSelectorsFromObject(fragments, object) {\n  var selectors = {};\n\n  for (var _key in fragments) {\n    if (fragments.hasOwnProperty(_key)) {\n      var fragment = fragments[_key];\n      var item = object[_key];\n      selectors[_key] = getSelector(fragment, item);\n    }\n  }\n\n  return selectors;\n}\n/**\n * @public\n *\n * Given a mapping of keys -> results and a mapping of keys -> fragments,\n * extracts a mapping of keys -> id(s) of the results.\n *\n * Similar to `getSelectorsFromObject()`, this function can be useful in\n * determining the \"identity\" of the props passed to a component.\n */\n\n\nfunction getDataIDsFromObject(fragments, object) {\n  var ids = {};\n\n  for (var _key2 in fragments) {\n    if (fragments.hasOwnProperty(_key2)) {\n      var fragment = fragments[_key2];\n      var item = object[_key2];\n      ids[_key2] = getDataIDsFromFragment(fragment, item);\n    }\n  }\n\n  return ids;\n}\n\nfunction getDataIDsFromFragment(fragment, item) {\n  if (item == null) {\n    return item;\n  } else if (fragment.metadata && fragment.metadata.plural === true) {\n    !Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getDataIDs(fragment, item);\n  } else {\n    !!Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernFragmentSpecResolver: Expected value for fragment `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getDataID(fragment, item);\n  }\n}\n/**\n * @internal\n */\n\n\nfunction getDataIDs(fragment, items) {\n  var ids = null;\n  items.forEach(function (item) {\n    var id = item != null ? getDataID(fragment, item) : null;\n\n    if (id != null) {\n      ids = ids || [];\n      ids.push(id);\n    }\n  });\n  return ids;\n}\n/**\n * @internal\n */\n\n\nfunction getDataID(fragment, item) {\n  !(typeof item === 'object' && item !== null && !Array.isArray(item)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an object, got ' + '`%s`.', fragment.name, JSON.stringify(item)) : invariant(false) : void 0;\n  var dataID = item[ID_KEY];\n\n  if (typeof dataID === 'string') {\n    return dataID;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(false, 'RelayModernSelector: Expected object to contain data for fragment `%s`, got ' + '`%s`. Make sure that the parent operation/fragment included fragment ' + '`...%s` without `@relay(mask: false)`, or `null` is passed as the fragment ' + \"reference for `%s` if it's conditonally included and the condition isn't met.\", fragment.name, JSON.stringify(item), fragment.name, fragment.name) : void 0;\n  return null;\n}\n/**\n * @public\n *\n * Given a mapping of keys -> results and a mapping of keys -> fragments,\n * extracts the merged variables that would be in scope for those\n * fragments/results.\n *\n * This can be useful in determing what varaibles were used to fetch the data\n * for a Relay container, for example.\n */\n\n\nfunction getVariablesFromObject(fragments, object) {\n  var variables = {};\n\n  for (var _key3 in fragments) {\n    if (fragments.hasOwnProperty(_key3)) {\n      var fragment = fragments[_key3];\n      var item = object[_key3];\n      var itemVariables = getVariablesFromFragment(fragment, item);\n      Object.assign(variables, itemVariables);\n    }\n  }\n\n  return variables;\n}\n\nfunction getVariablesFromFragment(fragment, item) {\n  var _fragment$metadata;\n\n  if (item == null) {\n    return {};\n  } else if (((_fragment$metadata = fragment.metadata) === null || _fragment$metadata === void 0 ? void 0 : _fragment$metadata.plural) === true) {\n    !Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernSelector: Expected value for fragment `%s` to be an array, got `%s`. ' + 'Remove `@relay(plural: true)` from fragment `%s` to allow the prop to be an object.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getVariablesFromPluralFragment(fragment, item);\n  } else {\n    !!Array.isArray(item) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernFragmentSpecResolver: Expected value for fragment `%s` to be an object, got `%s`. ' + 'Add `@relay(plural: true)` to fragment `%s` to allow the prop to be an array of items.', fragment.name, JSON.stringify(item), fragment.name) : invariant(false) : void 0;\n    return getVariablesFromSingularFragment(fragment, item) || {};\n  }\n}\n\nfunction getVariablesFromSingularFragment(fragment, item) {\n  var selector = getSingularSelector(fragment, item);\n\n  if (!selector) {\n    return null;\n  }\n\n  return selector.variables;\n}\n\nfunction getVariablesFromPluralFragment(fragment, items) {\n  var variables = {};\n  items.forEach(function (value, ii) {\n    if (value != null) {\n      var itemVariables = getVariablesFromSingularFragment(fragment, value);\n\n      if (itemVariables != null) {\n        Object.assign(variables, itemVariables);\n      }\n    }\n  });\n  return variables;\n}\n\nfunction areEqualSingularSelectors(thisSelector, thatSelector) {\n  return thisSelector.owner === thatSelector.owner && thisSelector.dataID === thatSelector.dataID && thisSelector.node === thatSelector.node && areEqual(thisSelector.variables, thatSelector.variables);\n}\n/**\n * @public\n *\n * Determine if two selectors are equal (represent the same selection). Note\n * that this function returns `false` when the two queries/fragments are\n * different objects, even if they select the same fields.\n */\n\n\nfunction areEqualSelectors(a, b) {\n  if (a === b) {\n    return true;\n  } else if (a == null) {\n    return b == null;\n  } else if (b == null) {\n    return a == null;\n  } else if (a.kind === 'SingularReaderSelector' && b.kind === 'SingularReaderSelector') {\n    return areEqualSingularSelectors(a, b);\n  } else if (a.kind === 'PluralReaderSelector' && b.kind === 'PluralReaderSelector') {\n    return a.selectors.length === b.selectors.length && a.selectors.every(function (s, i) {\n      return areEqualSingularSelectors(s, b.selectors[i]);\n    });\n  } else {\n    return false;\n  }\n}\n\nfunction createReaderSelector(fragment, dataID, variables, request) {\n  var isWithinUnmatchedTypeRefinement = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var clientEdgeTraversalPath = arguments.length > 5 ? arguments[5] : undefined;\n  return {\n    kind: 'SingularReaderSelector',\n    dataID: dataID,\n    isWithinUnmatchedTypeRefinement: isWithinUnmatchedTypeRefinement,\n    clientEdgeTraversalPath: clientEdgeTraversalPath !== null && clientEdgeTraversalPath !== void 0 ? clientEdgeTraversalPath : null,\n    node: fragment,\n    variables: variables,\n    owner: request\n  };\n}\n\nfunction createNormalizationSelector(node, dataID, variables) {\n  return {\n    dataID: dataID,\n    node: node,\n    variables: variables\n  };\n}\n\nmodule.exports = {\n  areEqualSelectors: areEqualSelectors,\n  createReaderSelector: createReaderSelector,\n  createNormalizationSelector: createNormalizationSelector,\n  getDataIDsFromFragment: getDataIDsFromFragment,\n  getDataIDsFromObject: getDataIDsFromObject,\n  getSingularSelector: getSingularSelector,\n  getPluralSelector: getPluralSelector,\n  getSelector: getSelector,\n  getSelectorsFromObject: getSelectorsFromObject,\n  getVariablesFromSingularFragment: getVariablesFromSingularFragment,\n  getVariablesFromPluralFragment: getVariablesFromPluralFragment,\n  getVariablesFromFragment: getVariablesFromFragment,\n  getVariablesFromObject: getVariablesFromObject\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}