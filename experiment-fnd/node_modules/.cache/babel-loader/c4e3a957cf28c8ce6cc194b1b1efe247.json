{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar getPendingOperationsForFragment = require('../util/getPendingOperationsForFragment');\n\nvar handlePotentialSnapshotErrors = require('../util/handlePotentialSnapshotErrors');\n\nvar isScalarAndEqual = require('../util/isScalarAndEqual');\n\nvar recycleNodesInto = require('../util/recycleNodesInto');\n\nvar RelayFeatureFlags = require('../util/RelayFeatureFlags');\n\nvar _require = require('./RelayModernOperationDescriptor'),\n    createRequestDescriptor = _require.createRequestDescriptor;\n\nvar _require2 = require('./RelayModernSelector'),\n    areEqualSelectors = _require2.areEqualSelectors,\n    createReaderSelector = _require2.createReaderSelector,\n    getSelectorsFromObject = _require2.getSelectorsFromObject;\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar invariant = require('invariant');\n\nvar warning = require(\"fbjs/lib/warning\");\n/**\n * A utility for resolving and subscribing to the results of a fragment spec\n * (key -> fragment mapping) given some \"props\" that determine the root ID\n * and variables to use when reading each fragment. When props are changed via\n * `setProps()`, the resolver will update its results and subscriptions\n * accordingly. Internally, the resolver:\n * - Converts the fragment map & props map into a map of `Selector`s.\n * - Removes any resolvers for any props that became null.\n * - Creates resolvers for any props that became non-null.\n * - Updates resolvers with the latest props.\n *\n * This utility is implemented as an imperative, stateful API for performance\n * reasons: reusing previous resolvers, callback functions, and subscriptions\n * all helps to reduce object allocation and thereby decrease GC time.\n *\n * The `resolve()` function is also lazy and memoized: changes in the store mark\n * the resolver as stale and notify the caller, and the actual results are\n * recomputed the first time `resolve()` is called.\n */\n\n\nvar RelayModernFragmentSpecResolver = /*#__PURE__*/function () {\n  function RelayModernFragmentSpecResolver(context, fragments, props, callback, rootIsQueryRenderer) {\n    var _this = this;\n\n    (0, _defineProperty2[\"default\"])(this, \"_onChange\", function () {\n      _this._stale = true;\n\n      if (typeof _this._callback === 'function') {\n        _this._callback();\n      }\n    });\n    this._callback = callback;\n    this._context = context;\n    this._data = {};\n    this._fragments = fragments;\n    this._props = {};\n    this._resolvers = {};\n    this._stale = false;\n    this._rootIsQueryRenderer = rootIsQueryRenderer;\n    this.setProps(props);\n  }\n\n  var _proto = RelayModernFragmentSpecResolver.prototype;\n\n  _proto.dispose = function dispose() {\n    for (var _key in this._resolvers) {\n      if (this._resolvers.hasOwnProperty(_key)) {\n        disposeCallback(this._resolvers[_key]);\n      }\n    }\n  };\n\n  _proto.resolve = function resolve() {\n    if (this._stale) {\n      // Avoid mapping the object multiple times, which could occur if data for\n      // multiple keys changes in the same event loop.\n      var prevData = this._data;\n      var nextData;\n\n      for (var _key2 in this._resolvers) {\n        if (this._resolvers.hasOwnProperty(_key2)) {\n          var resolver = this._resolvers[_key2];\n          var prevItem = prevData[_key2];\n\n          if (resolver) {\n            var nextItem = resolver.resolve();\n\n            if (nextData || nextItem !== prevItem) {\n              nextData = nextData || (0, _objectSpread2[\"default\"])({}, prevData);\n              nextData[_key2] = nextItem;\n            }\n          } else {\n            var prop = this._props[_key2];\n\n            var _nextItem = prop !== undefined ? prop : null;\n\n            if (nextData || !isScalarAndEqual(_nextItem, prevItem)) {\n              nextData = nextData || (0, _objectSpread2[\"default\"])({}, prevData);\n              nextData[_key2] = _nextItem;\n            }\n          }\n        }\n      }\n\n      this._data = nextData || prevData;\n      this._stale = false;\n    }\n\n    return this._data;\n  };\n\n  _proto.setCallback = function setCallback(props, callback) {\n    this._callback = callback;\n\n    if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {\n      this.setProps(props);\n    }\n  };\n\n  _proto.setProps = function setProps(props) {\n    this._props = {};\n    var ownedSelectors = getSelectorsFromObject(this._fragments, props);\n\n    for (var _key3 in ownedSelectors) {\n      if (ownedSelectors.hasOwnProperty(_key3)) {\n        var ownedSelector = ownedSelectors[_key3];\n        var resolver = this._resolvers[_key3];\n\n        if (ownedSelector == null) {\n          if (resolver != null) {\n            resolver.dispose();\n          }\n\n          resolver = null;\n        } else if (ownedSelector.kind === 'PluralReaderSelector') {\n          if (resolver == null) {\n            resolver = new SelectorListResolver(this._context.environment, this._rootIsQueryRenderer, ownedSelector, this._callback != null, this._onChange);\n          } else {\n            !(resolver instanceof SelectorListResolver) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernFragmentSpecResolver: Expected prop `%s` to always be an array.', _key3) : invariant(false) : void 0;\n            resolver.setSelector(ownedSelector);\n          }\n        } else {\n          if (resolver == null) {\n            resolver = new SelectorResolver(this._context.environment, this._rootIsQueryRenderer, ownedSelector, this._callback != null, this._onChange);\n          } else {\n            !(resolver instanceof SelectorResolver) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernFragmentSpecResolver: Expected prop `%s` to always be an object.', _key3) : invariant(false) : void 0;\n            resolver.setSelector(ownedSelector);\n          }\n        }\n\n        this._props[_key3] = props[_key3];\n        this._resolvers[_key3] = resolver;\n      }\n    }\n\n    this._stale = true;\n  };\n\n  _proto.setVariables = function setVariables(variables, request) {\n    for (var _key4 in this._resolvers) {\n      if (this._resolvers.hasOwnProperty(_key4)) {\n        var resolver = this._resolvers[_key4];\n\n        if (resolver) {\n          resolver.setVariables(variables, request);\n        }\n      }\n    }\n\n    this._stale = true;\n  };\n\n  return RelayModernFragmentSpecResolver;\n}();\n/**\n * A resolver for a single Selector.\n */\n\n\nvar SelectorResolver = /*#__PURE__*/function () {\n  function SelectorResolver(environment, rootIsQueryRenderer, selector, subscribeOnConstruction, callback) {\n    var _this2 = this;\n\n    (0, _defineProperty2[\"default\"])(this, \"_onChange\", function (snapshot) {\n      _this2._data = snapshot.data;\n      _this2._isMissingData = snapshot.isMissingData;\n      _this2._missingRequiredFields = snapshot.missingRequiredFields;\n      _this2._relayResolverErrors = snapshot.relayResolverErrors;\n\n      _this2._callback();\n    });\n\n    var _snapshot = environment.lookup(selector);\n\n    this._callback = callback;\n    this._data = _snapshot.data;\n    this._isMissingData = _snapshot.isMissingData;\n    this._missingRequiredFields = _snapshot.missingRequiredFields;\n    this._relayResolverErrors = _snapshot.relayResolverErrors;\n    this._environment = environment;\n    this._rootIsQueryRenderer = rootIsQueryRenderer;\n    this._selector = selector;\n\n    if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {\n      if (subscribeOnConstruction) {\n        this._subscription = environment.subscribe(_snapshot, this._onChange);\n      }\n    } else {\n      this._subscription = environment.subscribe(_snapshot, this._onChange);\n    }\n  }\n\n  var _proto2 = SelectorResolver.prototype;\n\n  _proto2.dispose = function dispose() {\n    if (this._subscription) {\n      this._subscription.dispose();\n\n      this._subscription = null;\n    }\n  };\n\n  _proto2.resolve = function resolve() {\n    if (this._isMissingData === true) {\n      // NOTE: This branch exists to handle the case in which:\n      // - A RelayModern container is rendered as a descendant of a Relay Hook\n      //   root using a \"partial\" renderPolicy (this means that eargerly\n      //   reading any cached data that is available instead of blocking\n      //   at the root until the whole query is fetched).\n      // - A parent Relay Hook didnt' suspend earlier on data being fetched,\n      //   either because the fragment data for the parent was available, or\n      //   the parent fragment didn't have any data dependencies.\n      // Even though our Flow types reflect the possiblity of null data, there\n      // might still be cases where it's not handled at runtime becuase the\n      // Flow types are being ignored, or simply not being used (for example,\n      // the case reported here: https://fburl.com/srnbucf8, was due to\n      // misuse of Flow types here: https://fburl.com/g3m0mqqh).\n      // Additionally, even though the null data might be handled without a\n      // runtime error, we might not suspend when we intended to if a parent\n      // Relay Hook (e.g. that is using @defer) decided not to suspend becuase\n      // it's immediate data was already available (even if it was deferred),\n      // or it didn't actually need any data (was just spreading other fragments).\n      // This should eventually go away with something like @optional, where we only\n      // suspend at specific boundaries depending on whether the boundary\n      // can be fulfilled or not.\n      var pendingOperationsResult = getPendingOperationsForFragment(this._environment, this._selector.node, this._selector.owner);\n      var promise = pendingOperationsResult === null || pendingOperationsResult === void 0 ? void 0 : pendingOperationsResult.promise;\n\n      if (promise != null) {\n        if (this._rootIsQueryRenderer) {\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Relay Container for fragment `%s` has missing data and ' + 'would suspend. When using features such as @defer or @module, ' + 'use `useFragment` instead of a Relay Container.', this._selector.node.name) : void 0;\n        } else {\n          var _pendingOperationsRes;\n\n          var pendingOperations = (_pendingOperationsRes = pendingOperationsResult === null || pendingOperationsResult === void 0 ? void 0 : pendingOperationsResult.pendingOperations) !== null && _pendingOperationsRes !== void 0 ? _pendingOperationsRes : [];\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Relay Container for fragment `%s` suspended. When using ' + 'features such as @defer or @module, use `useFragment` instead ' + 'of a Relay Container.', this._selector.node.name) : void 0;\n\n          this._environment.__log({\n            name: 'suspense.fragment',\n            data: this._data,\n            fragment: this._selector.node,\n            isRelayHooks: false,\n            isMissingData: this._isMissingData,\n            isPromiseCached: false,\n            pendingOperations: pendingOperations\n          });\n\n          throw promise;\n        }\n      }\n    }\n\n    handlePotentialSnapshotErrors(this._environment, this._missingRequiredFields, this._relayResolverErrors);\n    return this._data;\n  };\n\n  _proto2.setSelector = function setSelector(selector) {\n    if (this._subscription != null && areEqualSelectors(selector, this._selector)) {\n      return;\n    }\n\n    this.dispose();\n\n    var snapshot = this._environment.lookup(selector);\n\n    this._data = recycleNodesInto(this._data, snapshot.data);\n    this._isMissingData = snapshot.isMissingData;\n    this._missingRequiredFields = snapshot.missingRequiredFields;\n    this._relayResolverErrors = snapshot.relayResolverErrors;\n    this._selector = selector;\n    this._subscription = this._environment.subscribe(snapshot, this._onChange);\n  };\n\n  _proto2.setVariables = function setVariables(variables, request) {\n    if (areEqual(variables, this._selector.variables)) {\n      // If we're not actually setting new variables, we don't actually want\n      // to create a new fragment owner, since areEqualSelectors relies on\n      // owner identity.\n      // In fact, we don't even need to try to attempt to set a new selector.\n      // When fragment ownership is not enabled, setSelector will also bail\n      // out since the selector doesn't really change, so we're doing it here\n      // earlier.\n      return;\n    } // NOTE: We manually create the request descriptor here instead of\n    // calling createOperationDescriptor() because we want to set a\n    // descriptor with *unaltered* variables as the fragment owner.\n    // This is a hack that allows us to preserve existing (broken)\n    // behavior of RelayModern containers while using fragment ownership\n    // to propagate variables instead of Context.\n    // For more details, see the summary of D13999308\n\n\n    var requestDescriptor = createRequestDescriptor(request, variables);\n    var selector = createReaderSelector(this._selector.node, this._selector.dataID, variables, requestDescriptor);\n    this.setSelector(selector);\n  };\n\n  return SelectorResolver;\n}();\n/**\n * A resolver for an array of Selectors.\n */\n\n\nvar SelectorListResolver = /*#__PURE__*/function () {\n  function SelectorListResolver(environment, rootIsQueryRenderer, selector, subscribeOnConstruction, callback) {\n    var _this3 = this;\n\n    (0, _defineProperty2[\"default\"])(this, \"_onChange\", function (data) {\n      _this3._stale = true;\n\n      _this3._callback();\n    });\n    this._callback = callback;\n    this._data = [];\n    this._environment = environment;\n    this._resolvers = [];\n    this._stale = true;\n    this._rootIsQueryRenderer = rootIsQueryRenderer;\n    this._subscribeOnConstruction = subscribeOnConstruction;\n    this.setSelector(selector);\n  }\n\n  var _proto3 = SelectorListResolver.prototype;\n\n  _proto3.dispose = function dispose() {\n    this._resolvers.forEach(disposeCallback);\n  };\n\n  _proto3.resolve = function resolve() {\n    if (this._stale) {\n      // Avoid mapping the array multiple times, which could occur if data for\n      // multiple indices changes in the same event loop.\n      var prevData = this._data;\n      var nextData;\n\n      for (var ii = 0; ii < this._resolvers.length; ii++) {\n        var prevItem = prevData[ii];\n\n        var nextItem = this._resolvers[ii].resolve();\n\n        if (nextData || nextItem !== prevItem) {\n          nextData = nextData || prevData.slice(0, ii);\n          nextData.push(nextItem);\n        }\n      }\n\n      if (!nextData && this._resolvers.length !== prevData.length) {\n        nextData = prevData.slice(0, this._resolvers.length);\n      }\n\n      this._data = nextData || prevData;\n      this._stale = false;\n    }\n\n    return this._data;\n  };\n\n  _proto3.setSelector = function setSelector(selector) {\n    var selectors = selector.selectors;\n\n    while (this._resolvers.length > selectors.length) {\n      var resolver = this._resolvers.pop();\n\n      resolver.dispose();\n    }\n\n    for (var ii = 0; ii < selectors.length; ii++) {\n      if (ii < this._resolvers.length) {\n        this._resolvers[ii].setSelector(selectors[ii]);\n      } else {\n        this._resolvers[ii] = new SelectorResolver(this._environment, this._rootIsQueryRenderer, selectors[ii], this._subscribeOnConstruction, this._onChange);\n      }\n    }\n\n    this._stale = true;\n  };\n\n  _proto3.setVariables = function setVariables(variables, request) {\n    this._resolvers.forEach(function (resolver) {\n      return resolver.setVariables(variables, request);\n    });\n\n    this._stale = true;\n  };\n\n  return SelectorListResolver;\n}();\n\nfunction disposeCallback(disposable) {\n  disposable && disposable.dispose();\n}\n\nmodule.exports = RelayModernFragmentSpecResolver;","map":{"version":3,"names":["_interopRequireDefault","require","_objectSpread2","_defineProperty2","getPendingOperationsForFragment","handlePotentialSnapshotErrors","isScalarAndEqual","recycleNodesInto","RelayFeatureFlags","_require","createRequestDescriptor","_require2","areEqualSelectors","createReaderSelector","getSelectorsFromObject","areEqual","invariant","warning","RelayModernFragmentSpecResolver","context","fragments","props","callback","rootIsQueryRenderer","_this","_stale","_callback","_context","_data","_fragments","_props","_resolvers","_rootIsQueryRenderer","setProps","_proto","prototype","dispose","_key","hasOwnProperty","disposeCallback","resolve","prevData","nextData","_key2","resolver","prevItem","nextItem","prop","_nextItem","undefined","setCallback","ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT","ownedSelectors","_key3","ownedSelector","kind","SelectorListResolver","environment","_onChange","process","env","NODE_ENV","setSelector","SelectorResolver","setVariables","variables","request","_key4","selector","subscribeOnConstruction","_this2","snapshot","data","_isMissingData","isMissingData","_missingRequiredFields","missingRequiredFields","_relayResolverErrors","relayResolverErrors","_snapshot","lookup","_environment","_selector","_subscription","subscribe","_proto2","pendingOperationsResult","node","owner","promise","name","_pendingOperationsRes","pendingOperations","__log","fragment","isRelayHooks","isPromiseCached","requestDescriptor","dataID","_this3","_subscribeOnConstruction","_proto3","forEach","ii","length","slice","push","selectors","pop","disposable","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/relay-runtime/lib/store/RelayModernFragmentSpecResolver.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar getPendingOperationsForFragment = require('../util/getPendingOperationsForFragment');\n\nvar handlePotentialSnapshotErrors = require('../util/handlePotentialSnapshotErrors');\n\nvar isScalarAndEqual = require('../util/isScalarAndEqual');\n\nvar recycleNodesInto = require('../util/recycleNodesInto');\n\nvar RelayFeatureFlags = require('../util/RelayFeatureFlags');\n\nvar _require = require('./RelayModernOperationDescriptor'),\n    createRequestDescriptor = _require.createRequestDescriptor;\n\nvar _require2 = require('./RelayModernSelector'),\n    areEqualSelectors = _require2.areEqualSelectors,\n    createReaderSelector = _require2.createReaderSelector,\n    getSelectorsFromObject = _require2.getSelectorsFromObject;\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar invariant = require('invariant');\n\nvar warning = require(\"fbjs/lib/warning\");\n\n/**\n * A utility for resolving and subscribing to the results of a fragment spec\n * (key -> fragment mapping) given some \"props\" that determine the root ID\n * and variables to use when reading each fragment. When props are changed via\n * `setProps()`, the resolver will update its results and subscriptions\n * accordingly. Internally, the resolver:\n * - Converts the fragment map & props map into a map of `Selector`s.\n * - Removes any resolvers for any props that became null.\n * - Creates resolvers for any props that became non-null.\n * - Updates resolvers with the latest props.\n *\n * This utility is implemented as an imperative, stateful API for performance\n * reasons: reusing previous resolvers, callback functions, and subscriptions\n * all helps to reduce object allocation and thereby decrease GC time.\n *\n * The `resolve()` function is also lazy and memoized: changes in the store mark\n * the resolver as stale and notify the caller, and the actual results are\n * recomputed the first time `resolve()` is called.\n */\nvar RelayModernFragmentSpecResolver = /*#__PURE__*/function () {\n  function RelayModernFragmentSpecResolver(context, fragments, props, callback, rootIsQueryRenderer) {\n    var _this = this;\n\n    (0, _defineProperty2[\"default\"])(this, \"_onChange\", function () {\n      _this._stale = true;\n\n      if (typeof _this._callback === 'function') {\n        _this._callback();\n      }\n    });\n    this._callback = callback;\n    this._context = context;\n    this._data = {};\n    this._fragments = fragments;\n    this._props = {};\n    this._resolvers = {};\n    this._stale = false;\n    this._rootIsQueryRenderer = rootIsQueryRenderer;\n    this.setProps(props);\n  }\n\n  var _proto = RelayModernFragmentSpecResolver.prototype;\n\n  _proto.dispose = function dispose() {\n    for (var _key in this._resolvers) {\n      if (this._resolvers.hasOwnProperty(_key)) {\n        disposeCallback(this._resolvers[_key]);\n      }\n    }\n  };\n\n  _proto.resolve = function resolve() {\n    if (this._stale) {\n      // Avoid mapping the object multiple times, which could occur if data for\n      // multiple keys changes in the same event loop.\n      var prevData = this._data;\n      var nextData;\n\n      for (var _key2 in this._resolvers) {\n        if (this._resolvers.hasOwnProperty(_key2)) {\n          var resolver = this._resolvers[_key2];\n          var prevItem = prevData[_key2];\n\n          if (resolver) {\n            var nextItem = resolver.resolve();\n\n            if (nextData || nextItem !== prevItem) {\n              nextData = nextData || (0, _objectSpread2[\"default\"])({}, prevData);\n              nextData[_key2] = nextItem;\n            }\n          } else {\n            var prop = this._props[_key2];\n\n            var _nextItem = prop !== undefined ? prop : null;\n\n            if (nextData || !isScalarAndEqual(_nextItem, prevItem)) {\n              nextData = nextData || (0, _objectSpread2[\"default\"])({}, prevData);\n              nextData[_key2] = _nextItem;\n            }\n          }\n        }\n      }\n\n      this._data = nextData || prevData;\n      this._stale = false;\n    }\n\n    return this._data;\n  };\n\n  _proto.setCallback = function setCallback(props, callback) {\n    this._callback = callback;\n\n    if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {\n      this.setProps(props);\n    }\n  };\n\n  _proto.setProps = function setProps(props) {\n    this._props = {};\n    var ownedSelectors = getSelectorsFromObject(this._fragments, props);\n\n    for (var _key3 in ownedSelectors) {\n      if (ownedSelectors.hasOwnProperty(_key3)) {\n        var ownedSelector = ownedSelectors[_key3];\n        var resolver = this._resolvers[_key3];\n\n        if (ownedSelector == null) {\n          if (resolver != null) {\n            resolver.dispose();\n          }\n\n          resolver = null;\n        } else if (ownedSelector.kind === 'PluralReaderSelector') {\n          if (resolver == null) {\n            resolver = new SelectorListResolver(this._context.environment, this._rootIsQueryRenderer, ownedSelector, this._callback != null, this._onChange);\n          } else {\n            !(resolver instanceof SelectorListResolver) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernFragmentSpecResolver: Expected prop `%s` to always be an array.', _key3) : invariant(false) : void 0;\n            resolver.setSelector(ownedSelector);\n          }\n        } else {\n          if (resolver == null) {\n            resolver = new SelectorResolver(this._context.environment, this._rootIsQueryRenderer, ownedSelector, this._callback != null, this._onChange);\n          } else {\n            !(resolver instanceof SelectorResolver) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayModernFragmentSpecResolver: Expected prop `%s` to always be an object.', _key3) : invariant(false) : void 0;\n            resolver.setSelector(ownedSelector);\n          }\n        }\n\n        this._props[_key3] = props[_key3];\n        this._resolvers[_key3] = resolver;\n      }\n    }\n\n    this._stale = true;\n  };\n\n  _proto.setVariables = function setVariables(variables, request) {\n    for (var _key4 in this._resolvers) {\n      if (this._resolvers.hasOwnProperty(_key4)) {\n        var resolver = this._resolvers[_key4];\n\n        if (resolver) {\n          resolver.setVariables(variables, request);\n        }\n      }\n    }\n\n    this._stale = true;\n  };\n\n  return RelayModernFragmentSpecResolver;\n}();\n/**\n * A resolver for a single Selector.\n */\n\n\nvar SelectorResolver = /*#__PURE__*/function () {\n  function SelectorResolver(environment, rootIsQueryRenderer, selector, subscribeOnConstruction, callback) {\n    var _this2 = this;\n\n    (0, _defineProperty2[\"default\"])(this, \"_onChange\", function (snapshot) {\n      _this2._data = snapshot.data;\n      _this2._isMissingData = snapshot.isMissingData;\n      _this2._missingRequiredFields = snapshot.missingRequiredFields;\n      _this2._relayResolverErrors = snapshot.relayResolverErrors;\n\n      _this2._callback();\n    });\n\n    var _snapshot = environment.lookup(selector);\n\n    this._callback = callback;\n    this._data = _snapshot.data;\n    this._isMissingData = _snapshot.isMissingData;\n    this._missingRequiredFields = _snapshot.missingRequiredFields;\n    this._relayResolverErrors = _snapshot.relayResolverErrors;\n    this._environment = environment;\n    this._rootIsQueryRenderer = rootIsQueryRenderer;\n    this._selector = selector;\n\n    if (RelayFeatureFlags.ENABLE_CONTAINERS_SUBSCRIBE_ON_COMMIT === true) {\n      if (subscribeOnConstruction) {\n        this._subscription = environment.subscribe(_snapshot, this._onChange);\n      }\n    } else {\n      this._subscription = environment.subscribe(_snapshot, this._onChange);\n    }\n  }\n\n  var _proto2 = SelectorResolver.prototype;\n\n  _proto2.dispose = function dispose() {\n    if (this._subscription) {\n      this._subscription.dispose();\n\n      this._subscription = null;\n    }\n  };\n\n  _proto2.resolve = function resolve() {\n    if (this._isMissingData === true) {\n      // NOTE: This branch exists to handle the case in which:\n      // - A RelayModern container is rendered as a descendant of a Relay Hook\n      //   root using a \"partial\" renderPolicy (this means that eargerly\n      //   reading any cached data that is available instead of blocking\n      //   at the root until the whole query is fetched).\n      // - A parent Relay Hook didnt' suspend earlier on data being fetched,\n      //   either because the fragment data for the parent was available, or\n      //   the parent fragment didn't have any data dependencies.\n      // Even though our Flow types reflect the possiblity of null data, there\n      // might still be cases where it's not handled at runtime becuase the\n      // Flow types are being ignored, or simply not being used (for example,\n      // the case reported here: https://fburl.com/srnbucf8, was due to\n      // misuse of Flow types here: https://fburl.com/g3m0mqqh).\n      // Additionally, even though the null data might be handled without a\n      // runtime error, we might not suspend when we intended to if a parent\n      // Relay Hook (e.g. that is using @defer) decided not to suspend becuase\n      // it's immediate data was already available (even if it was deferred),\n      // or it didn't actually need any data (was just spreading other fragments).\n      // This should eventually go away with something like @optional, where we only\n      // suspend at specific boundaries depending on whether the boundary\n      // can be fulfilled or not.\n      var pendingOperationsResult = getPendingOperationsForFragment(this._environment, this._selector.node, this._selector.owner);\n      var promise = pendingOperationsResult === null || pendingOperationsResult === void 0 ? void 0 : pendingOperationsResult.promise;\n\n      if (promise != null) {\n        if (this._rootIsQueryRenderer) {\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Relay Container for fragment `%s` has missing data and ' + 'would suspend. When using features such as @defer or @module, ' + 'use `useFragment` instead of a Relay Container.', this._selector.node.name) : void 0;\n        } else {\n          var _pendingOperationsRes;\n\n          var pendingOperations = (_pendingOperationsRes = pendingOperationsResult === null || pendingOperationsResult === void 0 ? void 0 : pendingOperationsResult.pendingOperations) !== null && _pendingOperationsRes !== void 0 ? _pendingOperationsRes : [];\n          process.env.NODE_ENV !== \"production\" ? warning(false, 'Relay: Relay Container for fragment `%s` suspended. When using ' + 'features such as @defer or @module, use `useFragment` instead ' + 'of a Relay Container.', this._selector.node.name) : void 0;\n\n          this._environment.__log({\n            name: 'suspense.fragment',\n            data: this._data,\n            fragment: this._selector.node,\n            isRelayHooks: false,\n            isMissingData: this._isMissingData,\n            isPromiseCached: false,\n            pendingOperations: pendingOperations\n          });\n\n          throw promise;\n        }\n      }\n    }\n\n    handlePotentialSnapshotErrors(this._environment, this._missingRequiredFields, this._relayResolverErrors);\n    return this._data;\n  };\n\n  _proto2.setSelector = function setSelector(selector) {\n    if (this._subscription != null && areEqualSelectors(selector, this._selector)) {\n      return;\n    }\n\n    this.dispose();\n\n    var snapshot = this._environment.lookup(selector);\n\n    this._data = recycleNodesInto(this._data, snapshot.data);\n    this._isMissingData = snapshot.isMissingData;\n    this._missingRequiredFields = snapshot.missingRequiredFields;\n    this._relayResolverErrors = snapshot.relayResolverErrors;\n    this._selector = selector;\n    this._subscription = this._environment.subscribe(snapshot, this._onChange);\n  };\n\n  _proto2.setVariables = function setVariables(variables, request) {\n    if (areEqual(variables, this._selector.variables)) {\n      // If we're not actually setting new variables, we don't actually want\n      // to create a new fragment owner, since areEqualSelectors relies on\n      // owner identity.\n      // In fact, we don't even need to try to attempt to set a new selector.\n      // When fragment ownership is not enabled, setSelector will also bail\n      // out since the selector doesn't really change, so we're doing it here\n      // earlier.\n      return;\n    } // NOTE: We manually create the request descriptor here instead of\n    // calling createOperationDescriptor() because we want to set a\n    // descriptor with *unaltered* variables as the fragment owner.\n    // This is a hack that allows us to preserve existing (broken)\n    // behavior of RelayModern containers while using fragment ownership\n    // to propagate variables instead of Context.\n    // For more details, see the summary of D13999308\n\n\n    var requestDescriptor = createRequestDescriptor(request, variables);\n    var selector = createReaderSelector(this._selector.node, this._selector.dataID, variables, requestDescriptor);\n    this.setSelector(selector);\n  };\n\n  return SelectorResolver;\n}();\n/**\n * A resolver for an array of Selectors.\n */\n\n\nvar SelectorListResolver = /*#__PURE__*/function () {\n  function SelectorListResolver(environment, rootIsQueryRenderer, selector, subscribeOnConstruction, callback) {\n    var _this3 = this;\n\n    (0, _defineProperty2[\"default\"])(this, \"_onChange\", function (data) {\n      _this3._stale = true;\n\n      _this3._callback();\n    });\n    this._callback = callback;\n    this._data = [];\n    this._environment = environment;\n    this._resolvers = [];\n    this._stale = true;\n    this._rootIsQueryRenderer = rootIsQueryRenderer;\n    this._subscribeOnConstruction = subscribeOnConstruction;\n    this.setSelector(selector);\n  }\n\n  var _proto3 = SelectorListResolver.prototype;\n\n  _proto3.dispose = function dispose() {\n    this._resolvers.forEach(disposeCallback);\n  };\n\n  _proto3.resolve = function resolve() {\n    if (this._stale) {\n      // Avoid mapping the array multiple times, which could occur if data for\n      // multiple indices changes in the same event loop.\n      var prevData = this._data;\n      var nextData;\n\n      for (var ii = 0; ii < this._resolvers.length; ii++) {\n        var prevItem = prevData[ii];\n\n        var nextItem = this._resolvers[ii].resolve();\n\n        if (nextData || nextItem !== prevItem) {\n          nextData = nextData || prevData.slice(0, ii);\n          nextData.push(nextItem);\n        }\n      }\n\n      if (!nextData && this._resolvers.length !== prevData.length) {\n        nextData = prevData.slice(0, this._resolvers.length);\n      }\n\n      this._data = nextData || prevData;\n      this._stale = false;\n    }\n\n    return this._data;\n  };\n\n  _proto3.setSelector = function setSelector(selector) {\n    var selectors = selector.selectors;\n\n    while (this._resolvers.length > selectors.length) {\n      var resolver = this._resolvers.pop();\n\n      resolver.dispose();\n    }\n\n    for (var ii = 0; ii < selectors.length; ii++) {\n      if (ii < this._resolvers.length) {\n        this._resolvers[ii].setSelector(selectors[ii]);\n      } else {\n        this._resolvers[ii] = new SelectorResolver(this._environment, this._rootIsQueryRenderer, selectors[ii], this._subscribeOnConstruction, this._onChange);\n      }\n    }\n\n    this._stale = true;\n  };\n\n  _proto3.setVariables = function setVariables(variables, request) {\n    this._resolvers.forEach(function (resolver) {\n      return resolver.setVariables(variables, request);\n    });\n\n    this._stale = true;\n  };\n\n  return SelectorListResolver;\n}();\n\nfunction disposeCallback(disposable) {\n  disposable && disposable.dispose();\n}\n\nmodule.exports = RelayModernFragmentSpecResolver;"],"mappings":"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"},"metadata":{},"sourceType":"script"}