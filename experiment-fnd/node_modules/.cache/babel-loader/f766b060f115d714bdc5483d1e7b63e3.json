{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('../store/RelayStoreUtils'),\n    ROOT_TYPE = _require.ROOT_TYPE,\n    getStorageKey = _require.getStorageKey;\n\nvar _require2 = require('./readUpdatableFragment_EXPERIMENTAL'),\n    _readUpdatableFragment_EXPERIMENTAL = _require2.readUpdatableFragment_EXPERIMENTAL;\n\nvar _require3 = require('./readUpdatableQuery_EXPERIMENTAL'),\n    _readUpdatableQuery_EXPERIMENTAL = _require3.readUpdatableQuery_EXPERIMENTAL;\n\nvar invariant = require('invariant');\n/**\n * @internal\n *\n * A subclass of RecordSourceProxy that provides convenience methods for\n * accessing the root fields of a given query/mutation. These fields accept\n * complex arguments and it can be tedious to re-construct the correct sets of\n * arguments to pass to e.g. `getRoot().getLinkedRecord()`.\n */\n\n\nvar RelayRecordSourceSelectorProxy = /*#__PURE__*/function () {\n  function RelayRecordSourceSelectorProxy(mutator, recordSource, readSelector) {\n    this.__mutator = mutator;\n    this.__recordSource = recordSource;\n    this._readSelector = readSelector;\n  }\n\n  var _proto = RelayRecordSourceSelectorProxy.prototype;\n\n  _proto.create = function create(dataID, typeName) {\n    return this.__recordSource.create(dataID, typeName);\n  };\n\n  _proto[\"delete\"] = function _delete(dataID) {\n    this.__recordSource[\"delete\"](dataID);\n  };\n\n  _proto.get = function get(dataID) {\n    return this.__recordSource.get(dataID);\n  };\n\n  _proto.getRoot = function getRoot() {\n    return this.__recordSource.getRoot();\n  };\n\n  _proto.getOperationRoot = function getOperationRoot() {\n    var root = this.__recordSource.get(this._readSelector.dataID);\n\n    if (!root) {\n      root = this.__recordSource.create(this._readSelector.dataID, ROOT_TYPE);\n    }\n\n    return root;\n  };\n\n  _proto._getRootField = function _getRootField(selector, fieldName, plural) {\n    var field = selector.node.selections.find(function (selection) {\n      return selection.kind === 'LinkedField' && selection.name === fieldName || selection.kind === 'RequiredField' && selection.field.name === fieldName;\n    });\n\n    if (field && field.kind === 'RequiredField') {\n      field = field.field;\n    }\n\n    !(field && field.kind === 'LinkedField') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayRecordSourceSelectorProxy#getRootField(): Cannot find root ' + 'field `%s`, no such field is defined on GraphQL document `%s`.', fieldName, selector.node.name) : invariant(false) : void 0;\n    !(field.plural === plural) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayRecordSourceSelectorProxy#getRootField(): Expected root field ' + '`%s` to be %s.', fieldName, plural ? 'plural' : 'singular') : invariant(false) : void 0;\n    return field;\n  };\n\n  _proto.getRootField = function getRootField(fieldName) {\n    var field = this._getRootField(this._readSelector, fieldName, false);\n\n    var storageKey = getStorageKey(field, this._readSelector.variables);\n    return this.getOperationRoot().getLinkedRecord(storageKey);\n  };\n\n  _proto.getPluralRootField = function getPluralRootField(fieldName) {\n    var field = this._getRootField(this._readSelector, fieldName, true);\n\n    var storageKey = getStorageKey(field, this._readSelector.variables);\n    return this.getOperationRoot().getLinkedRecords(storageKey);\n  };\n\n  _proto.invalidateStore = function invalidateStore() {\n    this.__recordSource.invalidateStore();\n  };\n\n  _proto.readUpdatableQuery_EXPERIMENTAL = function readUpdatableQuery_EXPERIMENTAL(query, variables) {\n    return _readUpdatableQuery_EXPERIMENTAL(query, variables, this);\n  };\n\n  _proto.readUpdatableFragment_EXPERIMENTAL = function readUpdatableFragment_EXPERIMENTAL(fragment, fragmentReference) {\n    return _readUpdatableFragment_EXPERIMENTAL(fragment, fragmentReference, this);\n  };\n\n  return RelayRecordSourceSelectorProxy;\n}();\n\nmodule.exports = RelayRecordSourceSelectorProxy;","map":{"version":3,"names":["_require","require","ROOT_TYPE","getStorageKey","_require2","_readUpdatableFragment_EXPERIMENTAL","readUpdatableFragment_EXPERIMENTAL","_require3","_readUpdatableQuery_EXPERIMENTAL","readUpdatableQuery_EXPERIMENTAL","invariant","RelayRecordSourceSelectorProxy","mutator","recordSource","readSelector","__mutator","__recordSource","_readSelector","_proto","prototype","create","dataID","typeName","_delete","get","getRoot","getOperationRoot","root","_getRootField","selector","fieldName","plural","field","node","selections","find","selection","kind","name","process","env","NODE_ENV","getRootField","storageKey","variables","getLinkedRecord","getPluralRootField","getLinkedRecords","invalidateStore","query","fragment","fragmentReference","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/relay-runtime/lib/mutations/RelayRecordSourceSelectorProxy.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('../store/RelayStoreUtils'),\n    ROOT_TYPE = _require.ROOT_TYPE,\n    getStorageKey = _require.getStorageKey;\n\nvar _require2 = require('./readUpdatableFragment_EXPERIMENTAL'),\n    _readUpdatableFragment_EXPERIMENTAL = _require2.readUpdatableFragment_EXPERIMENTAL;\n\nvar _require3 = require('./readUpdatableQuery_EXPERIMENTAL'),\n    _readUpdatableQuery_EXPERIMENTAL = _require3.readUpdatableQuery_EXPERIMENTAL;\n\nvar invariant = require('invariant');\n/**\n * @internal\n *\n * A subclass of RecordSourceProxy that provides convenience methods for\n * accessing the root fields of a given query/mutation. These fields accept\n * complex arguments and it can be tedious to re-construct the correct sets of\n * arguments to pass to e.g. `getRoot().getLinkedRecord()`.\n */\n\n\nvar RelayRecordSourceSelectorProxy = /*#__PURE__*/function () {\n  function RelayRecordSourceSelectorProxy(mutator, recordSource, readSelector) {\n    this.__mutator = mutator;\n    this.__recordSource = recordSource;\n    this._readSelector = readSelector;\n  }\n\n  var _proto = RelayRecordSourceSelectorProxy.prototype;\n\n  _proto.create = function create(dataID, typeName) {\n    return this.__recordSource.create(dataID, typeName);\n  };\n\n  _proto[\"delete\"] = function _delete(dataID) {\n    this.__recordSource[\"delete\"](dataID);\n  };\n\n  _proto.get = function get(dataID) {\n    return this.__recordSource.get(dataID);\n  };\n\n  _proto.getRoot = function getRoot() {\n    return this.__recordSource.getRoot();\n  };\n\n  _proto.getOperationRoot = function getOperationRoot() {\n    var root = this.__recordSource.get(this._readSelector.dataID);\n\n    if (!root) {\n      root = this.__recordSource.create(this._readSelector.dataID, ROOT_TYPE);\n    }\n\n    return root;\n  };\n\n  _proto._getRootField = function _getRootField(selector, fieldName, plural) {\n    var field = selector.node.selections.find(function (selection) {\n      return selection.kind === 'LinkedField' && selection.name === fieldName || selection.kind === 'RequiredField' && selection.field.name === fieldName;\n    });\n\n    if (field && field.kind === 'RequiredField') {\n      field = field.field;\n    }\n\n    !(field && field.kind === 'LinkedField') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayRecordSourceSelectorProxy#getRootField(): Cannot find root ' + 'field `%s`, no such field is defined on GraphQL document `%s`.', fieldName, selector.node.name) : invariant(false) : void 0;\n    !(field.plural === plural) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayRecordSourceSelectorProxy#getRootField(): Expected root field ' + '`%s` to be %s.', fieldName, plural ? 'plural' : 'singular') : invariant(false) : void 0;\n    return field;\n  };\n\n  _proto.getRootField = function getRootField(fieldName) {\n    var field = this._getRootField(this._readSelector, fieldName, false);\n\n    var storageKey = getStorageKey(field, this._readSelector.variables);\n    return this.getOperationRoot().getLinkedRecord(storageKey);\n  };\n\n  _proto.getPluralRootField = function getPluralRootField(fieldName) {\n    var field = this._getRootField(this._readSelector, fieldName, true);\n\n    var storageKey = getStorageKey(field, this._readSelector.variables);\n    return this.getOperationRoot().getLinkedRecords(storageKey);\n  };\n\n  _proto.invalidateStore = function invalidateStore() {\n    this.__recordSource.invalidateStore();\n  };\n\n  _proto.readUpdatableQuery_EXPERIMENTAL = function readUpdatableQuery_EXPERIMENTAL(query, variables) {\n    return _readUpdatableQuery_EXPERIMENTAL(query, variables, this);\n  };\n\n  _proto.readUpdatableFragment_EXPERIMENTAL = function readUpdatableFragment_EXPERIMENTAL(fragment, fragmentReference) {\n    return _readUpdatableFragment_EXPERIMENTAL(fragment, fragmentReference, this);\n  };\n\n  return RelayRecordSourceSelectorProxy;\n}();\n\nmodule.exports = RelayRecordSourceSelectorProxy;"],"mappings":"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"},"metadata":{},"sourceType":"script"}