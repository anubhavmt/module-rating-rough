{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar generateID = require('../util/generateID');\n/**\n * Wraps the network with logging to ensure that network requests are\n * always logged. Relying on each network callsite to be wrapped is\n * untenable and will eventually lead to holes in the logging.\n * NOTE: This function takes an environment instance, because Relay\n * devtools will mutate the `env.__log` method, and the devtools rely\n * on it to receive network events.\n */\n\n\nfunction wrapNetworkWithLogObserver(env, network) {\n  return {\n    execute: function execute(params, variables, cacheConfig, uploadables) {\n      var networkRequestId = generateID();\n      var logObserver = {\n        start: function start(subscription) {\n          env.__log({\n            name: 'network.start',\n            networkRequestId: networkRequestId,\n            params: params,\n            variables: variables,\n            cacheConfig: cacheConfig\n          });\n        },\n        next: function next(response) {\n          env.__log({\n            name: 'network.next',\n            networkRequestId: networkRequestId,\n            response: response\n          });\n        },\n        error: function error(_error) {\n          env.__log({\n            name: 'network.error',\n            networkRequestId: networkRequestId,\n            error: _error\n          });\n        },\n        complete: function complete() {\n          env.__log({\n            name: 'network.complete',\n            networkRequestId: networkRequestId\n          });\n        },\n        unsubscribe: function unsubscribe() {\n          env.__log({\n            name: 'network.unsubscribe',\n            networkRequestId: networkRequestId\n          });\n        }\n      };\n\n      var logRequestInfo = function logRequestInfo(info) {\n        env.__log({\n          name: 'network.info',\n          networkRequestId: networkRequestId,\n          info: info\n        });\n      };\n\n      return network.execute(params, variables, cacheConfig, uploadables, logRequestInfo)[\"do\"](logObserver);\n    }\n  };\n}\n\nmodule.exports = wrapNetworkWithLogObserver;","map":{"version":3,"names":["generateID","require","wrapNetworkWithLogObserver","env","network","execute","params","variables","cacheConfig","uploadables","networkRequestId","logObserver","start","subscription","__log","name","next","response","error","_error","complete","unsubscribe","logRequestInfo","info","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/relay-runtime/lib/network/wrapNetworkWithLogObserver.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar generateID = require('../util/generateID');\n/**\n * Wraps the network with logging to ensure that network requests are\n * always logged. Relying on each network callsite to be wrapped is\n * untenable and will eventually lead to holes in the logging.\n * NOTE: This function takes an environment instance, because Relay\n * devtools will mutate the `env.__log` method, and the devtools rely\n * on it to receive network events.\n */\n\n\nfunction wrapNetworkWithLogObserver(env, network) {\n  return {\n    execute: function execute(params, variables, cacheConfig, uploadables) {\n      var networkRequestId = generateID();\n      var logObserver = {\n        start: function start(subscription) {\n          env.__log({\n            name: 'network.start',\n            networkRequestId: networkRequestId,\n            params: params,\n            variables: variables,\n            cacheConfig: cacheConfig\n          });\n        },\n        next: function next(response) {\n          env.__log({\n            name: 'network.next',\n            networkRequestId: networkRequestId,\n            response: response\n          });\n        },\n        error: function error(_error) {\n          env.__log({\n            name: 'network.error',\n            networkRequestId: networkRequestId,\n            error: _error\n          });\n        },\n        complete: function complete() {\n          env.__log({\n            name: 'network.complete',\n            networkRequestId: networkRequestId\n          });\n        },\n        unsubscribe: function unsubscribe() {\n          env.__log({\n            name: 'network.unsubscribe',\n            networkRequestId: networkRequestId\n          });\n        }\n      };\n\n      var logRequestInfo = function logRequestInfo(info) {\n        env.__log({\n          name: 'network.info',\n          networkRequestId: networkRequestId,\n          info: info\n        });\n      };\n\n      return network.execute(params, variables, cacheConfig, uploadables, logRequestInfo)[\"do\"](logObserver);\n    }\n  };\n}\n\nmodule.exports = wrapNetworkWithLogObserver;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,UAAU,GAAGC,OAAO,CAAC,oBAAD,CAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,0BAAT,CAAoCC,GAApC,EAAyCC,OAAzC,EAAkD;EAChD,OAAO;IACLC,OAAO,EAAE,SAASA,OAAT,CAAiBC,MAAjB,EAAyBC,SAAzB,EAAoCC,WAApC,EAAiDC,WAAjD,EAA8D;MACrE,IAAIC,gBAAgB,GAAGV,UAAU,EAAjC;MACA,IAAIW,WAAW,GAAG;QAChBC,KAAK,EAAE,SAASA,KAAT,CAAeC,YAAf,EAA6B;UAClCV,GAAG,CAACW,KAAJ,CAAU;YACRC,IAAI,EAAE,eADE;YAERL,gBAAgB,EAAEA,gBAFV;YAGRJ,MAAM,EAAEA,MAHA;YAIRC,SAAS,EAAEA,SAJH;YAKRC,WAAW,EAAEA;UALL,CAAV;QAOD,CATe;QAUhBQ,IAAI,EAAE,SAASA,IAAT,CAAcC,QAAd,EAAwB;UAC5Bd,GAAG,CAACW,KAAJ,CAAU;YACRC,IAAI,EAAE,cADE;YAERL,gBAAgB,EAAEA,gBAFV;YAGRO,QAAQ,EAAEA;UAHF,CAAV;QAKD,CAhBe;QAiBhBC,KAAK,EAAE,SAASA,KAAT,CAAeC,MAAf,EAAuB;UAC5BhB,GAAG,CAACW,KAAJ,CAAU;YACRC,IAAI,EAAE,eADE;YAERL,gBAAgB,EAAEA,gBAFV;YAGRQ,KAAK,EAAEC;UAHC,CAAV;QAKD,CAvBe;QAwBhBC,QAAQ,EAAE,SAASA,QAAT,GAAoB;UAC5BjB,GAAG,CAACW,KAAJ,CAAU;YACRC,IAAI,EAAE,kBADE;YAERL,gBAAgB,EAAEA;UAFV,CAAV;QAID,CA7Be;QA8BhBW,WAAW,EAAE,SAASA,WAAT,GAAuB;UAClClB,GAAG,CAACW,KAAJ,CAAU;YACRC,IAAI,EAAE,qBADE;YAERL,gBAAgB,EAAEA;UAFV,CAAV;QAID;MAnCe,CAAlB;;MAsCA,IAAIY,cAAc,GAAG,SAASA,cAAT,CAAwBC,IAAxB,EAA8B;QACjDpB,GAAG,CAACW,KAAJ,CAAU;UACRC,IAAI,EAAE,cADE;UAERL,gBAAgB,EAAEA,gBAFV;UAGRa,IAAI,EAAEA;QAHE,CAAV;MAKD,CAND;;MAQA,OAAOnB,OAAO,CAACC,OAAR,CAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,WAAnC,EAAgDC,WAAhD,EAA6Da,cAA7D,EAA6E,IAA7E,EAAmFX,WAAnF,CAAP;IACD;EAlDI,CAAP;AAoDD;;AAEDa,MAAM,CAACC,OAAP,GAAiBvB,0BAAjB"},"metadata":{},"sourceType":"script"}