{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n'use strict';\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar invariant = require('invariant');\n\nvar React = require('react');\n\nvar _require = require('relay-runtime'),\n    getObservableForActiveRequest = _require.__internal.getObservableForActiveRequest,\n    getSelector = _require.getSelector;\n\nvar useEffect = React.useEffect,\n    useState = React.useState,\n    useMemo = React.useMemo;\n\nfunction useIsOperationNodeActive(fragmentNode, fragmentRef) {\n  var environment = useRelayEnvironment();\n  var observable = useMemo(function () {\n    var selector = getSelector(fragmentNode, fragmentRef);\n\n    if (selector == null) {\n      return null;\n    }\n\n    !(selector.kind === 'SingularReaderSelector') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'useIsOperationNodeActive: Plural fragments are not supported.') : invariant(false) : void 0;\n    return getObservableForActiveRequest(environment, selector.owner);\n  }, [environment, fragmentNode, fragmentRef]);\n\n  var _useState = useState(observable != null),\n      isActive = _useState[0],\n      setIsActive = _useState[1];\n\n  useEffect(function () {\n    var subscription;\n    setIsActive(observable != null);\n\n    if (observable != null) {\n      var onCompleteOrError = function onCompleteOrError() {\n        setIsActive(false);\n      };\n\n      subscription = observable.subscribe({\n        complete: onCompleteOrError,\n        error: onCompleteOrError\n      });\n    }\n\n    return function () {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n  }, [observable]);\n  return isActive;\n}\n\nmodule.exports = useIsOperationNodeActive;","map":{"version":3,"names":["useRelayEnvironment","require","invariant","React","_require","getObservableForActiveRequest","__internal","getSelector","useEffect","useState","useMemo","useIsOperationNodeActive","fragmentNode","fragmentRef","environment","observable","selector","kind","process","env","NODE_ENV","owner","_useState","isActive","setIsActive","subscription","onCompleteOrError","subscribe","complete","error","unsubscribe","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/react-relay/lib/relay-hooks/useIsOperationNodeActive.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n'use strict';\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar invariant = require('invariant');\n\nvar React = require('react');\n\nvar _require = require('relay-runtime'),\n    getObservableForActiveRequest = _require.__internal.getObservableForActiveRequest,\n    getSelector = _require.getSelector;\n\nvar useEffect = React.useEffect,\n    useState = React.useState,\n    useMemo = React.useMemo;\n\nfunction useIsOperationNodeActive(fragmentNode, fragmentRef) {\n  var environment = useRelayEnvironment();\n  var observable = useMemo(function () {\n    var selector = getSelector(fragmentNode, fragmentRef);\n\n    if (selector == null) {\n      return null;\n    }\n\n    !(selector.kind === 'SingularReaderSelector') ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'useIsOperationNodeActive: Plural fragments are not supported.') : invariant(false) : void 0;\n    return getObservableForActiveRequest(environment, selector.owner);\n  }, [environment, fragmentNode, fragmentRef]);\n\n  var _useState = useState(observable != null),\n      isActive = _useState[0],\n      setIsActive = _useState[1];\n\n  useEffect(function () {\n    var subscription;\n    setIsActive(observable != null);\n\n    if (observable != null) {\n      var onCompleteOrError = function onCompleteOrError() {\n        setIsActive(false);\n      };\n\n      subscription = observable.subscribe({\n        complete: onCompleteOrError,\n        error: onCompleteOrError\n      });\n    }\n\n    return function () {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    };\n  }, [observable]);\n  return isActive;\n}\n\nmodule.exports = useIsOperationNodeActive;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,mBAAmB,GAAGC,OAAO,CAAC,uBAAD,CAAjC;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAIE,KAAK,GAAGF,OAAO,CAAC,OAAD,CAAnB;;AAEA,IAAIG,QAAQ,GAAGH,OAAO,CAAC,eAAD,CAAtB;AAAA,IACII,6BAA6B,GAAGD,QAAQ,CAACE,UAAT,CAAoBD,6BADxD;AAAA,IAEIE,WAAW,GAAGH,QAAQ,CAACG,WAF3B;;AAIA,IAAIC,SAAS,GAAGL,KAAK,CAACK,SAAtB;AAAA,IACIC,QAAQ,GAAGN,KAAK,CAACM,QADrB;AAAA,IAEIC,OAAO,GAAGP,KAAK,CAACO,OAFpB;;AAIA,SAASC,wBAAT,CAAkCC,YAAlC,EAAgDC,WAAhD,EAA6D;EAC3D,IAAIC,WAAW,GAAGd,mBAAmB,EAArC;EACA,IAAIe,UAAU,GAAGL,OAAO,CAAC,YAAY;IACnC,IAAIM,QAAQ,GAAGT,WAAW,CAACK,YAAD,EAAeC,WAAf,CAA1B;;IAEA,IAAIG,QAAQ,IAAI,IAAhB,EAAsB;MACpB,OAAO,IAAP;IACD;;IAED,EAAEA,QAAQ,CAACC,IAAT,KAAkB,wBAApB,IAAgDC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwClB,SAAS,CAAC,KAAD,EAAQ,+DAAR,CAAjD,GAA4HA,SAAS,CAAC,KAAD,CAArL,GAA+L,KAAK,CAApM;IACA,OAAOG,6BAA6B,CAACS,WAAD,EAAcE,QAAQ,CAACK,KAAvB,CAApC;EACD,CATuB,EASrB,CAACP,WAAD,EAAcF,YAAd,EAA4BC,WAA5B,CATqB,CAAxB;;EAWA,IAAIS,SAAS,GAAGb,QAAQ,CAACM,UAAU,IAAI,IAAf,CAAxB;EAAA,IACIQ,QAAQ,GAAGD,SAAS,CAAC,CAAD,CADxB;EAAA,IAEIE,WAAW,GAAGF,SAAS,CAAC,CAAD,CAF3B;;EAIAd,SAAS,CAAC,YAAY;IACpB,IAAIiB,YAAJ;IACAD,WAAW,CAACT,UAAU,IAAI,IAAf,CAAX;;IAEA,IAAIA,UAAU,IAAI,IAAlB,EAAwB;MACtB,IAAIW,iBAAiB,GAAG,SAASA,iBAAT,GAA6B;QACnDF,WAAW,CAAC,KAAD,CAAX;MACD,CAFD;;MAIAC,YAAY,GAAGV,UAAU,CAACY,SAAX,CAAqB;QAClCC,QAAQ,EAAEF,iBADwB;QAElCG,KAAK,EAAEH;MAF2B,CAArB,CAAf;IAID;;IAED,OAAO,YAAY;MACjB,IAAID,YAAJ,EAAkB;QAChBA,YAAY,CAACK,WAAb;MACD;IACF,CAJD;EAKD,CApBQ,EAoBN,CAACf,UAAD,CApBM,CAAT;EAqBA,OAAOQ,QAAP;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiBrB,wBAAjB"},"metadata":{},"sourceType":"script"}