{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('../query/GraphQLTag'),\n    getFragment = _require.getFragment;\n\nvar _require2 = require('./RelayModernSelector'),\n    getSelector = _require2.getSelector;\n\nvar invariant = require('invariant'); // When we call the user-supplied resolver function, it will in turn call\n// `readFragment`, but that's a global function -- it needs information\n// about what resolver is being executed, which is supplied by putting the\n// info on this stack before we call the resolver function.\n\n\nvar contextStack = [];\n\nfunction withResolverContext(context, cb) {\n  contextStack.push(context);\n\n  try {\n    return cb();\n  } finally {\n    contextStack.pop();\n  }\n} // NOTE: these declarations are copied from 'useFragment'; it would be good\n// to figure out how to share the same type signature between the two functions.\n// The declarations ensure that the type of the returned data is:\n//   - non-nullable if the provided ref type is non-nullable\n//   - nullable if the provided ref type is nullable\n//   - array of non-nullable if the provided ref type is an array of\n//     non-nullable refs\n//   - array of nullable if the provided ref type is an array of nullable refs\n\n\nfunction readFragment(fragmentInput, fragmentKey) {\n  if (!contextStack.length) {\n    throw new Error('readFragment should be called only from within a Relay Resolver function.');\n  }\n\n  var context = contextStack[contextStack.length - 1];\n  var fragmentNode = getFragment(fragmentInput);\n  var fragmentSelector = getSelector(fragmentNode, fragmentKey);\n  !(fragmentSelector != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Expected a selector for the fragment of the resolver \".concat(fragmentNode.name, \", but got null.\")) : invariant(false) : void 0;\n  !(fragmentSelector.kind === 'SingularReaderSelector') ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Expected a singular reader selector for the fragment of the resolver \".concat(fragmentNode.name, \", but it was plural.\")) : invariant(false) : void 0;\n\n  var _context$getDataForRe = context.getDataForResolverFragment(fragmentSelector, fragmentKey),\n      data = _context$getDataForRe.data,\n      isMissingData = _context$getDataForRe.isMissingData;\n\n  if (isMissingData) {\n    throw RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL;\n  }\n\n  return data;\n}\n\nvar RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL = {};\nmodule.exports = {\n  readFragment: readFragment,\n  withResolverContext: withResolverContext,\n  RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL: RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL\n};","map":{"version":3,"names":["_require","require","getFragment","_require2","getSelector","invariant","contextStack","withResolverContext","context","cb","push","pop","readFragment","fragmentInput","fragmentKey","length","Error","fragmentNode","fragmentSelector","process","env","NODE_ENV","concat","name","kind","_context$getDataForRe","getDataForResolverFragment","data","isMissingData","RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/relay-runtime/lib/store/ResolverFragments.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('../query/GraphQLTag'),\n    getFragment = _require.getFragment;\n\nvar _require2 = require('./RelayModernSelector'),\n    getSelector = _require2.getSelector;\n\nvar invariant = require('invariant'); // When we call the user-supplied resolver function, it will in turn call\n// `readFragment`, but that's a global function -- it needs information\n// about what resolver is being executed, which is supplied by putting the\n// info on this stack before we call the resolver function.\n\n\nvar contextStack = [];\n\nfunction withResolverContext(context, cb) {\n  contextStack.push(context);\n\n  try {\n    return cb();\n  } finally {\n    contextStack.pop();\n  }\n} // NOTE: these declarations are copied from 'useFragment'; it would be good\n// to figure out how to share the same type signature between the two functions.\n// The declarations ensure that the type of the returned data is:\n//   - non-nullable if the provided ref type is non-nullable\n//   - nullable if the provided ref type is nullable\n//   - array of non-nullable if the provided ref type is an array of\n//     non-nullable refs\n//   - array of nullable if the provided ref type is an array of nullable refs\n\n\nfunction readFragment(fragmentInput, fragmentKey) {\n  if (!contextStack.length) {\n    throw new Error('readFragment should be called only from within a Relay Resolver function.');\n  }\n\n  var context = contextStack[contextStack.length - 1];\n  var fragmentNode = getFragment(fragmentInput);\n  var fragmentSelector = getSelector(fragmentNode, fragmentKey);\n  !(fragmentSelector != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Expected a selector for the fragment of the resolver \".concat(fragmentNode.name, \", but got null.\")) : invariant(false) : void 0;\n  !(fragmentSelector.kind === 'SingularReaderSelector') ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Expected a singular reader selector for the fragment of the resolver \".concat(fragmentNode.name, \", but it was plural.\")) : invariant(false) : void 0;\n\n  var _context$getDataForRe = context.getDataForResolverFragment(fragmentSelector, fragmentKey),\n      data = _context$getDataForRe.data,\n      isMissingData = _context$getDataForRe.isMissingData;\n\n  if (isMissingData) {\n    throw RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL;\n  }\n\n  return data;\n}\n\nvar RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL = {};\nmodule.exports = {\n  readFragment: readFragment,\n  withResolverContext: withResolverContext,\n  RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL: RESOLVER_FRAGMENT_MISSING_DATA_SENTINEL\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB;AAAA,IACIC,WAAW,GAAGF,QAAQ,CAACE,WAD3B;;AAGA,IAAIC,SAAS,GAAGF,OAAO,CAAC,uBAAD,CAAvB;AAAA,IACIG,WAAW,GAAGD,SAAS,CAACC,WAD5B;;AAGA,IAAIC,SAAS,GAAGJ,OAAO,CAAC,WAAD,CAAvB,C,CAAsC;AACtC;AACA;AACA;;;AAGA,IAAIK,YAAY,GAAG,EAAnB;;AAEA,SAASC,mBAAT,CAA6BC,OAA7B,EAAsCC,EAAtC,EAA0C;EACxCH,YAAY,CAACI,IAAb,CAAkBF,OAAlB;;EAEA,IAAI;IACF,OAAOC,EAAE,EAAT;EACD,CAFD,SAEU;IACRH,YAAY,CAACK,GAAb;EACD;AACF,C,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,YAAT,CAAsBC,aAAtB,EAAqCC,WAArC,EAAkD;EAChD,IAAI,CAACR,YAAY,CAACS,MAAlB,EAA0B;IACxB,MAAM,IAAIC,KAAJ,CAAU,2EAAV,CAAN;EACD;;EAED,IAAIR,OAAO,GAAGF,YAAY,CAACA,YAAY,CAACS,MAAb,GAAsB,CAAvB,CAA1B;EACA,IAAIE,YAAY,GAAGf,WAAW,CAACW,aAAD,CAA9B;EACA,IAAIK,gBAAgB,GAAGd,WAAW,CAACa,YAAD,EAAeH,WAAf,CAAlC;EACA,EAAEI,gBAAgB,IAAI,IAAtB,IAA8BC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwChB,SAAS,CAAC,KAAD,EAAQ,wDAAwDiB,MAAxD,CAA+DL,YAAY,CAACM,IAA5E,EAAkF,iBAAlF,CAAR,CAAjD,GAAiKlB,SAAS,CAAC,KAAD,CAAxM,GAAkN,KAAK,CAAvN;EACA,EAAEa,gBAAgB,CAACM,IAAjB,KAA0B,wBAA5B,IAAwDL,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwChB,SAAS,CAAC,KAAD,EAAQ,wEAAwEiB,MAAxE,CAA+EL,YAAY,CAACM,IAA5F,EAAkG,sBAAlG,CAAR,CAAjD,GAAsLlB,SAAS,CAAC,KAAD,CAAvP,GAAiQ,KAAK,CAAtQ;;EAEA,IAAIoB,qBAAqB,GAAGjB,OAAO,CAACkB,0BAAR,CAAmCR,gBAAnC,EAAqDJ,WAArD,CAA5B;EAAA,IACIa,IAAI,GAAGF,qBAAqB,CAACE,IADjC;EAAA,IAEIC,aAAa,GAAGH,qBAAqB,CAACG,aAF1C;;EAIA,IAAIA,aAAJ,EAAmB;IACjB,MAAMC,uCAAN;EACD;;EAED,OAAOF,IAAP;AACD;;AAED,IAAIE,uCAAuC,GAAG,EAA9C;AACAC,MAAM,CAACC,OAAP,GAAiB;EACfnB,YAAY,EAAEA,YADC;EAEfL,mBAAmB,EAAEA,mBAFN;EAGfsB,uCAAuC,EAAEA;AAH1B,CAAjB"},"metadata":{},"sourceType":"script"}