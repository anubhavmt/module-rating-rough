{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar _require = require('react'),\n    useEffect = _require.useEffect,\n    useRef = _require.useRef;\n/**\n * This hook subscribes a callback to the invalidation state of the given data\n * ids.\n * Any time the invalidation state of the given data ids changes, the provided\n * callback will be called.\n * If new ids or a new callback are provided, the subscription will be\n * re-established and the previous one will be disposed.\n * The subscription will automatically be disposed on unmount\n */\n\n\nfunction useSubscribeToInvalidationState(dataIDs, callback) {\n  var environment = useRelayEnvironment();\n  var disposableRef = useRef(null);\n  var stableDataIDs = Array.from(dataIDs).sort().join('');\n  useEffect(function () {\n    var store = environment.getStore();\n    var invalidationState = store.lookupInvalidationState(dataIDs);\n    var disposable = store.subscribeToInvalidationState(invalidationState, callback);\n    disposableRef.current = disposable;\n    return function () {\n      return disposable.dispose();\n    }; // Intentionally excluding dataIDs, since we're using stableDataIDs\n    // instead\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableDataIDs, callback, environment]);\n  return {\n    dispose: function dispose() {\n      if (disposableRef.current != null) {\n        disposableRef.current.dispose();\n      }\n    }\n  };\n}\n\nmodule.exports = useSubscribeToInvalidationState;","map":{"version":3,"names":["useRelayEnvironment","require","_require","useEffect","useRef","useSubscribeToInvalidationState","dataIDs","callback","environment","disposableRef","stableDataIDs","Array","from","sort","join","store","getStore","invalidationState","lookupInvalidationState","disposable","subscribeToInvalidationState","current","dispose","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/react-relay/lib/relay-hooks/useSubscribeToInvalidationState.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar useRelayEnvironment = require('./useRelayEnvironment');\n\nvar _require = require('react'),\n    useEffect = _require.useEffect,\n    useRef = _require.useRef;\n/**\n * This hook subscribes a callback to the invalidation state of the given data\n * ids.\n * Any time the invalidation state of the given data ids changes, the provided\n * callback will be called.\n * If new ids or a new callback are provided, the subscription will be\n * re-established and the previous one will be disposed.\n * The subscription will automatically be disposed on unmount\n */\n\n\nfunction useSubscribeToInvalidationState(dataIDs, callback) {\n  var environment = useRelayEnvironment();\n  var disposableRef = useRef(null);\n  var stableDataIDs = Array.from(dataIDs).sort().join('');\n  useEffect(function () {\n    var store = environment.getStore();\n    var invalidationState = store.lookupInvalidationState(dataIDs);\n    var disposable = store.subscribeToInvalidationState(invalidationState, callback);\n    disposableRef.current = disposable;\n    return function () {\n      return disposable.dispose();\n    }; // Intentionally excluding dataIDs, since we're using stableDataIDs\n    // instead\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [stableDataIDs, callback, environment]);\n  return {\n    dispose: function dispose() {\n      if (disposableRef.current != null) {\n        disposableRef.current.dispose();\n      }\n    }\n  };\n}\n\nmodule.exports = useSubscribeToInvalidationState;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,mBAAmB,GAAGC,OAAO,CAAC,uBAAD,CAAjC;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,OAAD,CAAtB;AAAA,IACIE,SAAS,GAAGD,QAAQ,CAACC,SADzB;AAAA,IAEIC,MAAM,GAAGF,QAAQ,CAACE,MAFtB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASC,+BAAT,CAAyCC,OAAzC,EAAkDC,QAAlD,EAA4D;EAC1D,IAAIC,WAAW,GAAGR,mBAAmB,EAArC;EACA,IAAIS,aAAa,GAAGL,MAAM,CAAC,IAAD,CAA1B;EACA,IAAIM,aAAa,GAAGC,KAAK,CAACC,IAAN,CAAWN,OAAX,EAAoBO,IAApB,GAA2BC,IAA3B,CAAgC,EAAhC,CAApB;EACAX,SAAS,CAAC,YAAY;IACpB,IAAIY,KAAK,GAAGP,WAAW,CAACQ,QAAZ,EAAZ;IACA,IAAIC,iBAAiB,GAAGF,KAAK,CAACG,uBAAN,CAA8BZ,OAA9B,CAAxB;IACA,IAAIa,UAAU,GAAGJ,KAAK,CAACK,4BAAN,CAAmCH,iBAAnC,EAAsDV,QAAtD,CAAjB;IACAE,aAAa,CAACY,OAAd,GAAwBF,UAAxB;IACA,OAAO,YAAY;MACjB,OAAOA,UAAU,CAACG,OAAX,EAAP;IACD,CAFD,CALoB,CAOjB;IACH;IACA;EACD,CAVQ,EAUN,CAACZ,aAAD,EAAgBH,QAAhB,EAA0BC,WAA1B,CAVM,CAAT;EAWA,OAAO;IACLc,OAAO,EAAE,SAASA,OAAT,GAAmB;MAC1B,IAAIb,aAAa,CAACY,OAAd,IAAyB,IAA7B,EAAmC;QACjCZ,aAAa,CAACY,OAAd,CAAsBC,OAAtB;MACD;IACF;EALI,CAAP;AAOD;;AAEDC,MAAM,CAACC,OAAP,GAAiBnB,+BAAjB"},"metadata":{},"sourceType":"script"}