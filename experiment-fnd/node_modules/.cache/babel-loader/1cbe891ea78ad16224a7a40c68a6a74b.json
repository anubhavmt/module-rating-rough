{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar profileHandlersByName = {};\nvar defaultProfiler = {\n  stop: function stop() {}\n};\n/**\n * @public\n *\n * Instruments methods to allow profiling various parts of Relay. Profiling code\n * in Relay consists of three steps:\n *\n *  - Instrument the function to be profiled.\n *  - Attach handlers to the instrumented function.\n *  - Run the code which triggers the handlers.\n *\n * Handlers attached to instrumented methods are called with an instrumentation\n * name and a callback that must be synchronously executed:\n *\n *   instrumentedMethod.attachHandler(function(name, callback) {\n *     const start = performance.now();\n *     callback();\n *     console.log('Duration', performance.now() - start);\n *   });\n *\n * Handlers for profiles are callbacks that return a stop method:\n *\n *   RelayProfiler.attachProfileHandler('profileName', (name, state) => {\n *     const start = performance.now();\n *     return function stop(name, state) {\n *       console.log(`Duration (${name})`, performance.now() - start);\n *     }\n *   });\n */\n\nvar RelayProfiler = {\n  /**\n   * Instruments profiling for arbitrarily asynchronous code by a name.\n   *\n   *   const timerProfiler = RelayProfiler.profile('timeout');\n   *   setTimeout(function() {\n   *     timerProfiler.stop();\n   *   }, 1000);\n   *\n   *   RelayProfiler.attachProfileHandler('timeout', ...);\n   *\n   * Arbitrary state can also be passed into `profile` as a second argument. The\n   * attached profile handlers will receive this as the second argument.\n   */\n  profile: function profile(name, state) {\n    var handlers = profileHandlersByName[name];\n\n    if (handlers && handlers.length > 0) {\n      var stopHandlers = [];\n\n      for (var ii = handlers.length - 1; ii >= 0; ii--) {\n        var stopHandler = handlers[ii](name, state);\n        stopHandlers.unshift(stopHandler);\n      }\n\n      return {\n        stop: function stop(error) {\n          stopHandlers.forEach(function (stopHandler) {\n            return stopHandler(error);\n          });\n        }\n      };\n    }\n\n    return defaultProfiler;\n  },\n\n  /**\n   * Attaches a handler to profiles with the supplied name.\n   */\n  attachProfileHandler: function attachProfileHandler(name, handler) {\n    if (!profileHandlersByName.hasOwnProperty(name)) {\n      profileHandlersByName[name] = [];\n    }\n\n    profileHandlersByName[name].push(handler);\n  },\n\n  /**\n   * Detaches a handler attached via `attachProfileHandler`.\n   */\n  detachProfileHandler: function detachProfileHandler(name, handler) {\n    if (profileHandlersByName.hasOwnProperty(name)) {\n      removeFromArray(profileHandlersByName[name], handler);\n    }\n  }\n};\n\nfunction removeFromArray(array, element) {\n  var index = array.indexOf(element);\n\n  if (index !== -1) {\n    array.splice(index, 1);\n  }\n}\n\nmodule.exports = RelayProfiler;","map":{"version":3,"names":["profileHandlersByName","defaultProfiler","stop","RelayProfiler","profile","name","state","handlers","length","stopHandlers","ii","stopHandler","unshift","error","forEach","attachProfileHandler","handler","hasOwnProperty","push","detachProfileHandler","removeFromArray","array","element","index","indexOf","splice","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/relay-runtime/lib/util/RelayProfiler.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar profileHandlersByName = {};\nvar defaultProfiler = {\n  stop: function stop() {}\n};\n/**\n * @public\n *\n * Instruments methods to allow profiling various parts of Relay. Profiling code\n * in Relay consists of three steps:\n *\n *  - Instrument the function to be profiled.\n *  - Attach handlers to the instrumented function.\n *  - Run the code which triggers the handlers.\n *\n * Handlers attached to instrumented methods are called with an instrumentation\n * name and a callback that must be synchronously executed:\n *\n *   instrumentedMethod.attachHandler(function(name, callback) {\n *     const start = performance.now();\n *     callback();\n *     console.log('Duration', performance.now() - start);\n *   });\n *\n * Handlers for profiles are callbacks that return a stop method:\n *\n *   RelayProfiler.attachProfileHandler('profileName', (name, state) => {\n *     const start = performance.now();\n *     return function stop(name, state) {\n *       console.log(`Duration (${name})`, performance.now() - start);\n *     }\n *   });\n */\n\nvar RelayProfiler = {\n  /**\n   * Instruments profiling for arbitrarily asynchronous code by a name.\n   *\n   *   const timerProfiler = RelayProfiler.profile('timeout');\n   *   setTimeout(function() {\n   *     timerProfiler.stop();\n   *   }, 1000);\n   *\n   *   RelayProfiler.attachProfileHandler('timeout', ...);\n   *\n   * Arbitrary state can also be passed into `profile` as a second argument. The\n   * attached profile handlers will receive this as the second argument.\n   */\n  profile: function profile(name, state) {\n    var handlers = profileHandlersByName[name];\n\n    if (handlers && handlers.length > 0) {\n      var stopHandlers = [];\n\n      for (var ii = handlers.length - 1; ii >= 0; ii--) {\n        var stopHandler = handlers[ii](name, state);\n        stopHandlers.unshift(stopHandler);\n      }\n\n      return {\n        stop: function stop(error) {\n          stopHandlers.forEach(function (stopHandler) {\n            return stopHandler(error);\n          });\n        }\n      };\n    }\n\n    return defaultProfiler;\n  },\n\n  /**\n   * Attaches a handler to profiles with the supplied name.\n   */\n  attachProfileHandler: function attachProfileHandler(name, handler) {\n    if (!profileHandlersByName.hasOwnProperty(name)) {\n      profileHandlersByName[name] = [];\n    }\n\n    profileHandlersByName[name].push(handler);\n  },\n\n  /**\n   * Detaches a handler attached via `attachProfileHandler`.\n   */\n  detachProfileHandler: function detachProfileHandler(name, handler) {\n    if (profileHandlersByName.hasOwnProperty(name)) {\n      removeFromArray(profileHandlersByName[name], handler);\n    }\n  }\n};\n\nfunction removeFromArray(array, element) {\n  var index = array.indexOf(element);\n\n  if (index !== -1) {\n    array.splice(index, 1);\n  }\n}\n\nmodule.exports = RelayProfiler;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,qBAAqB,GAAG,EAA5B;AACA,IAAIC,eAAe,GAAG;EACpBC,IAAI,EAAE,SAASA,IAAT,GAAgB,CAAE;AADJ,CAAtB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,aAAa,GAAG;EAClB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,OAAO,EAAE,SAASA,OAAT,CAAiBC,IAAjB,EAAuBC,KAAvB,EAA8B;IACrC,IAAIC,QAAQ,GAAGP,qBAAqB,CAACK,IAAD,CAApC;;IAEA,IAAIE,QAAQ,IAAIA,QAAQ,CAACC,MAAT,GAAkB,CAAlC,EAAqC;MACnC,IAAIC,YAAY,GAAG,EAAnB;;MAEA,KAAK,IAAIC,EAAE,GAAGH,QAAQ,CAACC,MAAT,GAAkB,CAAhC,EAAmCE,EAAE,IAAI,CAAzC,EAA4CA,EAAE,EAA9C,EAAkD;QAChD,IAAIC,WAAW,GAAGJ,QAAQ,CAACG,EAAD,CAAR,CAAaL,IAAb,EAAmBC,KAAnB,CAAlB;QACAG,YAAY,CAACG,OAAb,CAAqBD,WAArB;MACD;;MAED,OAAO;QACLT,IAAI,EAAE,SAASA,IAAT,CAAcW,KAAd,EAAqB;UACzBJ,YAAY,CAACK,OAAb,CAAqB,UAAUH,WAAV,EAAuB;YAC1C,OAAOA,WAAW,CAACE,KAAD,CAAlB;UACD,CAFD;QAGD;MALI,CAAP;IAOD;;IAED,OAAOZ,eAAP;EACD,CAnCiB;;EAqClB;AACF;AACA;EACEc,oBAAoB,EAAE,SAASA,oBAAT,CAA8BV,IAA9B,EAAoCW,OAApC,EAA6C;IACjE,IAAI,CAAChB,qBAAqB,CAACiB,cAAtB,CAAqCZ,IAArC,CAAL,EAAiD;MAC/CL,qBAAqB,CAACK,IAAD,CAArB,GAA8B,EAA9B;IACD;;IAEDL,qBAAqB,CAACK,IAAD,CAArB,CAA4Ba,IAA5B,CAAiCF,OAAjC;EACD,CA9CiB;;EAgDlB;AACF;AACA;EACEG,oBAAoB,EAAE,SAASA,oBAAT,CAA8Bd,IAA9B,EAAoCW,OAApC,EAA6C;IACjE,IAAIhB,qBAAqB,CAACiB,cAAtB,CAAqCZ,IAArC,CAAJ,EAAgD;MAC9Ce,eAAe,CAACpB,qBAAqB,CAACK,IAAD,CAAtB,EAA8BW,OAA9B,CAAf;IACD;EACF;AAvDiB,CAApB;;AA0DA,SAASI,eAAT,CAAyBC,KAAzB,EAAgCC,OAAhC,EAAyC;EACvC,IAAIC,KAAK,GAAGF,KAAK,CAACG,OAAN,CAAcF,OAAd,CAAZ;;EAEA,IAAIC,KAAK,KAAK,CAAC,CAAf,EAAkB;IAChBF,KAAK,CAACI,MAAN,CAAaF,KAAb,EAAoB,CAApB;EACD;AACF;;AAEDG,MAAM,CAACC,OAAP,GAAiBxB,aAAjB"},"metadata":{},"sourceType":"script"}