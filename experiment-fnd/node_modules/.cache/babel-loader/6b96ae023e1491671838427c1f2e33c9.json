{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar stableCopy = require('../util/stableCopy');\n\nvar invariant = require('invariant');\n/**\n * A cache for storing query responses, featuring:\n * - `get` with TTL\n * - cache size limiting, with least-recently *updated* entries purged first\n */\n\n\nvar RelayQueryResponseCache = /*#__PURE__*/function () {\n  function RelayQueryResponseCache(_ref) {\n    var size = _ref.size,\n        ttl = _ref.ttl;\n    !(size > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayQueryResponseCache: Expected the max cache size to be > 0, got ' + '`%s`.', size) : invariant(false) : void 0;\n    !(ttl > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayQueryResponseCache: Expected the max ttl to be > 0, got `%s`.', ttl) : invariant(false) : void 0;\n    this._responses = new Map();\n    this._size = size;\n    this._ttl = ttl;\n  }\n\n  var _proto = RelayQueryResponseCache.prototype;\n\n  _proto.clear = function clear() {\n    this._responses.clear();\n  };\n\n  _proto.get = function get(queryID, variables) {\n    var _this = this;\n\n    var cacheKey = getCacheKey(queryID, variables);\n\n    this._responses.forEach(function (response, key) {\n      if (!isCurrent(response.fetchTime, _this._ttl)) {\n        _this._responses[\"delete\"](key);\n      }\n    });\n\n    var response = this._responses.get(cacheKey);\n\n    if (response == null) {\n      return null;\n    }\n\n    if (Array.isArray(response.payload)) {\n      return response.payload.map(function (payload) {\n        return (// $FlowFixMe[incompatible-cast]\n          (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, payload), {}, {\n            extensions: (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, payload.extensions), {}, {\n              cacheTimestamp: response.fetchTime\n            })\n          })\n        );\n      });\n    } // $FlowFixMe[incompatible-cast]\n\n\n    return (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, response.payload), {}, {\n      extensions: (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, response.payload.extensions), {}, {\n        cacheTimestamp: response.fetchTime\n      })\n    });\n  };\n\n  _proto.set = function set(queryID, variables, payload) {\n    var fetchTime = Date.now();\n    var cacheKey = getCacheKey(queryID, variables);\n\n    this._responses[\"delete\"](cacheKey); // deletion resets key ordering\n\n\n    this._responses.set(cacheKey, {\n      fetchTime: fetchTime,\n      payload: payload\n    }); // Purge least-recently updated key when max size reached\n\n\n    if (this._responses.size > this._size) {\n      var firstKey = this._responses.keys().next();\n\n      if (!firstKey.done) {\n        this._responses[\"delete\"](firstKey.value);\n      }\n    }\n  };\n\n  return RelayQueryResponseCache;\n}();\n\nfunction getCacheKey(queryID, variables) {\n  return JSON.stringify(stableCopy({\n    queryID: queryID,\n    variables: variables\n  }));\n}\n/**\n * Determine whether a response fetched at `fetchTime` is still valid given\n * some `ttl`.\n */\n\n\nfunction isCurrent(fetchTime, ttl) {\n  return fetchTime + ttl >= Date.now();\n}\n\nmodule.exports = RelayQueryResponseCache;","map":{"version":3,"names":["_interopRequireDefault","require","_objectSpread2","stableCopy","invariant","RelayQueryResponseCache","_ref","size","ttl","process","env","NODE_ENV","_responses","Map","_size","_ttl","_proto","prototype","clear","get","queryID","variables","_this","cacheKey","getCacheKey","forEach","response","key","isCurrent","fetchTime","Array","isArray","payload","map","extensions","cacheTimestamp","set","Date","now","firstKey","keys","next","done","value","JSON","stringify","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/relay-runtime/lib/network/RelayQueryResponseCache.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread2\"));\n\nvar stableCopy = require('../util/stableCopy');\n\nvar invariant = require('invariant');\n\n/**\n * A cache for storing query responses, featuring:\n * - `get` with TTL\n * - cache size limiting, with least-recently *updated* entries purged first\n */\nvar RelayQueryResponseCache = /*#__PURE__*/function () {\n  function RelayQueryResponseCache(_ref) {\n    var size = _ref.size,\n        ttl = _ref.ttl;\n    !(size > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayQueryResponseCache: Expected the max cache size to be > 0, got ' + '`%s`.', size) : invariant(false) : void 0;\n    !(ttl > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayQueryResponseCache: Expected the max ttl to be > 0, got `%s`.', ttl) : invariant(false) : void 0;\n    this._responses = new Map();\n    this._size = size;\n    this._ttl = ttl;\n  }\n\n  var _proto = RelayQueryResponseCache.prototype;\n\n  _proto.clear = function clear() {\n    this._responses.clear();\n  };\n\n  _proto.get = function get(queryID, variables) {\n    var _this = this;\n\n    var cacheKey = getCacheKey(queryID, variables);\n\n    this._responses.forEach(function (response, key) {\n      if (!isCurrent(response.fetchTime, _this._ttl)) {\n        _this._responses[\"delete\"](key);\n      }\n    });\n\n    var response = this._responses.get(cacheKey);\n\n    if (response == null) {\n      return null;\n    }\n\n    if (Array.isArray(response.payload)) {\n      return response.payload.map(function (payload) {\n        return (// $FlowFixMe[incompatible-cast]\n          (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, payload), {}, {\n            extensions: (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, payload.extensions), {}, {\n              cacheTimestamp: response.fetchTime\n            })\n          })\n        );\n      });\n    } // $FlowFixMe[incompatible-cast]\n\n\n    return (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, response.payload), {}, {\n      extensions: (0, _objectSpread2[\"default\"])((0, _objectSpread2[\"default\"])({}, response.payload.extensions), {}, {\n        cacheTimestamp: response.fetchTime\n      })\n    });\n  };\n\n  _proto.set = function set(queryID, variables, payload) {\n    var fetchTime = Date.now();\n    var cacheKey = getCacheKey(queryID, variables);\n\n    this._responses[\"delete\"](cacheKey); // deletion resets key ordering\n\n\n    this._responses.set(cacheKey, {\n      fetchTime: fetchTime,\n      payload: payload\n    }); // Purge least-recently updated key when max size reached\n\n\n    if (this._responses.size > this._size) {\n      var firstKey = this._responses.keys().next();\n\n      if (!firstKey.done) {\n        this._responses[\"delete\"](firstKey.value);\n      }\n    }\n  };\n\n  return RelayQueryResponseCache;\n}();\n\nfunction getCacheKey(queryID, variables) {\n  return JSON.stringify(stableCopy({\n    queryID: queryID,\n    variables: variables\n  }));\n}\n/**\n * Determine whether a response fetched at `fetchTime` is still valid given\n * some `ttl`.\n */\n\n\nfunction isCurrent(fetchTime, ttl) {\n  return fetchTime + ttl >= Date.now();\n}\n\nmodule.exports = RelayQueryResponseCache;"],"mappings":"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"},"metadata":{},"sourceType":"script"}