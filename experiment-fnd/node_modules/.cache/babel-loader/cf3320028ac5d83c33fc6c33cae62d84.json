{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar isRelayEnvironment = require('./isRelayEnvironment');\n\nvar invariant = require('invariant');\n/**\n * Asserts that the input is a matches the `RelayContext` type defined in\n * `RelayEnvironmentTypes` and returns it as that type.\n */\n\n\nfunction assertRelayContext(relay) {\n  !isRelayContext(relay) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayContext: Expected `context.relay` to be an object conforming to ' + 'the `RelayContext` interface, got `%s`.', relay) : invariant(false) : void 0;\n  return relay;\n}\n/**\n * Determine if the input is a plain object that matches the `RelayContext`\n * type defined in `RelayEnvironmentTypes`.\n */\n\n\nfunction isRelayContext(context) {\n  return typeof context === 'object' && context !== null && !Array.isArray(context) && isRelayEnvironment(context.environment);\n}\n\nmodule.exports = {\n  assertRelayContext: assertRelayContext,\n  isRelayContext: isRelayContext\n};","map":{"version":3,"names":["isRelayEnvironment","require","invariant","assertRelayContext","relay","isRelayContext","process","env","NODE_ENV","context","Array","isArray","environment","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/react-relay/lib/RelayContext.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar isRelayEnvironment = require('./isRelayEnvironment');\n\nvar invariant = require('invariant');\n/**\n * Asserts that the input is a matches the `RelayContext` type defined in\n * `RelayEnvironmentTypes` and returns it as that type.\n */\n\n\nfunction assertRelayContext(relay) {\n  !isRelayContext(relay) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'RelayContext: Expected `context.relay` to be an object conforming to ' + 'the `RelayContext` interface, got `%s`.', relay) : invariant(false) : void 0;\n  return relay;\n}\n/**\n * Determine if the input is a plain object that matches the `RelayContext`\n * type defined in `RelayEnvironmentTypes`.\n */\n\n\nfunction isRelayContext(context) {\n  return typeof context === 'object' && context !== null && !Array.isArray(context) && isRelayEnvironment(context.environment);\n}\n\nmodule.exports = {\n  assertRelayContext: assertRelayContext,\n  isRelayContext: isRelayContext\n};"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,kBAAkB,GAAGC,OAAO,CAAC,sBAAD,CAAhC;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAvB;AACA;AACA;AACA;AACA;;;AAGA,SAASE,kBAAT,CAA4BC,KAA5B,EAAmC;EACjC,CAACC,cAAc,CAACD,KAAD,CAAf,GAAyBE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCN,SAAS,CAAC,KAAD,EAAQ,0EAA0E,yCAAlF,EAA6HE,KAA7H,CAAjD,GAAuLF,SAAS,CAAC,KAAD,CAAzN,GAAmO,KAAK,CAAxO;EACA,OAAOE,KAAP;AACD;AACD;AACA;AACA;AACA;;;AAGA,SAASC,cAAT,CAAwBI,OAAxB,EAAiC;EAC/B,OAAO,OAAOA,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA3C,IAAmD,CAACC,KAAK,CAACC,OAAN,CAAcF,OAAd,CAApD,IAA8ET,kBAAkB,CAACS,OAAO,CAACG,WAAT,CAAvG;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;EACfX,kBAAkB,EAAEA,kBADL;EAEfE,cAAc,EAAEA;AAFD,CAAjB"},"metadata":{},"sourceType":"script"}