{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @emails oncall+relay\n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar _require = require('../store/RelayStoreUtils'),\n    getArgumentValues = _require.getArgumentValues;\n\nvar nonUpdatableKeys = ['id', '__id', '__typename', 'js'];\n\nfunction createUpdatableProxy(updatableProxyRootRecord, variables, selections, recordSourceProxy) {\n  var mutableUpdatableProxy = {};\n  updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selections, recordSourceProxy);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    Object.freeze(mutableUpdatableProxy);\n  } // unless ReaderSelection carries more type information, we will never be able\n  // to flowtype mutableUpdatableProxy without a type assertion.\n  // $FlowFixMe[unclear-type]\n\n\n  return mutableUpdatableProxy;\n}\n\nfunction updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selections, recordSourceProxy) {\n  var _selection$alias3;\n\n  var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(selections),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var selection = _step.value;\n\n      switch (selection.kind) {\n        case 'LinkedField':\n          if (selection.plural) {\n            Object.defineProperty(mutableUpdatableProxy, (_selection$alias = selection.alias) !== null && _selection$alias !== void 0 ? _selection$alias : selection.name, {\n              // $FlowFixMe[incompatible-call] these getters and setters have different types on purpose\n              get: createGetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy),\n              set: createSetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy)\n            });\n          } else {\n            Object.defineProperty(mutableUpdatableProxy, (_selection$alias2 = selection.alias) !== null && _selection$alias2 !== void 0 ? _selection$alias2 : selection.name, {\n              get: createGetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy),\n              set: createSetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy)\n            });\n          }\n\n          break;\n\n        case 'ScalarField':\n          var scalarFieldName = (_selection$alias3 = selection.alias) !== null && _selection$alias3 !== void 0 ? _selection$alias3 : selection.name;\n          Object.defineProperty(mutableUpdatableProxy, scalarFieldName, {\n            get: function get() {\n              var _selection$args;\n\n              var newVariables = getArgumentValues((_selection$args = selection.args) !== null && _selection$args !== void 0 ? _selection$args : [], variables); // Flow incorrect assumes that the return value for the get method must match\n              // the set parameter.\n\n              return updatableProxyRootRecord.getValue(selection.name, newVariables // $FlowFixMe[unclear-type] Typed by the generated updatable query flow type\n              );\n            },\n            set: nonUpdatableKeys.includes(selection.name) ? undefined : // $FlowFixMe[unclear-type] Typed by the generated updatable query flow type\n            function (newValue) {\n              var _selection$args2;\n\n              var newVariables = getArgumentValues((_selection$args2 = selection.args) !== null && _selection$args2 !== void 0 ? _selection$args2 : [], variables);\n              updatableProxyRootRecord.setValue(newValue, selection.name, newVariables);\n            }\n          });\n          break;\n\n        case 'InlineFragment':\n          if (updatableProxyRootRecord.getType() === selection.type) {\n            updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selection.selections, recordSourceProxy);\n          }\n\n          break;\n\n        case 'ClientExtension':\n          updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selection.selections, recordSourceProxy);\n          break;\n\n        case 'FragmentSpread':\n          // Explicitly ignore\n          break;\n\n        default:\n          throw new Error('Encountered an unexpected ReaderSelection variant in RelayRecordSourceProxy. This indicates a bug in Relay.');\n      }\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _selection$alias;\n\n      var _selection$alias2;\n\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nfunction createSetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy) {\n  return function set(newValue) {\n    var _selection$args3;\n\n    var newVariables = getArgumentValues((_selection$args3 = selection.args) !== null && _selection$args3 !== void 0 ? _selection$args3 : [], variables);\n\n    if (newValue == null) {\n      throw new Error('Do not assign null to plural linked fields; assign an empty array instead.');\n    } else {\n      var recordProxies = newValue.map(function (item) {\n        if (item == null) {\n          throw new Error('When assigning an array of items, none of the items should be null or undefined.');\n        }\n\n        var __id = item.__id;\n\n        if (__id == null) {\n          throw new Error('The __id field must be present on each item passed to the setter. This indicates a bug in Relay.');\n        }\n\n        var newValueRecord = recordSourceProxy.get(__id);\n\n        if (newValueRecord == null) {\n          throw new Error(\"Did not find item with data id \".concat(__id, \" in the store.\"));\n        }\n\n        return newValueRecord;\n      });\n      updatableProxyRootRecord.setLinkedRecords(recordProxies, selection.name, newVariables);\n    }\n  };\n}\n\nfunction createSetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy) {\n  return function set(newValue) {\n    var _selection$args4;\n\n    var newVariables = getArgumentValues((_selection$args4 = selection.args) !== null && _selection$args4 !== void 0 ? _selection$args4 : [], variables);\n\n    if (newValue == null) {\n      updatableProxyRootRecord.setValue(newValue, selection.name, newVariables);\n    } else {\n      var __id = newValue.__id;\n\n      if (__id == null) {\n        throw new Error('The __id field must be present on the argument. This indicates a bug in Relay.');\n      }\n\n      var newValueRecord = recordSourceProxy.get(__id);\n\n      if (newValueRecord == null) {\n        throw new Error(\"Did not find item with data id \".concat(__id, \" in the store.\"));\n      }\n\n      updatableProxyRootRecord.setLinkedRecord(newValueRecord, selection.name, newVariables);\n    }\n  };\n}\n\nfunction createGetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy) {\n  return function () {\n    var _selection$args5;\n\n    var newVariables = getArgumentValues((_selection$args5 = selection.args) !== null && _selection$args5 !== void 0 ? _selection$args5 : [], variables);\n    var linkedRecords = updatableProxyRootRecord.getLinkedRecords(selection.name, newVariables);\n\n    if (linkedRecords != null) {\n      return linkedRecords.map(function (linkedRecord) {\n        if (linkedRecord != null) {\n          var updatableProxy = {};\n          updateProxyFromSelections(updatableProxy, linkedRecord, variables, selection.selections, recordSourceProxy);\n\n          if (process.env.NODE_ENV !== \"production\") {\n            Object.freeze(updatableProxy);\n          } // Flow incorrect assumes that the return value for the get method must match\n          // the set parameter.\n          // $FlowFixMe[unclear-type] Typed by the generated updatable query flow type\n\n\n          return updatableProxy;\n        } else {\n          return linkedRecord;\n        } // $FlowFixMe[unclear-type] Typed by the generated updatable query flow type\n\n      });\n    } else {\n      return linkedRecords;\n    }\n  };\n}\n\nfunction createGetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy) {\n  return function () {\n    var _selection$args6;\n\n    var newVariables = getArgumentValues((_selection$args6 = selection.args) !== null && _selection$args6 !== void 0 ? _selection$args6 : [], variables);\n    var linkedRecord = updatableProxyRootRecord.getLinkedRecord(selection.name, newVariables);\n\n    if (linkedRecord != null) {\n      var updatableProxy = {};\n      updateProxyFromSelections(updatableProxy, linkedRecord, variables, selection.selections, recordSourceProxy);\n\n      if (process.env.NODE_ENV !== \"production\") {\n        Object.freeze(updatableProxy);\n      } // Flow incorrect assumes that the return value for the get method must match\n      // the set parameter.\n      // $FlowFixMe[unclear-type] Typed by the generated updatable query flow type\n\n\n      return updatableProxy;\n    } else {\n      return linkedRecord;\n    }\n  };\n}\n\nmodule.exports = {\n  createUpdatableProxy: createUpdatableProxy\n};","map":{"version":3,"names":["_interopRequireDefault","require","_createForOfIteratorHelper2","_require","getArgumentValues","nonUpdatableKeys","createUpdatableProxy","updatableProxyRootRecord","variables","selections","recordSourceProxy","mutableUpdatableProxy","updateProxyFromSelections","process","env","NODE_ENV","Object","freeze","_selection$alias3","_iterator","_step","_loop","selection","value","kind","plural","defineProperty","_selection$alias","alias","name","get","createGetterForPluralLinkedField","set","createSetterForPluralLinkedField","_selection$alias2","createGetterForSingularLinkedField","createSetterForSingularLinkedField","scalarFieldName","_selection$args","newVariables","args","getValue","includes","undefined","newValue","_selection$args2","setValue","getType","type","Error","s","n","done","err","e","f","_selection$args3","recordProxies","map","item","__id","newValueRecord","concat","setLinkedRecords","_selection$args4","setLinkedRecord","_selection$args5","linkedRecords","getLinkedRecords","linkedRecord","updatableProxy","_selection$args6","getLinkedRecord","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/relay-runtime/lib/mutations/createUpdatableProxy.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @emails oncall+relay\n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar _require = require('../store/RelayStoreUtils'),\n    getArgumentValues = _require.getArgumentValues;\n\nvar nonUpdatableKeys = ['id', '__id', '__typename', 'js'];\n\nfunction createUpdatableProxy(updatableProxyRootRecord, variables, selections, recordSourceProxy) {\n  var mutableUpdatableProxy = {};\n  updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selections, recordSourceProxy);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    Object.freeze(mutableUpdatableProxy);\n  } // unless ReaderSelection carries more type information, we will never be able\n  // to flowtype mutableUpdatableProxy without a type assertion.\n  // $FlowFixMe[unclear-type]\n\n\n  return mutableUpdatableProxy;\n}\n\nfunction updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selections, recordSourceProxy) {\n  var _selection$alias3;\n\n  var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(selections),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var selection = _step.value;\n\n      switch (selection.kind) {\n        case 'LinkedField':\n          if (selection.plural) {\n            Object.defineProperty(mutableUpdatableProxy, (_selection$alias = selection.alias) !== null && _selection$alias !== void 0 ? _selection$alias : selection.name, {\n              // $FlowFixMe[incompatible-call] these getters and setters have different types on purpose\n              get: createGetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy),\n              set: createSetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy)\n            });\n          } else {\n            Object.defineProperty(mutableUpdatableProxy, (_selection$alias2 = selection.alias) !== null && _selection$alias2 !== void 0 ? _selection$alias2 : selection.name, {\n              get: createGetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy),\n              set: createSetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy)\n            });\n          }\n\n          break;\n\n        case 'ScalarField':\n          var scalarFieldName = (_selection$alias3 = selection.alias) !== null && _selection$alias3 !== void 0 ? _selection$alias3 : selection.name;\n          Object.defineProperty(mutableUpdatableProxy, scalarFieldName, {\n            get: function get() {\n              var _selection$args;\n\n              var newVariables = getArgumentValues((_selection$args = selection.args) !== null && _selection$args !== void 0 ? _selection$args : [], variables); // Flow incorrect assumes that the return value for the get method must match\n              // the set parameter.\n\n              return updatableProxyRootRecord.getValue(selection.name, newVariables // $FlowFixMe[unclear-type] Typed by the generated updatable query flow type\n              );\n            },\n            set: nonUpdatableKeys.includes(selection.name) ? undefined : // $FlowFixMe[unclear-type] Typed by the generated updatable query flow type\n            function (newValue) {\n              var _selection$args2;\n\n              var newVariables = getArgumentValues((_selection$args2 = selection.args) !== null && _selection$args2 !== void 0 ? _selection$args2 : [], variables);\n              updatableProxyRootRecord.setValue(newValue, selection.name, newVariables);\n            }\n          });\n          break;\n\n        case 'InlineFragment':\n          if (updatableProxyRootRecord.getType() === selection.type) {\n            updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selection.selections, recordSourceProxy);\n          }\n\n          break;\n\n        case 'ClientExtension':\n          updateProxyFromSelections(mutableUpdatableProxy, updatableProxyRootRecord, variables, selection.selections, recordSourceProxy);\n          break;\n\n        case 'FragmentSpread':\n          // Explicitly ignore\n          break;\n\n        default:\n          throw new Error('Encountered an unexpected ReaderSelection variant in RelayRecordSourceProxy. This indicates a bug in Relay.');\n      }\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _selection$alias;\n\n      var _selection$alias2;\n\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nfunction createSetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy) {\n  return function set(newValue) {\n    var _selection$args3;\n\n    var newVariables = getArgumentValues((_selection$args3 = selection.args) !== null && _selection$args3 !== void 0 ? _selection$args3 : [], variables);\n\n    if (newValue == null) {\n      throw new Error('Do not assign null to plural linked fields; assign an empty array instead.');\n    } else {\n      var recordProxies = newValue.map(function (item) {\n        if (item == null) {\n          throw new Error('When assigning an array of items, none of the items should be null or undefined.');\n        }\n\n        var __id = item.__id;\n\n        if (__id == null) {\n          throw new Error('The __id field must be present on each item passed to the setter. This indicates a bug in Relay.');\n        }\n\n        var newValueRecord = recordSourceProxy.get(__id);\n\n        if (newValueRecord == null) {\n          throw new Error(\"Did not find item with data id \".concat(__id, \" in the store.\"));\n        }\n\n        return newValueRecord;\n      });\n      updatableProxyRootRecord.setLinkedRecords(recordProxies, selection.name, newVariables);\n    }\n  };\n}\n\nfunction createSetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy) {\n  return function set(newValue) {\n    var _selection$args4;\n\n    var newVariables = getArgumentValues((_selection$args4 = selection.args) !== null && _selection$args4 !== void 0 ? _selection$args4 : [], variables);\n\n    if (newValue == null) {\n      updatableProxyRootRecord.setValue(newValue, selection.name, newVariables);\n    } else {\n      var __id = newValue.__id;\n\n      if (__id == null) {\n        throw new Error('The __id field must be present on the argument. This indicates a bug in Relay.');\n      }\n\n      var newValueRecord = recordSourceProxy.get(__id);\n\n      if (newValueRecord == null) {\n        throw new Error(\"Did not find item with data id \".concat(__id, \" in the store.\"));\n      }\n\n      updatableProxyRootRecord.setLinkedRecord(newValueRecord, selection.name, newVariables);\n    }\n  };\n}\n\nfunction createGetterForPluralLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy) {\n  return function () {\n    var _selection$args5;\n\n    var newVariables = getArgumentValues((_selection$args5 = selection.args) !== null && _selection$args5 !== void 0 ? _selection$args5 : [], variables);\n    var linkedRecords = updatableProxyRootRecord.getLinkedRecords(selection.name, newVariables);\n\n    if (linkedRecords != null) {\n      return linkedRecords.map(function (linkedRecord) {\n        if (linkedRecord != null) {\n          var updatableProxy = {};\n          updateProxyFromSelections(updatableProxy, linkedRecord, variables, selection.selections, recordSourceProxy);\n\n          if (process.env.NODE_ENV !== \"production\") {\n            Object.freeze(updatableProxy);\n          } // Flow incorrect assumes that the return value for the get method must match\n          // the set parameter.\n          // $FlowFixMe[unclear-type] Typed by the generated updatable query flow type\n\n\n          return updatableProxy;\n        } else {\n          return linkedRecord;\n        } // $FlowFixMe[unclear-type] Typed by the generated updatable query flow type\n\n      });\n    } else {\n      return linkedRecords;\n    }\n  };\n}\n\nfunction createGetterForSingularLinkedField(selection, variables, updatableProxyRootRecord, recordSourceProxy) {\n  return function () {\n    var _selection$args6;\n\n    var newVariables = getArgumentValues((_selection$args6 = selection.args) !== null && _selection$args6 !== void 0 ? _selection$args6 : [], variables);\n    var linkedRecord = updatableProxyRootRecord.getLinkedRecord(selection.name, newVariables);\n\n    if (linkedRecord != null) {\n      var updatableProxy = {};\n      updateProxyFromSelections(updatableProxy, linkedRecord, variables, selection.selections, recordSourceProxy);\n\n      if (process.env.NODE_ENV !== \"production\") {\n        Object.freeze(updatableProxy);\n      } // Flow incorrect assumes that the return value for the get method must match\n      // the set parameter.\n      // $FlowFixMe[unclear-type] Typed by the generated updatable query flow type\n\n\n      return updatableProxy;\n    } else {\n      return linkedRecord;\n    }\n  };\n}\n\nmodule.exports = {\n  createUpdatableProxy: createUpdatableProxy\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}