{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar ConnectionHandler = require('./ConnectionHandler');\n\nvar ConnectionInterface = require('./ConnectionInterface');\n\nvar invariant = require('invariant');\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar DeleteRecordHandler = {\n  update: function update(store, payload) {\n    var record = store.get(payload.dataID);\n\n    if (record != null) {\n      var idOrIds = record.getValue(payload.fieldKey);\n\n      if (typeof idOrIds === 'string') {\n        store[\"delete\"](idOrIds);\n      } else if (Array.isArray(idOrIds)) {\n        idOrIds.forEach(function (id) {\n          if (typeof id === 'string') {\n            store[\"delete\"](id);\n          }\n        });\n      }\n    }\n  }\n};\nvar DeleteEdgeHandler = {\n  update: function update(store, payload) {\n    var record = store.get(payload.dataID);\n\n    if (record == null) {\n      return;\n    }\n\n    var connections = payload.handleArgs.connections;\n    !(connections != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Expected connection IDs to be specified.') : invariant(false) : void 0;\n    var idOrIds = record.getValue(payload.fieldKey);\n    var idList = Array.isArray(idOrIds) ? idOrIds : [idOrIds];\n    idList.forEach(function (id) {\n      if (typeof id === 'string') {\n        var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(connections),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var connectionID = _step.value;\n            var connection = store.get(connectionID);\n\n            if (connection == null) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, \"[Relay][Mutation] The connection with id '\".concat(connectionID, \"' doesn't exist.\")) : void 0;\n              continue;\n            }\n\n            ConnectionHandler.deleteNode(connection, id);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    });\n  }\n};\nvar AppendEdgeHandler = {\n  update: edgeUpdater(ConnectionHandler.insertEdgeAfter)\n};\nvar PrependEdgeHandler = {\n  update: edgeUpdater(ConnectionHandler.insertEdgeBefore)\n};\nvar AppendNodeHandler = {\n  update: nodeUpdater(ConnectionHandler.insertEdgeAfter)\n};\nvar PrependNodeHandler = {\n  update: nodeUpdater(ConnectionHandler.insertEdgeBefore)\n};\n\nfunction edgeUpdater(insertFn) {\n  return function (store, payload) {\n    var _serverEdges;\n\n    var record = store.get(payload.dataID);\n\n    if (record == null) {\n      return;\n    }\n\n    var connections = payload.handleArgs.connections;\n    !(connections != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Expected connection IDs to be specified.') : invariant(false) : void 0;\n    var singleServerEdge, serverEdges;\n\n    try {\n      singleServerEdge = record.getLinkedRecord(payload.fieldKey, payload.args);\n    } catch (_unused) {}\n\n    if (!singleServerEdge) {\n      try {\n        serverEdges = record.getLinkedRecords(payload.fieldKey, payload.args);\n      } catch (_unused2) {}\n    }\n\n    if (singleServerEdge == null && serverEdges == null) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'MutationHandlers: Expected the server edge to be non-null.') : void 0;\n      return;\n    }\n\n    var _ConnectionInterface$ = ConnectionInterface.get(),\n        NODE = _ConnectionInterface$.NODE,\n        EDGES = _ConnectionInterface$.EDGES;\n\n    var serverEdgeList = (_serverEdges = serverEdges) !== null && _serverEdges !== void 0 ? _serverEdges : [singleServerEdge];\n\n    var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(serverEdgeList),\n        _step2;\n\n    try {\n      var _loop = function _loop() {\n        var serverEdge = _step2.value;\n\n        if (serverEdge == null) {\n          return \"continue\";\n        }\n\n        var serverNode = serverEdge.getLinkedRecord('node');\n\n        if (!serverNode) {\n          return \"continue\";\n        }\n\n        var serverNodeId = serverNode.getDataID();\n\n        var _iterator3 = (0, _createForOfIteratorHelper2[\"default\"])(connections),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var connectionID = _step3.value;\n            var connection = store.get(connectionID);\n\n            if (connection == null) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, \"[Relay][Mutation] The connection with id '\".concat(connectionID, \"' doesn't exist.\")) : void 0;\n              continue;\n            }\n\n            var nodeAlreadyExistsInConnection = (_connection$getLinked = connection.getLinkedRecords(EDGES)) === null || _connection$getLinked === void 0 ? void 0 : _connection$getLinked.some(function (edge) {\n              var _edge$getLinkedRecord;\n\n              return (edge === null || edge === void 0 ? void 0 : (_edge$getLinkedRecord = edge.getLinkedRecord(NODE)) === null || _edge$getLinkedRecord === void 0 ? void 0 : _edge$getLinkedRecord.getDataID()) === serverNodeId;\n            });\n\n            if (nodeAlreadyExistsInConnection) {\n              continue;\n            }\n\n            var clientEdge = ConnectionHandler.buildConnectionEdge(store, connection, serverEdge);\n            !(clientEdge != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Failed to build the edge.') : invariant(false) : void 0;\n            insertFn(connection, clientEdge);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      };\n\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _connection$getLinked;\n\n        var _ret = _loop();\n\n        if (_ret === \"continue\") continue;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  };\n}\n\nfunction nodeUpdater(insertFn) {\n  return function (store, payload) {\n    var _serverNodes;\n\n    var record = store.get(payload.dataID);\n\n    if (record == null) {\n      return;\n    }\n\n    var _payload$handleArgs = payload.handleArgs,\n        connections = _payload$handleArgs.connections,\n        edgeTypeName = _payload$handleArgs.edgeTypeName;\n    !(connections != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Expected connection IDs to be specified.') : invariant(false) : void 0;\n    !(edgeTypeName != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Expected edge typename to be specified.') : invariant(false) : void 0;\n    var singleServerNode;\n    var serverNodes;\n\n    try {\n      singleServerNode = record.getLinkedRecord(payload.fieldKey, payload.args);\n    } catch (_unused3) {}\n\n    if (!singleServerNode) {\n      try {\n        serverNodes = record.getLinkedRecords(payload.fieldKey, payload.args);\n      } catch (_unused4) {}\n    }\n\n    if (singleServerNode == null && serverNodes == null) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'MutationHandlers: Expected target node to exist.') : void 0;\n      return;\n    }\n\n    var _ConnectionInterface$2 = ConnectionInterface.get(),\n        NODE = _ConnectionInterface$2.NODE,\n        EDGES = _ConnectionInterface$2.EDGES;\n\n    var serverNodeList = (_serverNodes = serverNodes) !== null && _serverNodes !== void 0 ? _serverNodes : [singleServerNode];\n\n    var _iterator4 = (0, _createForOfIteratorHelper2[\"default\"])(serverNodeList),\n        _step4;\n\n    try {\n      var _loop2 = function _loop2() {\n        var serverNode = _step4.value;\n\n        if (serverNode == null) {\n          return \"continue\";\n        }\n\n        var serverNodeId = serverNode.getDataID();\n\n        var _iterator5 = (0, _createForOfIteratorHelper2[\"default\"])(connections),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var connectionID = _step5.value;\n            var connection = store.get(connectionID);\n\n            if (connection == null) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, \"[Relay][Mutation] The connection with id '\".concat(connectionID, \"' doesn't exist.\")) : void 0;\n              continue;\n            }\n\n            var nodeAlreadyExistsInConnection = (_connection$getLinked2 = connection.getLinkedRecords(EDGES)) === null || _connection$getLinked2 === void 0 ? void 0 : _connection$getLinked2.some(function (edge) {\n              var _edge$getLinkedRecord2;\n\n              return (edge === null || edge === void 0 ? void 0 : (_edge$getLinkedRecord2 = edge.getLinkedRecord(NODE)) === null || _edge$getLinkedRecord2 === void 0 ? void 0 : _edge$getLinkedRecord2.getDataID()) === serverNodeId;\n            });\n\n            if (nodeAlreadyExistsInConnection) {\n              continue;\n            }\n\n            var clientEdge = ConnectionHandler.createEdge(store, connection, serverNode, edgeTypeName);\n            !(clientEdge != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Failed to build the edge.') : invariant(false) : void 0;\n            insertFn(connection, clientEdge);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      };\n\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var _connection$getLinked2;\n\n        var _ret2 = _loop2();\n\n        if (_ret2 === \"continue\") continue;\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  };\n}\n\nmodule.exports = {\n  AppendEdgeHandler: AppendEdgeHandler,\n  DeleteRecordHandler: DeleteRecordHandler,\n  PrependEdgeHandler: PrependEdgeHandler,\n  AppendNodeHandler: AppendNodeHandler,\n  PrependNodeHandler: PrependNodeHandler,\n  DeleteEdgeHandler: DeleteEdgeHandler\n};","map":{"version":3,"names":["_interopRequireDefault","require","_createForOfIteratorHelper2","ConnectionHandler","ConnectionInterface","invariant","warning","DeleteRecordHandler","update","store","payload","record","get","dataID","idOrIds","getValue","fieldKey","Array","isArray","forEach","id","DeleteEdgeHandler","connections","handleArgs","process","env","NODE_ENV","idList","_iterator","_step","s","n","done","connectionID","value","connection","concat","deleteNode","err","e","f","AppendEdgeHandler","edgeUpdater","insertEdgeAfter","PrependEdgeHandler","insertEdgeBefore","AppendNodeHandler","nodeUpdater","PrependNodeHandler","insertFn","_serverEdges","singleServerEdge","serverEdges","getLinkedRecord","args","_unused","getLinkedRecords","_unused2","_ConnectionInterface$","NODE","EDGES","serverEdgeList","_iterator2","_step2","_loop","serverEdge","serverNode","serverNodeId","getDataID","_iterator3","_step3","nodeAlreadyExistsInConnection","_connection$getLinked","some","edge","_edge$getLinkedRecord","clientEdge","buildConnectionEdge","_ret","_serverNodes","_payload$handleArgs","edgeTypeName","singleServerNode","serverNodes","_unused3","_unused4","_ConnectionInterface$2","serverNodeList","_iterator4","_step4","_loop2","_iterator5","_step5","_connection$getLinked2","_edge$getLinkedRecord2","createEdge","_ret2","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/relay-runtime/lib/handlers/connection/MutationHandlers.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar ConnectionHandler = require('./ConnectionHandler');\n\nvar ConnectionInterface = require('./ConnectionInterface');\n\nvar invariant = require('invariant');\n\nvar warning = require(\"fbjs/lib/warning\");\n\nvar DeleteRecordHandler = {\n  update: function update(store, payload) {\n    var record = store.get(payload.dataID);\n\n    if (record != null) {\n      var idOrIds = record.getValue(payload.fieldKey);\n\n      if (typeof idOrIds === 'string') {\n        store[\"delete\"](idOrIds);\n      } else if (Array.isArray(idOrIds)) {\n        idOrIds.forEach(function (id) {\n          if (typeof id === 'string') {\n            store[\"delete\"](id);\n          }\n        });\n      }\n    }\n  }\n};\nvar DeleteEdgeHandler = {\n  update: function update(store, payload) {\n    var record = store.get(payload.dataID);\n\n    if (record == null) {\n      return;\n    }\n\n    var connections = payload.handleArgs.connections;\n    !(connections != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Expected connection IDs to be specified.') : invariant(false) : void 0;\n    var idOrIds = record.getValue(payload.fieldKey);\n    var idList = Array.isArray(idOrIds) ? idOrIds : [idOrIds];\n    idList.forEach(function (id) {\n      if (typeof id === 'string') {\n        var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(connections),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var connectionID = _step.value;\n            var connection = store.get(connectionID);\n\n            if (connection == null) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, \"[Relay][Mutation] The connection with id '\".concat(connectionID, \"' doesn't exist.\")) : void 0;\n              continue;\n            }\n\n            ConnectionHandler.deleteNode(connection, id);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    });\n  }\n};\nvar AppendEdgeHandler = {\n  update: edgeUpdater(ConnectionHandler.insertEdgeAfter)\n};\nvar PrependEdgeHandler = {\n  update: edgeUpdater(ConnectionHandler.insertEdgeBefore)\n};\nvar AppendNodeHandler = {\n  update: nodeUpdater(ConnectionHandler.insertEdgeAfter)\n};\nvar PrependNodeHandler = {\n  update: nodeUpdater(ConnectionHandler.insertEdgeBefore)\n};\n\nfunction edgeUpdater(insertFn) {\n  return function (store, payload) {\n    var _serverEdges;\n\n    var record = store.get(payload.dataID);\n\n    if (record == null) {\n      return;\n    }\n\n    var connections = payload.handleArgs.connections;\n    !(connections != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Expected connection IDs to be specified.') : invariant(false) : void 0;\n    var singleServerEdge, serverEdges;\n\n    try {\n      singleServerEdge = record.getLinkedRecord(payload.fieldKey, payload.args);\n    } catch (_unused) {}\n\n    if (!singleServerEdge) {\n      try {\n        serverEdges = record.getLinkedRecords(payload.fieldKey, payload.args);\n      } catch (_unused2) {}\n    }\n\n    if (singleServerEdge == null && serverEdges == null) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'MutationHandlers: Expected the server edge to be non-null.') : void 0;\n      return;\n    }\n\n    var _ConnectionInterface$ = ConnectionInterface.get(),\n        NODE = _ConnectionInterface$.NODE,\n        EDGES = _ConnectionInterface$.EDGES;\n\n    var serverEdgeList = (_serverEdges = serverEdges) !== null && _serverEdges !== void 0 ? _serverEdges : [singleServerEdge];\n\n    var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(serverEdgeList),\n        _step2;\n\n    try {\n      var _loop = function _loop() {\n        var serverEdge = _step2.value;\n\n        if (serverEdge == null) {\n          return \"continue\";\n        }\n\n        var serverNode = serverEdge.getLinkedRecord('node');\n\n        if (!serverNode) {\n          return \"continue\";\n        }\n\n        var serverNodeId = serverNode.getDataID();\n\n        var _iterator3 = (0, _createForOfIteratorHelper2[\"default\"])(connections),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var connectionID = _step3.value;\n            var connection = store.get(connectionID);\n\n            if (connection == null) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, \"[Relay][Mutation] The connection with id '\".concat(connectionID, \"' doesn't exist.\")) : void 0;\n              continue;\n            }\n\n            var nodeAlreadyExistsInConnection = (_connection$getLinked = connection.getLinkedRecords(EDGES)) === null || _connection$getLinked === void 0 ? void 0 : _connection$getLinked.some(function (edge) {\n              var _edge$getLinkedRecord;\n\n              return (edge === null || edge === void 0 ? void 0 : (_edge$getLinkedRecord = edge.getLinkedRecord(NODE)) === null || _edge$getLinkedRecord === void 0 ? void 0 : _edge$getLinkedRecord.getDataID()) === serverNodeId;\n            });\n\n            if (nodeAlreadyExistsInConnection) {\n              continue;\n            }\n\n            var clientEdge = ConnectionHandler.buildConnectionEdge(store, connection, serverEdge);\n            !(clientEdge != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Failed to build the edge.') : invariant(false) : void 0;\n            insertFn(connection, clientEdge);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      };\n\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _connection$getLinked;\n\n        var _ret = _loop();\n\n        if (_ret === \"continue\") continue;\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  };\n}\n\nfunction nodeUpdater(insertFn) {\n  return function (store, payload) {\n    var _serverNodes;\n\n    var record = store.get(payload.dataID);\n\n    if (record == null) {\n      return;\n    }\n\n    var _payload$handleArgs = payload.handleArgs,\n        connections = _payload$handleArgs.connections,\n        edgeTypeName = _payload$handleArgs.edgeTypeName;\n    !(connections != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Expected connection IDs to be specified.') : invariant(false) : void 0;\n    !(edgeTypeName != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Expected edge typename to be specified.') : invariant(false) : void 0;\n    var singleServerNode;\n    var serverNodes;\n\n    try {\n      singleServerNode = record.getLinkedRecord(payload.fieldKey, payload.args);\n    } catch (_unused3) {}\n\n    if (!singleServerNode) {\n      try {\n        serverNodes = record.getLinkedRecords(payload.fieldKey, payload.args);\n      } catch (_unused4) {}\n    }\n\n    if (singleServerNode == null && serverNodes == null) {\n      process.env.NODE_ENV !== \"production\" ? warning(false, 'MutationHandlers: Expected target node to exist.') : void 0;\n      return;\n    }\n\n    var _ConnectionInterface$2 = ConnectionInterface.get(),\n        NODE = _ConnectionInterface$2.NODE,\n        EDGES = _ConnectionInterface$2.EDGES;\n\n    var serverNodeList = (_serverNodes = serverNodes) !== null && _serverNodes !== void 0 ? _serverNodes : [singleServerNode];\n\n    var _iterator4 = (0, _createForOfIteratorHelper2[\"default\"])(serverNodeList),\n        _step4;\n\n    try {\n      var _loop2 = function _loop2() {\n        var serverNode = _step4.value;\n\n        if (serverNode == null) {\n          return \"continue\";\n        }\n\n        var serverNodeId = serverNode.getDataID();\n\n        var _iterator5 = (0, _createForOfIteratorHelper2[\"default\"])(connections),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var connectionID = _step5.value;\n            var connection = store.get(connectionID);\n\n            if (connection == null) {\n              process.env.NODE_ENV !== \"production\" ? warning(false, \"[Relay][Mutation] The connection with id '\".concat(connectionID, \"' doesn't exist.\")) : void 0;\n              continue;\n            }\n\n            var nodeAlreadyExistsInConnection = (_connection$getLinked2 = connection.getLinkedRecords(EDGES)) === null || _connection$getLinked2 === void 0 ? void 0 : _connection$getLinked2.some(function (edge) {\n              var _edge$getLinkedRecord2;\n\n              return (edge === null || edge === void 0 ? void 0 : (_edge$getLinkedRecord2 = edge.getLinkedRecord(NODE)) === null || _edge$getLinkedRecord2 === void 0 ? void 0 : _edge$getLinkedRecord2.getDataID()) === serverNodeId;\n            });\n\n            if (nodeAlreadyExistsInConnection) {\n              continue;\n            }\n\n            var clientEdge = ConnectionHandler.createEdge(store, connection, serverNode, edgeTypeName);\n            !(clientEdge != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MutationHandlers: Failed to build the edge.') : invariant(false) : void 0;\n            insertFn(connection, clientEdge);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      };\n\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var _connection$getLinked2;\n\n        var _ret2 = _loop2();\n\n        if (_ret2 === \"continue\") continue;\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  };\n}\n\nmodule.exports = {\n  AppendEdgeHandler: AppendEdgeHandler,\n  DeleteRecordHandler: DeleteRecordHandler,\n  PrependEdgeHandler: PrependEdgeHandler,\n  AppendNodeHandler: AppendNodeHandler,\n  PrependNodeHandler: PrependNodeHandler,\n  DeleteEdgeHandler: DeleteEdgeHandler\n};"],"mappings":"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"},"metadata":{},"sourceType":"script"}