{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('../query/GraphQLTag'),\n    getRequest = _require.getRequest;\n\nvar isRelayModernEnvironment = require('../store/isRelayModernEnvironment');\n\nvar _require2 = require('../store/RelayModernOperationDescriptor'),\n    createOperationDescriptor = _require2.createOperationDescriptor;\n\nvar RelayDeclarativeMutationConfig = require('./RelayDeclarativeMutationConfig');\n\nvar invariant = require('invariant');\n/**\n * Higher-level helper function to execute a mutation against a specific\n * environment.\n */\n\n\nfunction applyOptimisticMutation(environment, config) {\n  !isRelayModernEnvironment(environment) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'commitMutation: expected `environment` to be an instance of ' + '`RelayModernEnvironment`.') : invariant(false) : void 0;\n  var mutation = getRequest(config.mutation);\n\n  if (mutation.params.operationKind !== 'mutation') {\n    throw new Error('commitMutation: Expected mutation operation');\n  }\n\n  var optimisticUpdater = config.optimisticUpdater;\n  var configs = config.configs,\n      optimisticResponse = config.optimisticResponse,\n      variables = config.variables;\n  var operation = createOperationDescriptor(mutation, variables);\n\n  if (configs) {\n    var _RelayDeclarativeMuta = RelayDeclarativeMutationConfig.convert(configs, mutation, optimisticUpdater);\n\n    optimisticUpdater = _RelayDeclarativeMuta.optimisticUpdater;\n  }\n\n  return environment.applyMutation({\n    operation: operation,\n    response: optimisticResponse,\n    updater: optimisticUpdater\n  });\n}\n\nmodule.exports = applyOptimisticMutation;","map":{"version":3,"names":["_require","require","getRequest","isRelayModernEnvironment","_require2","createOperationDescriptor","RelayDeclarativeMutationConfig","invariant","applyOptimisticMutation","environment","config","process","env","NODE_ENV","mutation","params","operationKind","Error","optimisticUpdater","configs","optimisticResponse","variables","operation","_RelayDeclarativeMuta","convert","applyMutation","response","updater","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/relay-runtime/lib/mutations/applyOptimisticMutation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('../query/GraphQLTag'),\n    getRequest = _require.getRequest;\n\nvar isRelayModernEnvironment = require('../store/isRelayModernEnvironment');\n\nvar _require2 = require('../store/RelayModernOperationDescriptor'),\n    createOperationDescriptor = _require2.createOperationDescriptor;\n\nvar RelayDeclarativeMutationConfig = require('./RelayDeclarativeMutationConfig');\n\nvar invariant = require('invariant');\n\n/**\n * Higher-level helper function to execute a mutation against a specific\n * environment.\n */\nfunction applyOptimisticMutation(environment, config) {\n  !isRelayModernEnvironment(environment) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'commitMutation: expected `environment` to be an instance of ' + '`RelayModernEnvironment`.') : invariant(false) : void 0;\n  var mutation = getRequest(config.mutation);\n\n  if (mutation.params.operationKind !== 'mutation') {\n    throw new Error('commitMutation: Expected mutation operation');\n  }\n\n  var optimisticUpdater = config.optimisticUpdater;\n  var configs = config.configs,\n      optimisticResponse = config.optimisticResponse,\n      variables = config.variables;\n  var operation = createOperationDescriptor(mutation, variables);\n\n  if (configs) {\n    var _RelayDeclarativeMuta = RelayDeclarativeMutationConfig.convert(configs, mutation, optimisticUpdater);\n\n    optimisticUpdater = _RelayDeclarativeMuta.optimisticUpdater;\n  }\n\n  return environment.applyMutation({\n    operation: operation,\n    response: optimisticResponse,\n    updater: optimisticUpdater\n  });\n}\n\nmodule.exports = applyOptimisticMutation;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB;AAAA,IACIC,UAAU,GAAGF,QAAQ,CAACE,UAD1B;;AAGA,IAAIC,wBAAwB,GAAGF,OAAO,CAAC,mCAAD,CAAtC;;AAEA,IAAIG,SAAS,GAAGH,OAAO,CAAC,yCAAD,CAAvB;AAAA,IACII,yBAAyB,GAAGD,SAAS,CAACC,yBAD1C;;AAGA,IAAIC,8BAA8B,GAAGL,OAAO,CAAC,kCAAD,CAA5C;;AAEA,IAAIM,SAAS,GAAGN,OAAO,CAAC,WAAD,CAAvB;AAEA;AACA;AACA;AACA;;;AACA,SAASO,uBAAT,CAAiCC,WAAjC,EAA8CC,MAA9C,EAAsD;EACpD,CAACP,wBAAwB,CAACM,WAAD,CAAzB,GAAyCE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCN,SAAS,CAAC,KAAD,EAAQ,iEAAiE,2BAAzE,CAAjD,GAAyJA,SAAS,CAAC,KAAD,CAA3M,GAAqN,KAAK,CAA1N;EACA,IAAIO,QAAQ,GAAGZ,UAAU,CAACQ,MAAM,CAACI,QAAR,CAAzB;;EAEA,IAAIA,QAAQ,CAACC,MAAT,CAAgBC,aAAhB,KAAkC,UAAtC,EAAkD;IAChD,MAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;EACD;;EAED,IAAIC,iBAAiB,GAAGR,MAAM,CAACQ,iBAA/B;EACA,IAAIC,OAAO,GAAGT,MAAM,CAACS,OAArB;EAAA,IACIC,kBAAkB,GAAGV,MAAM,CAACU,kBADhC;EAAA,IAEIC,SAAS,GAAGX,MAAM,CAACW,SAFvB;EAGA,IAAIC,SAAS,GAAGjB,yBAAyB,CAACS,QAAD,EAAWO,SAAX,CAAzC;;EAEA,IAAIF,OAAJ,EAAa;IACX,IAAII,qBAAqB,GAAGjB,8BAA8B,CAACkB,OAA/B,CAAuCL,OAAvC,EAAgDL,QAAhD,EAA0DI,iBAA1D,CAA5B;;IAEAA,iBAAiB,GAAGK,qBAAqB,CAACL,iBAA1C;EACD;;EAED,OAAOT,WAAW,CAACgB,aAAZ,CAA0B;IAC/BH,SAAS,EAAEA,SADoB;IAE/BI,QAAQ,EAAEN,kBAFqB;IAG/BO,OAAO,EAAET;EAHsB,CAA1B,CAAP;AAKD;;AAEDU,MAAM,CAACC,OAAP,GAAiBrB,uBAAjB"},"metadata":{},"sourceType":"script"}