{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('../util/RelayConcreteNode'),\n    LINKED_FIELD = _require.LINKED_FIELD;\n\nvar _require2 = require('./RelayStoreUtils'),\n    getHandleStorageKey = _require2.getHandleStorageKey;\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar invariant = require('invariant');\n/**\n * @private\n *\n * Creates a clone of the supplied `handleField` by finding the original linked\n * field (on which the handle was declared) among the sibling `selections`, and\n * copying its selections into the clone.\n */\n\n\nfunction cloneRelayHandleSourceField(handleField, selections, variables) {\n  var sourceField = selections.find(function (source) {\n    return source.kind === LINKED_FIELD && source.name === handleField.name && source.alias === handleField.alias && areEqual(source.args, handleField.args);\n  });\n  !(sourceField && sourceField.kind === LINKED_FIELD) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'cloneRelayHandleSourceField: Expected a corresponding source field for ' + 'handle `%s`.', handleField.handle) : invariant(false) : void 0;\n  var handleKey = getHandleStorageKey(handleField, variables);\n  return {\n    kind: 'LinkedField',\n    alias: sourceField.alias,\n    name: handleKey,\n    storageKey: handleKey,\n    args: null,\n    concreteType: sourceField.concreteType,\n    plural: sourceField.plural,\n    selections: sourceField.selections\n  };\n}\n\nmodule.exports = cloneRelayHandleSourceField;","map":{"version":3,"names":["_require","require","LINKED_FIELD","_require2","getHandleStorageKey","areEqual","invariant","cloneRelayHandleSourceField","handleField","selections","variables","sourceField","find","source","kind","name","alias","args","process","env","NODE_ENV","handle","handleKey","storageKey","concreteType","plural","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/relay-runtime/lib/store/cloneRelayHandleSourceField.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _require = require('../util/RelayConcreteNode'),\n    LINKED_FIELD = _require.LINKED_FIELD;\n\nvar _require2 = require('./RelayStoreUtils'),\n    getHandleStorageKey = _require2.getHandleStorageKey;\n\nvar areEqual = require(\"fbjs/lib/areEqual\");\n\nvar invariant = require('invariant');\n/**\n * @private\n *\n * Creates a clone of the supplied `handleField` by finding the original linked\n * field (on which the handle was declared) among the sibling `selections`, and\n * copying its selections into the clone.\n */\n\n\nfunction cloneRelayHandleSourceField(handleField, selections, variables) {\n  var sourceField = selections.find(function (source) {\n    return source.kind === LINKED_FIELD && source.name === handleField.name && source.alias === handleField.alias && areEqual(source.args, handleField.args);\n  });\n  !(sourceField && sourceField.kind === LINKED_FIELD) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'cloneRelayHandleSourceField: Expected a corresponding source field for ' + 'handle `%s`.', handleField.handle) : invariant(false) : void 0;\n  var handleKey = getHandleStorageKey(handleField, variables);\n  return {\n    kind: 'LinkedField',\n    alias: sourceField.alias,\n    name: handleKey,\n    storageKey: handleKey,\n    args: null,\n    concreteType: sourceField.concreteType,\n    plural: sourceField.plural,\n    selections: sourceField.selections\n  };\n}\n\nmodule.exports = cloneRelayHandleSourceField;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,2BAAD,CAAtB;AAAA,IACIC,YAAY,GAAGF,QAAQ,CAACE,YAD5B;;AAGA,IAAIC,SAAS,GAAGF,OAAO,CAAC,mBAAD,CAAvB;AAAA,IACIG,mBAAmB,GAAGD,SAAS,CAACC,mBADpC;;AAGA,IAAIC,QAAQ,GAAGJ,OAAO,CAAC,mBAAD,CAAtB;;AAEA,IAAIK,SAAS,GAAGL,OAAO,CAAC,WAAD,CAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASM,2BAAT,CAAqCC,WAArC,EAAkDC,UAAlD,EAA8DC,SAA9D,EAAyE;EACvE,IAAIC,WAAW,GAAGF,UAAU,CAACG,IAAX,CAAgB,UAAUC,MAAV,EAAkB;IAClD,OAAOA,MAAM,CAACC,IAAP,KAAgBZ,YAAhB,IAAgCW,MAAM,CAACE,IAAP,KAAgBP,WAAW,CAACO,IAA5D,IAAoEF,MAAM,CAACG,KAAP,KAAiBR,WAAW,CAACQ,KAAjG,IAA0GX,QAAQ,CAACQ,MAAM,CAACI,IAAR,EAAcT,WAAW,CAACS,IAA1B,CAAzH;EACD,CAFiB,CAAlB;EAGA,EAAEN,WAAW,IAAIA,WAAW,CAACG,IAAZ,KAAqBZ,YAAtC,IAAsDgB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCd,SAAS,CAAC,KAAD,EAAQ,4EAA4E,cAApF,EAAoGE,WAAW,CAACa,MAAhH,CAAjD,GAA2Kf,SAAS,CAAC,KAAD,CAA1O,GAAoP,KAAK,CAAzP;EACA,IAAIgB,SAAS,GAAGlB,mBAAmB,CAACI,WAAD,EAAcE,SAAd,CAAnC;EACA,OAAO;IACLI,IAAI,EAAE,aADD;IAELE,KAAK,EAAEL,WAAW,CAACK,KAFd;IAGLD,IAAI,EAAEO,SAHD;IAILC,UAAU,EAAED,SAJP;IAKLL,IAAI,EAAE,IALD;IAMLO,YAAY,EAAEb,WAAW,CAACa,YANrB;IAOLC,MAAM,EAAEd,WAAW,CAACc,MAPf;IAQLhB,UAAU,EAAEE,WAAW,CAACF;EARnB,CAAP;AAUD;;AAEDiB,MAAM,CAACC,OAAP,GAAiBpB,2BAAjB"},"metadata":{},"sourceType":"script"}