{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar loadEntryPoint = require('./loadEntryPoint');\n\nvar _require = require('./loadQuery'),\n    useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;\n\nvar useIsMountedRef = require('./useIsMountedRef');\n\nvar _require2 = require('react'),\n    useCallback = _require2.useCallback,\n    useEffect = _require2.useEffect,\n    useRef = _require2.useRef,\n    useState = _require2.useState;\n\nvar initialNullEntryPointReferenceState = {\n  kind: 'NullEntryPointReference'\n};\n\nfunction useLoadEntryPoint(environmentProvider, entryPoint, options) {\n  var _options$TEST_ONLY__i, _options$TEST_ONLY__i2, _options$TEST_ONLY__i3, _options$TEST_ONLY__i4;\n  /**\n   * We want to always call `entryPointReference.dispose()` for every call to\n   * `setEntryPointReference(loadEntryPoint(...))` so that no leaks of data in Relay\n   * stores will occur.\n   *\n   * However, a call to `setState(newState)` is not always followed by a commit where\n   * this value is reflected in the state. Thus, we cannot reliably clean up each ref\n   * with `useEffect(() => () => entryPointReference.dispose(), [entryPointReference])`.\n   *\n   * Instead, we keep track of each call to `loadEntryPoint` in a ref.\n   * Relying on the fact that if a state change commits, no state changes that were\n   * initiated prior to the currently committing state change will ever subsequently\n   * commit, we can safely dispose of all preloaded entry point references\n   * associated with state changes initiated prior to the currently committing state\n   * change.\n   *\n   * Finally, when the hook unmounts, we also dispose of all remaining uncommitted\n   * entry point references.\n   */\n\n\n  useTrackLoadQueryInRender();\n  var initialEntryPointReferenceInternal = (_options$TEST_ONLY__i = options === null || options === void 0 ? void 0 : (_options$TEST_ONLY__i2 = options.TEST_ONLY__initialEntryPointData) === null || _options$TEST_ONLY__i2 === void 0 ? void 0 : _options$TEST_ONLY__i2.entryPointReference) !== null && _options$TEST_ONLY__i !== void 0 ? _options$TEST_ONLY__i : initialNullEntryPointReferenceState;\n  var initialEntryPointParamsInternal = (_options$TEST_ONLY__i3 = options === null || options === void 0 ? void 0 : (_options$TEST_ONLY__i4 = options.TEST_ONLY__initialEntryPointData) === null || _options$TEST_ONLY__i4 === void 0 ? void 0 : _options$TEST_ONLY__i4.entryPointParams) !== null && _options$TEST_ONLY__i3 !== void 0 ? _options$TEST_ONLY__i3 : null;\n  var isMountedRef = useIsMountedRef();\n  var undisposedEntryPointReferencesRef = useRef(new Set([initialEntryPointReferenceInternal]));\n\n  var _useState = useState(initialEntryPointReferenceInternal),\n      entryPointReference = _useState[0],\n      setEntryPointReference = _useState[1];\n\n  var _useState2 = useState(initialEntryPointParamsInternal),\n      entryPointParams = _useState2[0],\n      setEntryPointParams = _useState2[1];\n\n  var disposeEntryPoint = useCallback(function () {\n    if (isMountedRef.current) {\n      var nullEntryPointReference = {\n        kind: 'NullEntryPointReference'\n      };\n      undisposedEntryPointReferencesRef.current.add(nullEntryPointReference);\n      setEntryPointReference(nullEntryPointReference);\n    }\n  }, [setEntryPointReference, isMountedRef]);\n  var entryPointLoaderCallback = useCallback(function (params) {\n    if (isMountedRef.current) {\n      var updatedEntryPointReference = loadEntryPoint(environmentProvider, entryPoint, params);\n      undisposedEntryPointReferencesRef.current.add(updatedEntryPointReference);\n      setEntryPointReference(updatedEntryPointReference);\n      setEntryPointParams(params);\n    }\n  }, [environmentProvider, entryPoint, setEntryPointReference, isMountedRef]);\n  var maybeHiddenOrFastRefresh = useRef(false);\n  useEffect(function () {\n    return function () {\n      // Attempt to detect if the component was\n      // hidden (by Offscreen API), or fast refresh occured;\n      // Only in these situations would the effect cleanup\n      // for \"unmounting\" run multiple times, so if\n      // we are ever able to read this ref with a value\n      // of true, it means that one of these cases\n      // has happened.\n      maybeHiddenOrFastRefresh.current = true;\n    };\n  }, []);\n  useEffect(function () {\n    if (maybeHiddenOrFastRefresh.current === true) {\n      // This block only runs if the component has previously \"unmounted\"\n      // due to it being hidden by the Offscreen API, or during fast refresh.\n      // At this point, the current entryPointReference will have been disposed\n      // by the previous cleanup, so instead of attempting to\n      // do our regular commit setup, which would incorrectly leave our\n      // current entryPointReference disposed, we need to load the entryPoint again\n      // and force a re-render by calling entryPointLoaderCallback again,\n      // so that the entryPointReference's queries are correctly re-retained, and\n      // potentially refetched if necessary.\n      maybeHiddenOrFastRefresh.current = false;\n\n      if (entryPointReference.kind !== 'NullEntryPointReference' && entryPointParams != null) {\n        entryPointLoaderCallback(entryPointParams);\n      }\n\n      return;\n    } // When a new entryPointReference is committed, we iterate over all\n    // entrypoint refs in undisposedEntryPointReferences and dispose all of\n    // the refs that aren't the currently committed one. This ensures\n    // that we don't leave any dangling entrypoint references for the\n    // case that loadEntryPoint is called multiple times before commit; when\n    // this happens, multiple state updates will be scheduled, but only one\n    // will commit, meaning that we need to keep track of and dispose any\n    // query references that don't end up committing.\n    // - We are relying on the fact that sets iterate in insertion order, and we\n    // can remove items from a set as we iterate over it (i.e. no iterator\n    // invalidation issues.) Thus, it is safe to loop through\n    // undisposedEntryPointReferences until we find entryPointReference, and\n    // remove and dispose all previous references.\n    // - We are guaranteed to find entryPointReference in the set, because if a\n    // state change results in a commit, no state changes initiated prior to that\n    // one will be committed, and we are disposing and removing references\n    // associated with commits that were initiated prior to the currently\n    // committing state change. (A useEffect callback is called during the commit\n    // phase.)\n\n\n    var undisposedEntryPointReferences = undisposedEntryPointReferencesRef.current;\n\n    if (isMountedRef.current) {\n      var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(undisposedEntryPointReferences),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var undisposedEntryPointReference = _step.value;\n\n          if (undisposedEntryPointReference === entryPointReference) {\n            break;\n          }\n\n          undisposedEntryPointReferences[\"delete\"](undisposedEntryPointReference);\n\n          if (undisposedEntryPointReference.kind !== 'NullEntryPointReference') {\n            undisposedEntryPointReference.dispose();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, [entryPointReference, entryPointParams, entryPointLoaderCallback, isMountedRef]);\n  useEffect(function () {\n    return function disposeAllRemainingEntryPointReferences() {\n      // undisposedEntryPointReferences.current is never reassigned\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(undisposedEntryPointReferencesRef.current),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var unhandledStateChange = _step2.value;\n\n          if (unhandledStateChange.kind !== 'NullEntryPointReference') {\n            unhandledStateChange.dispose();\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    };\n  }, []);\n  return [entryPointReference.kind === 'NullEntryPointReference' ? null : entryPointReference, entryPointLoaderCallback, disposeEntryPoint];\n}\n\nmodule.exports = useLoadEntryPoint;","map":{"version":3,"names":["_interopRequireDefault","require","_createForOfIteratorHelper2","loadEntryPoint","_require","useTrackLoadQueryInRender","useIsMountedRef","_require2","useCallback","useEffect","useRef","useState","initialNullEntryPointReferenceState","kind","useLoadEntryPoint","environmentProvider","entryPoint","options","_options$TEST_ONLY__i","_options$TEST_ONLY__i2","_options$TEST_ONLY__i3","_options$TEST_ONLY__i4","initialEntryPointReferenceInternal","TEST_ONLY__initialEntryPointData","entryPointReference","initialEntryPointParamsInternal","entryPointParams","isMountedRef","undisposedEntryPointReferencesRef","Set","_useState","setEntryPointReference","_useState2","setEntryPointParams","disposeEntryPoint","current","nullEntryPointReference","add","entryPointLoaderCallback","params","updatedEntryPointReference","maybeHiddenOrFastRefresh","undisposedEntryPointReferences","_iterator","_step","s","n","done","undisposedEntryPointReference","value","dispose","err","e","f","disposeAllRemainingEntryPointReferences","_iterator2","_step2","unhandledStateChange","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/react-relay/lib/relay-hooks/useEntryPointLoader.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _createForOfIteratorHelper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createForOfIteratorHelper\"));\n\nvar loadEntryPoint = require('./loadEntryPoint');\n\nvar _require = require('./loadQuery'),\n    useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;\n\nvar useIsMountedRef = require('./useIsMountedRef');\n\nvar _require2 = require('react'),\n    useCallback = _require2.useCallback,\n    useEffect = _require2.useEffect,\n    useRef = _require2.useRef,\n    useState = _require2.useState;\n\nvar initialNullEntryPointReferenceState = {\n  kind: 'NullEntryPointReference'\n};\n\nfunction useLoadEntryPoint(environmentProvider, entryPoint, options) {\n  var _options$TEST_ONLY__i, _options$TEST_ONLY__i2, _options$TEST_ONLY__i3, _options$TEST_ONLY__i4;\n\n  /**\n   * We want to always call `entryPointReference.dispose()` for every call to\n   * `setEntryPointReference(loadEntryPoint(...))` so that no leaks of data in Relay\n   * stores will occur.\n   *\n   * However, a call to `setState(newState)` is not always followed by a commit where\n   * this value is reflected in the state. Thus, we cannot reliably clean up each ref\n   * with `useEffect(() => () => entryPointReference.dispose(), [entryPointReference])`.\n   *\n   * Instead, we keep track of each call to `loadEntryPoint` in a ref.\n   * Relying on the fact that if a state change commits, no state changes that were\n   * initiated prior to the currently committing state change will ever subsequently\n   * commit, we can safely dispose of all preloaded entry point references\n   * associated with state changes initiated prior to the currently committing state\n   * change.\n   *\n   * Finally, when the hook unmounts, we also dispose of all remaining uncommitted\n   * entry point references.\n   */\n  useTrackLoadQueryInRender();\n  var initialEntryPointReferenceInternal = (_options$TEST_ONLY__i = options === null || options === void 0 ? void 0 : (_options$TEST_ONLY__i2 = options.TEST_ONLY__initialEntryPointData) === null || _options$TEST_ONLY__i2 === void 0 ? void 0 : _options$TEST_ONLY__i2.entryPointReference) !== null && _options$TEST_ONLY__i !== void 0 ? _options$TEST_ONLY__i : initialNullEntryPointReferenceState;\n  var initialEntryPointParamsInternal = (_options$TEST_ONLY__i3 = options === null || options === void 0 ? void 0 : (_options$TEST_ONLY__i4 = options.TEST_ONLY__initialEntryPointData) === null || _options$TEST_ONLY__i4 === void 0 ? void 0 : _options$TEST_ONLY__i4.entryPointParams) !== null && _options$TEST_ONLY__i3 !== void 0 ? _options$TEST_ONLY__i3 : null;\n  var isMountedRef = useIsMountedRef();\n  var undisposedEntryPointReferencesRef = useRef(new Set([initialEntryPointReferenceInternal]));\n\n  var _useState = useState(initialEntryPointReferenceInternal),\n      entryPointReference = _useState[0],\n      setEntryPointReference = _useState[1];\n\n  var _useState2 = useState(initialEntryPointParamsInternal),\n      entryPointParams = _useState2[0],\n      setEntryPointParams = _useState2[1];\n\n  var disposeEntryPoint = useCallback(function () {\n    if (isMountedRef.current) {\n      var nullEntryPointReference = {\n        kind: 'NullEntryPointReference'\n      };\n      undisposedEntryPointReferencesRef.current.add(nullEntryPointReference);\n      setEntryPointReference(nullEntryPointReference);\n    }\n  }, [setEntryPointReference, isMountedRef]);\n  var entryPointLoaderCallback = useCallback(function (params) {\n    if (isMountedRef.current) {\n      var updatedEntryPointReference = loadEntryPoint(environmentProvider, entryPoint, params);\n      undisposedEntryPointReferencesRef.current.add(updatedEntryPointReference);\n      setEntryPointReference(updatedEntryPointReference);\n      setEntryPointParams(params);\n    }\n  }, [environmentProvider, entryPoint, setEntryPointReference, isMountedRef]);\n  var maybeHiddenOrFastRefresh = useRef(false);\n  useEffect(function () {\n    return function () {\n      // Attempt to detect if the component was\n      // hidden (by Offscreen API), or fast refresh occured;\n      // Only in these situations would the effect cleanup\n      // for \"unmounting\" run multiple times, so if\n      // we are ever able to read this ref with a value\n      // of true, it means that one of these cases\n      // has happened.\n      maybeHiddenOrFastRefresh.current = true;\n    };\n  }, []);\n  useEffect(function () {\n    if (maybeHiddenOrFastRefresh.current === true) {\n      // This block only runs if the component has previously \"unmounted\"\n      // due to it being hidden by the Offscreen API, or during fast refresh.\n      // At this point, the current entryPointReference will have been disposed\n      // by the previous cleanup, so instead of attempting to\n      // do our regular commit setup, which would incorrectly leave our\n      // current entryPointReference disposed, we need to load the entryPoint again\n      // and force a re-render by calling entryPointLoaderCallback again,\n      // so that the entryPointReference's queries are correctly re-retained, and\n      // potentially refetched if necessary.\n      maybeHiddenOrFastRefresh.current = false;\n\n      if (entryPointReference.kind !== 'NullEntryPointReference' && entryPointParams != null) {\n        entryPointLoaderCallback(entryPointParams);\n      }\n\n      return;\n    } // When a new entryPointReference is committed, we iterate over all\n    // entrypoint refs in undisposedEntryPointReferences and dispose all of\n    // the refs that aren't the currently committed one. This ensures\n    // that we don't leave any dangling entrypoint references for the\n    // case that loadEntryPoint is called multiple times before commit; when\n    // this happens, multiple state updates will be scheduled, but only one\n    // will commit, meaning that we need to keep track of and dispose any\n    // query references that don't end up committing.\n    // - We are relying on the fact that sets iterate in insertion order, and we\n    // can remove items from a set as we iterate over it (i.e. no iterator\n    // invalidation issues.) Thus, it is safe to loop through\n    // undisposedEntryPointReferences until we find entryPointReference, and\n    // remove and dispose all previous references.\n    // - We are guaranteed to find entryPointReference in the set, because if a\n    // state change results in a commit, no state changes initiated prior to that\n    // one will be committed, and we are disposing and removing references\n    // associated with commits that were initiated prior to the currently\n    // committing state change. (A useEffect callback is called during the commit\n    // phase.)\n\n\n    var undisposedEntryPointReferences = undisposedEntryPointReferencesRef.current;\n\n    if (isMountedRef.current) {\n      var _iterator = (0, _createForOfIteratorHelper2[\"default\"])(undisposedEntryPointReferences),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var undisposedEntryPointReference = _step.value;\n\n          if (undisposedEntryPointReference === entryPointReference) {\n            break;\n          }\n\n          undisposedEntryPointReferences[\"delete\"](undisposedEntryPointReference);\n\n          if (undisposedEntryPointReference.kind !== 'NullEntryPointReference') {\n            undisposedEntryPointReference.dispose();\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, [entryPointReference, entryPointParams, entryPointLoaderCallback, isMountedRef]);\n  useEffect(function () {\n    return function disposeAllRemainingEntryPointReferences() {\n      // undisposedEntryPointReferences.current is never reassigned\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      var _iterator2 = (0, _createForOfIteratorHelper2[\"default\"])(undisposedEntryPointReferencesRef.current),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var unhandledStateChange = _step2.value;\n\n          if (unhandledStateChange.kind !== 'NullEntryPointReference') {\n            unhandledStateChange.dispose();\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    };\n  }, []);\n  return [entryPointReference.kind === 'NullEntryPointReference' ? null : entryPointReference, entryPointLoaderCallback, disposeEntryPoint];\n}\n\nmodule.exports = useLoadEntryPoint;"],"mappings":"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"},"metadata":{},"sourceType":"script"}