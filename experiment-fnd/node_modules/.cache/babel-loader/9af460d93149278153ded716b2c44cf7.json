{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar HooksImplementation = require('./HooksImplementation');\n\nvar _require = require('./loadQuery'),\n    useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;\n\nvar useFragmentNode = require('./useFragmentNode');\n\nvar useStaticFragmentNodeWarning = require('./useStaticFragmentNodeWarning');\n\nvar _require2 = require('react'),\n    useDebugValue = _require2.useDebugValue;\n\nvar _require3 = require('relay-runtime'),\n    getFragment = _require3.getFragment;\n\nfunction useFragment_LEGACY(fragment, key) {\n  // We need to use this hook in order to be able to track if\n  // loadQuery was called during render\n  useTrackLoadQueryInRender();\n  var fragmentNode = getFragment(fragment);\n  useStaticFragmentNodeWarning(fragmentNode, 'first argument of useFragment()');\n\n  var _useFragmentNode = useFragmentNode(fragmentNode, key, 'useFragment()'),\n      data = _useFragmentNode.data;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useDebugValue({\n      fragment: fragmentNode.name,\n      data: data\n    });\n  }\n\n  return data;\n}\n\nfunction useFragment(fragment, key) {\n  var impl = HooksImplementation.get();\n\n  if (impl) {\n    // $FlowFixMe This is safe because impl.useFragment has the type of useFragment...\n    return impl.useFragment(fragment, key); // (i.e. type declared above, but not the supertype used in this function definition)\n  } else {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useFragment_LEGACY(fragment, key);\n  }\n}\n\nmodule.exports = useFragment;","map":{"version":3,"names":["HooksImplementation","require","_require","useTrackLoadQueryInRender","useFragmentNode","useStaticFragmentNodeWarning","_require2","useDebugValue","_require3","getFragment","useFragment_LEGACY","fragment","key","fragmentNode","_useFragmentNode","data","process","env","NODE_ENV","name","useFragment","impl","get","module","exports"],"sources":["/Users/anubhavgupta/Documents/react_learning/experiment_schema_ratings/rating-frontent-with-gql/module-rating-rough/experiment-fnd/node_modules/react-relay/lib/relay-hooks/useFragment.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @emails oncall+relay\n * \n * @format\n */\n// flowlint ambiguous-object-type:error\n'use strict';\n\nvar HooksImplementation = require('./HooksImplementation');\n\nvar _require = require('./loadQuery'),\n    useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;\n\nvar useFragmentNode = require('./useFragmentNode');\n\nvar useStaticFragmentNodeWarning = require('./useStaticFragmentNodeWarning');\n\nvar _require2 = require('react'),\n    useDebugValue = _require2.useDebugValue;\n\nvar _require3 = require('relay-runtime'),\n    getFragment = _require3.getFragment;\n\nfunction useFragment_LEGACY(fragment, key) {\n  // We need to use this hook in order to be able to track if\n  // loadQuery was called during render\n  useTrackLoadQueryInRender();\n  var fragmentNode = getFragment(fragment);\n  useStaticFragmentNodeWarning(fragmentNode, 'first argument of useFragment()');\n\n  var _useFragmentNode = useFragmentNode(fragmentNode, key, 'useFragment()'),\n      data = _useFragmentNode.data;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    useDebugValue({\n      fragment: fragmentNode.name,\n      data: data\n    });\n  }\n\n  return data;\n}\n\nfunction useFragment(fragment, key) {\n  var impl = HooksImplementation.get();\n\n  if (impl) {\n    // $FlowFixMe This is safe because impl.useFragment has the type of useFragment...\n    return impl.useFragment(fragment, key); // (i.e. type declared above, but not the supertype used in this function definition)\n  } else {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    return useFragment_LEGACY(fragment, key);\n  }\n}\n\nmodule.exports = useFragment;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,mBAAmB,GAAGC,OAAO,CAAC,uBAAD,CAAjC;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,aAAD,CAAtB;AAAA,IACIE,yBAAyB,GAAGD,QAAQ,CAACC,yBADzC;;AAGA,IAAIC,eAAe,GAAGH,OAAO,CAAC,mBAAD,CAA7B;;AAEA,IAAII,4BAA4B,GAAGJ,OAAO,CAAC,gCAAD,CAA1C;;AAEA,IAAIK,SAAS,GAAGL,OAAO,CAAC,OAAD,CAAvB;AAAA,IACIM,aAAa,GAAGD,SAAS,CAACC,aAD9B;;AAGA,IAAIC,SAAS,GAAGP,OAAO,CAAC,eAAD,CAAvB;AAAA,IACIQ,WAAW,GAAGD,SAAS,CAACC,WAD5B;;AAGA,SAASC,kBAAT,CAA4BC,QAA5B,EAAsCC,GAAtC,EAA2C;EACzC;EACA;EACAT,yBAAyB;EACzB,IAAIU,YAAY,GAAGJ,WAAW,CAACE,QAAD,CAA9B;EACAN,4BAA4B,CAACQ,YAAD,EAAe,iCAAf,CAA5B;;EAEA,IAAIC,gBAAgB,GAAGV,eAAe,CAACS,YAAD,EAAeD,GAAf,EAAoB,eAApB,CAAtC;EAAA,IACIG,IAAI,GAAGD,gBAAgB,CAACC,IAD5B;;EAGA,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzC;IACAX,aAAa,CAAC;MACZI,QAAQ,EAAEE,YAAY,CAACM,IADX;MAEZJ,IAAI,EAAEA;IAFM,CAAD,CAAb;EAID;;EAED,OAAOA,IAAP;AACD;;AAED,SAASK,WAAT,CAAqBT,QAArB,EAA+BC,GAA/B,EAAoC;EAClC,IAAIS,IAAI,GAAGrB,mBAAmB,CAACsB,GAApB,EAAX;;EAEA,IAAID,IAAJ,EAAU;IACR;IACA,OAAOA,IAAI,CAACD,WAAL,CAAiBT,QAAjB,EAA2BC,GAA3B,CAAP,CAFQ,CAEgC;EACzC,CAHD,MAGO;IACL;IACA,OAAOF,kBAAkB,CAACC,QAAD,EAAWC,GAAX,CAAzB;EACD;AACF;;AAEDW,MAAM,CAACC,OAAP,GAAiBJ,WAAjB"},"metadata":{},"sourceType":"script"}