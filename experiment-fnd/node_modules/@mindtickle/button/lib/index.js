import "core-js/modules/es.object.values.js";
import _objectSpread from "/app/node_modules/@babel/runtime/helpers/esm/objectSpread2";
import { jsxDEV as _jsxDEV } from "react/jsx-dev-runtime";
import _objectWithoutProperties from "/app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "/app/node_modules/@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "/app/node_modules/@babel/runtime/helpers/esm/createClass";
import _inherits from "/app/node_modules/@babel/runtime/helpers/esm/inherits";
import _createSuper from "/app/node_modules/@babel/runtime/helpers/esm/createSuper";
var _jsxFileName = "/app/packages/Button/src/index.js";
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import Loader from '@mindtickle/loader';
import Icon from '@mindtickle/icon';
import MtButton, { BUTTON_SIZES, BUTTON_TYPES, MT_SIZE_TO_ANT_BUTTON_SIZE_MAP, MT_TYPE_ANT_BUTTON_TYPE_MAP, BUTTON_LOADER_COLOR } from './style';

var noop = function noop() {
  return undefined;
};

var Button = /*#__PURE__*/function (_Component) {
  _inherits(Button, _Component);

  var _super = _createSuper(Button);

  function Button() {
    _classCallCheck(this, Button);

    return _super.apply(this, arguments);
  }

  _createClass(Button, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          children = _this$props.children,
          type = _this$props.type,
          _this$props$style = _this$props.style,
          style = _this$props$style === void 0 ? {} : _this$props$style,
          active = _this$props.active,
          disabled = _this$props.disabled,
          size = _this$props.size,
          loading = _this$props.loading,
          danger = _this$props.danger;
      var antdType = MT_TYPE_ANT_BUTTON_TYPE_MAP[type];

      var _this$props2 = this.props,
          className = _this$props2.className,
          rest = _objectWithoutProperties(_this$props2, ["className"]);

      return /*#__PURE__*/_jsxDEV(MtButton, _objectSpread(_objectSpread({}, rest), {}, {
        active: active ? 1 : 0,
        disabled: disabled,
        className: className,
        type: antdType,
        style: style,
        danger: danger ? 1 : 0,
        loading: loading,
        size: MT_SIZE_TO_ANT_BUTTON_SIZE_MAP[size] || MT_SIZE_TO_ANT_BUTTON_SIZE_MAP['large'],
        children: [loading && /*#__PURE__*/_jsxDEV(Loader, {
          size: "sizeXSmall",
          type: "Full",
          style: {
            loaderStyle: {
              borderColor: BUTTON_LOADER_COLOR[type]
            }
          }
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 54,
          columnNumber: 11
        }, this), children, type === 'edit' && /*#__PURE__*/_jsxDEV(Icon, {
          type: "edit",
          className: "editIcon"
        }, void 0, false, {
          fileName: _jsxFileName,
          lineNumber: 61,
          columnNumber: 29
        }, this)]
      }), void 0, true, {
        fileName: _jsxFileName,
        lineNumber: 42,
        columnNumber: 7
      }, this);
    }
  }]);

  return Button;
}(Component);

Button.propTypes = {
  onClick: PropTypes.func,
  type: PropTypes.oneOf(Object.values(BUTTON_TYPES)),
  children: PropTypes.node,
  disabled: PropTypes.bool,
  size: PropTypes.oneOf(Object.values(BUTTON_SIZES)),
  style: PropTypes.object,
  className: PropTypes.string,
  active: PropTypes.bool,
  loading: PropTypes.bool,
  danger: PropTypes.bool
};
Button.defaultProps = {
  onClick: noop,
  children: 'Submit',
  disabled: false,
  type: BUTTON_TYPES.PRIMARY,
  size: 'large',
  danger: false
};
export default Button;