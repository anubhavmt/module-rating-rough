/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @emails oncall+relay
 * 
 * @format
 */
// flowlint ambiguous-object-type:error
'use strict';

var HooksImplementation = require('./HooksImplementation');

var _require = require('./loadQuery'),
    useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;

var useFragmentNode = require('./useFragmentNode');

var useStaticFragmentNodeWarning = require('./useStaticFragmentNodeWarning');

var _require2 = require('react'),
    useDebugValue = _require2.useDebugValue;

var _require3 = require('relay-runtime'),
    getFragment = _require3.getFragment;

function useFragment_LEGACY(fragment, key) {
  // We need to use this hook in order to be able to track if
  // loadQuery was called during render
  useTrackLoadQueryInRender();
  var fragmentNode = getFragment(fragment);
  useStaticFragmentNodeWarning(fragmentNode, 'first argument of useFragment()');

  var _useFragmentNode = useFragmentNode(fragmentNode, key, 'useFragment()'),
      data = _useFragmentNode.data;

  if (process.env.NODE_ENV !== "production") {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    useDebugValue({
      fragment: fragmentNode.name,
      data: data
    });
  }

  return data;
}

function useFragment(fragment, key) {
  var impl = HooksImplementation.get();

  if (impl) {
    // $FlowFixMe This is safe because impl.useFragment has the type of useFragment...
    return impl.useFragment(fragment, key); // (i.e. type declared above, but not the supertype used in this function definition)
  } else {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    return useFragment_LEGACY(fragment, key);
  }
}

module.exports = useFragment;