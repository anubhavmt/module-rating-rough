/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @emails oncall+relay
 * 
 * @format
 */
// flowlint ambiguous-object-type:error
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _createForOfIteratorHelper2 = _interopRequireDefault(require("@babel/runtime/helpers/createForOfIteratorHelper"));

var _require = require('./loadQuery'),
    loadQuery = _require.loadQuery,
    useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;

var useIsMountedRef = require('./useIsMountedRef');

var useRelayEnvironment = require('./useRelayEnvironment');

var _require2 = require('react'),
    useCallback = _require2.useCallback,
    useEffect = _require2.useEffect,
    useRef = _require2.useRef,
    useState = _require2.useState;

var _require3 = require('relay-runtime'),
    getRequest = _require3.getRequest;

var initialNullQueryReferenceState = {
  kind: 'NullQueryReference'
};

function requestIsLiveQuery(preloadableRequest) {
  if (preloadableRequest.kind === 'PreloadableConcreteRequest') {
    return preloadableRequest.params.metadata.live !== undefined;
  }

  var request = getRequest(preloadableRequest);
  return request.params.metadata.live !== undefined;
}

function useQueryLoader(preloadableRequest, initialQueryReference) {
  /**
   * We want to always call `queryReference.dispose()` for every call to
   * `setQueryReference(loadQuery(...))` so that no leaks of data in Relay stores
   * will occur.
   *
   * However, a call to `setState(newState)` is not always followed by a commit where
   * this value is reflected in the state. Thus, we cannot reliably clean up each
   * ref with `useEffect(() => () => queryReference.dispose(), [queryReference])`.
   *
   * Instead, we keep track of each call to `loadQuery` in a ref.
   * Relying on the fact that if a state change commits, no state changes that were
   * initiated prior to the currently committing state change will ever subsequently
   * commit, we can safely dispose of all preloaded query references
   * associated with state changes initiated prior to the currently committing state
   * change.
   *
   * Finally, when the hook unmounts, we also dispose of all remaining uncommitted
   * query references.
   */
  var initialQueryReferenceInternal = initialQueryReference !== null && initialQueryReference !== void 0 ? initialQueryReference : initialNullQueryReferenceState;
  var environment = useRelayEnvironment();
  useTrackLoadQueryInRender();
  var isMountedRef = useIsMountedRef();
  var undisposedQueryReferencesRef = useRef(new Set([initialQueryReferenceInternal]));

  var _useState = useState(function () {
    return initialQueryReferenceInternal;
  }),
      queryReference = _useState[0],
      setQueryReference = _useState[1];

  var _useState2 = useState(function () {
    return initialQueryReferenceInternal;
  }),
      previousInitialQueryReference = _useState2[0],
      setPreviousInitialQueryReference = _useState2[1];

  if (initialQueryReferenceInternal !== previousInitialQueryReference) {
    // Rendering the query reference makes it "managed" by this hook, so
    // we start keeping track of it so we can dispose it when it is no longer
    // necessary here
    // TODO(T78446637): Handle disposal of managed query references in
    // components that were never mounted after rendering
    undisposedQueryReferencesRef.current.add(initialQueryReferenceInternal);
    setPreviousInitialQueryReference(initialQueryReferenceInternal);
    setQueryReference(initialQueryReferenceInternal);
  }

  var disposeQuery = useCallback(function () {
    if (isMountedRef.current) {
      undisposedQueryReferencesRef.current.add(initialNullQueryReferenceState);
      setQueryReference(initialNullQueryReferenceState);
    }
  }, [isMountedRef]);
  var queryLoaderCallback = useCallback(function (variables, options) {
    var mergedOptions = options != null && options.hasOwnProperty('__environment') ? {
      fetchPolicy: options.fetchPolicy,
      networkCacheConfig: options.networkCacheConfig,
      __nameForWarning: options.__nameForWarning
    } : options;

    if (isMountedRef.current) {
      var _options$__environmen;

      var updatedQueryReference = loadQuery((_options$__environmen = options === null || options === void 0 ? void 0 : options.__environment) !== null && _options$__environmen !== void 0 ? _options$__environmen : environment, preloadableRequest, variables, mergedOptions);
      undisposedQueryReferencesRef.current.add(updatedQueryReference);
      setQueryReference(updatedQueryReference);
    }
  }, [environment, preloadableRequest, setQueryReference, isMountedRef]);
  var maybeHiddenOrFastRefresh = useRef(false);
  useEffect(function () {
    return function () {
      // Attempt to detect if the component was
      // hidden (by Offscreen API), or fast refresh occured;
      // Only in these situations would the effect cleanup
      // for "unmounting" run multiple times, so if
      // we are ever able to read this ref with a value
      // of true, it means that one of these cases
      // has happened.
      maybeHiddenOrFastRefresh.current = true;
    };
  }, []);
  useEffect(function () {
    if (maybeHiddenOrFastRefresh.current === true) {
      // This block only runs if the component has previously "unmounted"
      // due to it being hidden by the Offscreen API, or during fast refresh.
      // At this point, the current queryReference will have been disposed
      // by the previous cleanup, so instead of attempting to
      // do our regular commit setup, which would incorrectly leave our
      // current queryReference disposed, we need to load the query again
      // and force a re-render by calling queryLoaderCallback again,
      // so that the queryReference is correctly re-retained, and
      // potentially refetched if necessary.
      maybeHiddenOrFastRefresh.current = false;

      if (queryReference.kind !== 'NullQueryReference') {
        queryLoaderCallback(queryReference.variables, {
          fetchPolicy: queryReference.fetchPolicy,
          networkCacheConfig: queryReference.networkCacheConfig
        });
      }

      return;
    } // When a new queryReference is committed, we iterate over all
    // query references in undisposedQueryReferences and dispose all of
    // the refs that aren't the currently committed one. This ensures
    // that we don't leave any dangling query references for the
    // case that loadQuery is called multiple times before commit; when
    // this happens, multiple state updates will be scheduled, but only one
    // will commit, meaning that we need to keep track of and dispose any
    // query references that don't end up committing.
    // - We are relying on the fact that sets iterate in insertion order, and we
    // can remove items from a set as we iterate over it (i.e. no iterator
    // invalidation issues.) Thus, it is safe to loop through
    // undisposedQueryReferences until we find queryReference, and
    // remove and dispose all previous references.
    // - We are guaranteed to find queryReference in the set, because if a
    // state update results in a commit, no state updates initiated prior to that
    // one will be committed, and we are disposing and removing references
    // associated with updates that were scheduled prior to the currently
    // committing state change. (A useEffect callback is called during the commit
    // phase.)


    var undisposedQueryReferences = undisposedQueryReferencesRef.current;

    if (isMountedRef.current) {
      var _iterator = (0, _createForOfIteratorHelper2["default"])(undisposedQueryReferences),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var undisposedQueryReference = _step.value;

          if (undisposedQueryReference === queryReference) {
            break;
          }

          undisposedQueryReferences["delete"](undisposedQueryReference);

          if (undisposedQueryReference.kind !== 'NullQueryReference') {
            if (requestIsLiveQuery(preloadableRequest)) {
              undisposedQueryReference.dispose && undisposedQueryReference.dispose();
            } else {
              undisposedQueryReference.releaseQuery && undisposedQueryReference.releaseQuery();
            }
          }
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, [queryReference, isMountedRef, queryLoaderCallback, preloadableRequest]);
  useEffect(function () {
    return function disposeAllRemainingQueryReferences() {
      // undisposedQueryReferences.current is never reassigned
      // eslint-disable-next-line react-hooks/exhaustive-deps
      var _iterator2 = (0, _createForOfIteratorHelper2["default"])(undisposedQueryReferencesRef.current),
          _step2;

      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var undisposedQueryReference = _step2.value;

          if (undisposedQueryReference.kind !== 'NullQueryReference') {
            if (requestIsLiveQuery(preloadableRequest)) {
              undisposedQueryReference.dispose && undisposedQueryReference.dispose();
            } else {
              undisposedQueryReference.releaseQuery && undisposedQueryReference.releaseQuery();
            }
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
    };
  }, [preloadableRequest]);
  return [queryReference.kind === 'NullQueryReference' ? null : queryReference, queryLoaderCallback, disposeQuery];
}

module.exports = useQueryLoader;