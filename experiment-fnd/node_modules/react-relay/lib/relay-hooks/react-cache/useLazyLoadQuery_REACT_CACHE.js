/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @emails oncall+relay
 * @format
 */
// flowlint ambiguous-object-type:error
'use strict';

var _require = require('../loadQuery'),
    useTrackLoadQueryInRender = _require.useTrackLoadQueryInRender;

var useMemoOperationDescriptor = require('../useMemoOperationDescriptor');

var useRelayEnvironment = require('../useRelayEnvironment');

var getQueryResultOrFetchQuery = require('./getQueryResultOrFetchQuery_REACT_CACHE');

var useFragmentInternal = require('./useFragmentInternal_REACT_CACHE');

var _require2 = require('react'),
    useEffect = _require2.useEffect;

function useLazyLoadQuery_REACT_CACHE(gqlQuery, variables, options) {
  var _options$networkCache;

  useTrackLoadQueryInRender();
  var environment = useRelayEnvironment();
  var queryOperationDescriptor = useMemoOperationDescriptor(gqlQuery, variables, (_options$networkCache = options === null || options === void 0 ? void 0 : options.networkCacheConfig) !== null && _options$networkCache !== void 0 ? _options$networkCache : {
    force: true
  }); // Get the query going if needed -- this may suspend.

  var _getQueryResultOrFetc = getQueryResultOrFetchQuery(environment, queryOperationDescriptor, {
    fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,
    renderPolicy: options === null || options === void 0 ? void 0 : options.UNSTABLE_renderPolicy,
    fetchKey: options === null || options === void 0 ? void 0 : options.fetchKey
  }),
      queryResult = _getQueryResultOrFetc[0],
      effect = _getQueryResultOrFetc[1];

  useEffect(effect); // Read the query's root fragment -- this may suspend.

  var fragmentNode = queryResult.fragmentNode,
      fragmentRef = queryResult.fragmentRef; // $FlowExpectedError[incompatible-return] Is this a fixable incompatible-return?

  return useFragmentInternal(fragmentNode, fragmentRef, 'useLazyLoadQuery()', {
    fetchPolicy: options === null || options === void 0 ? void 0 : options.fetchPolicy,
    networkCacheConfig: options === null || options === void 0 ? void 0 : options.networkCacheConfig
  });
}

module.exports = useLazyLoadQuery_REACT_CACHE;